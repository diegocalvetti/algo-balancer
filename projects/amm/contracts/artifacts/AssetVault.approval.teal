#pragma version 10
intcblock 0 8 1 1000000 4 10 6 5 2
bytecblock 0x 0x617373657473 0x62616c616e6365735f 0x70726f76696465645f 0x151f7c75 0x656e645f726f756e64 0x776569676874735f 0x746f6b656e 0x73746172745f726f756e64 0x0a8101 0x7461726765745f776569676874735f 0x6275726e6564 0x0000000000000000 0x6d616e61676572

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 6 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 2 // 1
	return

// createApplication(): void
//
// Initializes global state variables when the application is first created.
//
// This method is automatically invoked during the application's creation call (`NoOp` with bare create).
// It sets the initial manager to the app creator.
//
// This function should only be called once at contract deployment.
createApplication:
	proto 0 0

	// contracts/AssetVault.algo.ts:38
	// this.manager.value = this.app.creator
	bytec 13 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put

	// contracts/AssetVault.algo.ts:40
	// this.startRound.value = 0
	bytec 8 //  "start_round"
	intc 0 // 0
	app_global_put

	// contracts/AssetVault.algo.ts:41
	// this.endRound.value = 0
	bytec 5 //  "end_round"
	intc 0 // 0
	app_global_put
	retsub

// bootstrap(uint64[],uint64[])uint64
*abi_route_bootstrap:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bootstrap(uint64[],uint64[])uint64
	callsub bootstrap
	itob
	concat
	log
	intc 2 // 1
	return

// bootstrap(assetIds: AssetID[], weights: uint64[]): AssetID
//
// Bootstrap the pool by assigning assets and weights, create the LP tokens.
// @param {AssetID[]} assetIds - assets of the pool
// @param {uint64[]} weights - weights of the pool
// @return uint64 - LP Token created ID
bootstrap:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/AssetVault.algo.ts:51
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/AssetVault.algo.ts:52
	// assert(assetIds.length >= 2, 'At least 2 tokens needed')
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	intc 8 // 2
	>=

	// At least 2 tokens needed
	assert

	// contracts/AssetVault.algo.ts:53
	// assert(assetIds.length === weights.length, 'Weights and Assets length must be the same')
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	frame_dig -2 // weights: uint64[]
	len
	intc 1 // 8
	/
	==

	// Weights and Assets length must be the same
	assert

	// contracts/AssetVault.algo.ts:54
	// sumOfWeights = 0
	intc 0 // 0
	frame_bury 0 // sumOfWeights: uint64

	// contracts/AssetVault.algo.ts:56
	// for (let i = 0; i < assetIds.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/AssetVault.algo.ts:56
	// i < assetIds.length
	frame_dig 1 // i: uint64
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	<
	bz *for_0_end

	// contracts/AssetVault.algo.ts:57
	// this.optIn(assetIds[i])
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	callsub optIn

	// contracts/AssetVault.algo.ts:58
	// this.addToken(i, assetIds[i], weights[i])
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig 1 // i: uint64
	callsub addToken

	// contracts/AssetVault.algo.ts:59
	// sumOfWeights += weights[i]
	frame_dig 0 // sumOfWeights: uint64
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	+
	frame_bury 0 // sumOfWeights: uint64

*for_0_continue:
	// contracts/AssetVault.algo.ts:56
	// i += 1
	frame_dig 1 // i: uint64
	intc 2 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/AssetVault.algo.ts:62
	// this.burned.value = 0
	bytec 11 //  "burned"
	intc 0 // 0
	app_global_put

	// contracts/AssetVault.algo.ts:63
	// this.assets.value = assetIds
	bytec 1 //  "assets"
	frame_dig -1 // assetIds: AssetID[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/AssetVault.algo.ts:65
	// assert(this.absDiff(sumOfWeights, SCALE) <= 1, 'Weights must sum to 1')
	intc 3 // 1000000
	frame_dig 0 // sumOfWeights: uint64
	callsub absDiff
	intc 2 // 1
	<=

	// Weights must sum to 1
	assert

	// contracts/AssetVault.algo.ts:66
	// this.createToken()
	callsub createToken

	// contracts/AssetVault.algo.ts:68
	// return this.token.value;
	bytec 7 //  "token"
	app_global_get

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(uint64,axfer)void
*abi_route_addLiquidity:
	// txn: axfer
	txn GroupIndex
	intc 2 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (txn) for addLiquidity must be a axfer transaction
	assert

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,axfer)void
	callsub addLiquidity
	intc 2 // 1
	return

// addLiquidity(index: uint64, txn: AssetTransferTxn): void
//
// Provide one token liquidity to the pool
// @param {uint64} index - index of the token in the pool
// @param txn
addLiquidity:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/AssetVault.algo.ts:77
	// this.assertIsBootstrapped()
	callsub assertIsBootstrapped

	// contracts/AssetVault.algo.ts:78
	// this.tryFinalizeWeights()
	callsub tryFinalizeWeights

	// contracts/AssetVault.algo.ts:80
	// sender = txn.sender
	frame_dig -2 // txn: AssetTransferTxn
	gtxns Sender
	frame_bury 0 // sender: address

	// contracts/AssetVault.algo.ts:81
	// amount = txn.assetAmount
	frame_dig -2 // txn: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 1 // amount: uint64

	// contracts/AssetVault.algo.ts:83
	// assetId = this.assets.value[index]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 2 // assetId: uint64

	// contracts/AssetVault.algo.ts:84
	// log('Asset ID => ' + itob(assetId))
	pushbytes 0x4173736574204944203d3e20 // "Asset ID => "
	frame_dig 2 // assetId: uint64
	itob
	concat
	log

	// contracts/AssetVault.algo.ts:86
	// this.optIn(assetId)
	frame_dig 2 // assetId: uint64
	callsub optIn

	// contracts/AssetVault.algo.ts:87
	// this.balances(assetId).value += amount
	bytec 2 //  "balances_"
	frame_dig 2 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_dig 1 // amount: uint64
	+
	bytec 2 //  "balances_"
	frame_dig 2 // assetId: uint64
	itob
	concat
	swap
	itob
	box_put

	// *if0_condition
	// contracts/AssetVault.algo.ts:89
	// !this.provided(sender).exists
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/AssetVault.algo.ts:90
	// this.provided(sender).create((this.assets.value.length + 1) * 8)
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	intc 2 // 1
	+
	intc 1 // 8
	*
	box_create
	pop

*if0_end:
	// contracts/AssetVault.algo.ts:93
	// this.provided(sender).value[index] += amount
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig 1 // amount: uint64
	+
	itob
	replace3
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	retsub

// getLiquidity()uint64
*abi_route_getLiquidity:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// execute getLiquidity()uint64
	callsub getLiquidity
	itob
	concat
	log
	intc 2 // 1
	return

// getLiquidity(): uint64
//
// Mints LP tokens to the given sender based on the liquidity they provided.
//
// If this is the first liquidity provision (i.e., total LP supply is 0),
// a fixed initial amount is minted to the sender. Otherwise, the amount
// is calculated proportionally using `computeNAssetsLiquidity()`.
//
// After minting, the sender's "provided" state is reset.
//
// @returns The amount of LP tokens minted
getLiquidity:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/AssetVault.algo.ts:108
	// this.assertIsBootstrapped()
	callsub assertIsBootstrapped

	// contracts/AssetVault.algo.ts:109
	// this.tryFinalizeWeights()
	callsub tryFinalizeWeights

	// contracts/AssetVault.algo.ts:111
	// sender = this.txn.sender
	txn Sender
	frame_bury 0 // sender: address

	// contracts/AssetVault.algo.ts:112
	// amount: uint64 = 0
	intc 0 // 0
	frame_bury 1 // amount: uint64

	// *if1_condition
	// contracts/AssetVault.algo.ts:114
	// this.totalLP() === 0
	callsub totalLP
	intc 0 // 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts/AssetVault.algo.ts:116
	// amount = AMOUNT_LP_DEPLOYER
	pushint 1_000_000
	intc 5 // 10
	intc 6 // 6
	exp
	*
	frame_bury 1 // amount: uint64
	b *if1_end

*if1_else:
	// contracts/AssetVault.algo.ts:118
	// amount = this.computeNAssetsLiquidity(sender)
	frame_dig 0 // sender: address
	callsub computeNAssetsLiquidity
	frame_bury 1 // amount: uint64

*if1_end:
	// contracts/AssetVault.algo.ts:121
	// for (let i = 0; i < this.provided(sender).value.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_1:
	// contracts/AssetVault.algo.ts:121
	// i < this.provided(sender).value.length
	frame_dig 2 // i: uint64
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	len
	intc 1 // 8
	/
	<
	bz *for_1_end

	// contracts/AssetVault.algo.ts:122
	// this.provided(sender).value[i] = 0
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 2 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 12 // 0x0000000000000000
	replace3
	bytec 3 //  "provided_"
	frame_dig 0 // sender: address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*for_1_continue:
	// contracts/AssetVault.algo.ts:121
	// i += 1
	frame_dig 2 // i: uint64
	intc 2 // 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	// contracts/AssetVault.algo.ts:125
	// sendAssetTransfer({
	//       assetReceiver: sender,
	//       assetAmount: amount,
	//       xferAsset: this.token.value,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/AssetVault.algo.ts:126
	// assetReceiver: sender
	frame_dig 0 // sender: address
	itxn_field AssetReceiver

	// contracts/AssetVault.algo.ts:127
	// assetAmount: amount
	frame_dig 1 // amount: uint64
	itxn_field AssetAmount

	// contracts/AssetVault.algo.ts:128
	// xferAsset: this.token.value
	bytec 7 //  "token"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetVault.algo.ts:131
	// return amount;
	frame_dig 1 // amount: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// burnLiquidity(axfer)void
*abi_route_burnLiquidity:
	// transferTxn: axfer
	txn GroupIndex
	intc 2 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (transferTxn) for burnLiquidity must be a axfer transaction
	assert

	// execute burnLiquidity(axfer)void
	callsub burnLiquidity
	intc 2 // 1
	return

// burnLiquidity(transferTxn: AssetTransferTxn): void
//
// Burns a given amount of LP tokens from the sender and returns
// their proportional share of each asset in the pool.
//
// The withdrawn amount for each asset is calculated based on the
// ratio of `amountLP` to the total LP supply.
//
// @param transferTxn
burnLiquidity:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts/AssetVault.algo.ts:144
	// this.assertIsBootstrapped()
	callsub assertIsBootstrapped

	// contracts/AssetVault.algo.ts:145
	// this.tryFinalizeWeights()
	callsub tryFinalizeWeights

	// contracts/AssetVault.algo.ts:147
	// sender = this.txn.sender
	txn Sender
	frame_bury 0 // sender: address

	// contracts/AssetVault.algo.ts:148
	// amountLP = transferTxn.assetAmount
	frame_dig -1 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 1 // amountLP: uint64

	// contracts/AssetVault.algo.ts:150
	// assert(amountLP > 0, 'Must burn positive amount')
	frame_dig 1 // amountLP: uint64
	intc 0 // 0
	>

	// Must burn positive amount
	assert

	// contracts/AssetVault.algo.ts:152
	// totalLP = this.totalLP()
	callsub totalLP
	frame_bury 2 // totalLP: uint64

	// contracts/AssetVault.algo.ts:153
	// numAssets = this.assets.value.length
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	frame_bury 3 // numAssets: uint64

	// contracts/AssetVault.algo.ts:155
	// for (let i = 0; i < numAssets; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_2:
	// contracts/AssetVault.algo.ts:155
	// i < numAssets
	frame_dig 4 // i: uint64
	frame_dig 3 // numAssets: uint64
	<
	bz *for_2_end

	// contracts/AssetVault.algo.ts:156
	// assetId = this.assets.value[i]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 4 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 5 // assetId: uint64

	// contracts/AssetVault.algo.ts:157
	// poolBalance = this.balances(assetId).value
	bytec 2 //  "balances_"
	frame_dig 5 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_bury 6 // poolBalance: uint64

	// contracts/AssetVault.algo.ts:159
	// assetAmount = wideRatio([amountLP, poolBalance], [totalLP])
	frame_dig 1 // amountLP: uint64
	frame_dig 6 // poolBalance: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // totalLP: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // assetAmount: uint64

	// contracts/AssetVault.algo.ts:161
	// this.balances(assetId).value = poolBalance - assetAmount
	bytec 2 //  "balances_"
	frame_dig 5 // assetId: uint64
	itob
	concat
	frame_dig 6 // poolBalance: uint64
	frame_dig 7 // assetAmount: uint64
	-
	itob
	box_put

	// contracts/AssetVault.algo.ts:163
	// sendAssetTransfer({
	//         assetReceiver: sender,
	//         assetAmount: assetAmount,
	//         xferAsset: assetId,
	//       })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/AssetVault.algo.ts:164
	// assetReceiver: sender
	frame_dig 0 // sender: address
	itxn_field AssetReceiver

	// contracts/AssetVault.algo.ts:165
	// assetAmount: assetAmount
	frame_dig 7 // assetAmount: uint64
	itxn_field AssetAmount

	// contracts/AssetVault.algo.ts:166
	// xferAsset: assetId
	frame_dig 5 // assetId: uint64
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*for_2_continue:
	// contracts/AssetVault.algo.ts:155
	// i += 1
	frame_dig 4 // i: uint64
	intc 2 // 1
	+
	frame_bury 4 // i: uint64
	b *for_2

*for_2_end:
	// contracts/AssetVault.algo.ts:170
	// this.burned.value += amountLP
	bytec 11 //  "burned"
	app_global_get
	frame_dig 1 // amountLP: uint64
	+
	bytec 11 //  "burned"
	swap
	app_global_put
	retsub

// swap(uint64,uint64,axfer)uint64
*abi_route_swap:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// transferTxn: axfer
	txn GroupIndex
	intc 2 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (transferTxn) for swap must be a axfer transaction
	assert

	// to: uint64
	txna ApplicationArgs 2
	btoi

	// from: uint64
	txna ApplicationArgs 1
	btoi

	// execute swap(uint64,uint64,axfer)uint64
	callsub swap
	itob
	concat
	log
	intc 2 // 1
	return

// swap(from: uint64, to: uint64, transferTxn: AssetTransferTxn): uint64
//
// Executes a weighted swap between two tokens in the pool based on the constant mean formula.
//
// The input token (`from`) is sent into the pool, and the output token (`to`) is sent back
// to the sender, following the AMM's pricing curve determined by current balances and weights.
//
// This function performs the following steps:
// - Retrieves the current weights and balances for the two assets.
// - Calculates the output amount using the invariant pricing function (`calcOut`).
// - Updates the pool's internal balances accordingly.
// - Transfers the output asset to the sender.
//
// @param from - Index of the input asset in the pool.
// @param to - Index of the output asset in the pool.
// @param transferTxn
// @returns The amount of output asset received.
swap:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 8

	// contracts/AssetVault.algo.ts:191
	// this.assertIsBootstrapped()
	callsub assertIsBootstrapped

	// contracts/AssetVault.algo.ts:192
	// this.tryFinalizeWeights()
	callsub tryFinalizeWeights

	// contracts/AssetVault.algo.ts:193
	// increaseOpcodeBudget()
	itxn_begin
	intc 6 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 9 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 7 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/AssetVault.algo.ts:195
	// sender = transferTxn.sender
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns Sender
	frame_bury 0 // sender: address

	// contracts/AssetVault.algo.ts:196
	// amount = transferTxn.assetAmount
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 1 // amount: uint64

	// contracts/AssetVault.algo.ts:198
	// assetIn = this.assets.value[from]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // from: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 2 // assetIn: uint64

	// contracts/AssetVault.algo.ts:199
	// assetOut = this.assets.value[to]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // to: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 3 // assetOut: uint64

	// contracts/AssetVault.algo.ts:201
	// balanceIn = this.balances(assetIn).value
	bytec 2 //  "balances_"
	frame_dig 2 // assetIn: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetIn).value
	assert
	btoi
	frame_bury 4 // balanceIn: uint64

	// contracts/AssetVault.algo.ts:202
	// balanceOut = this.balances(assetOut).value
	bytec 2 //  "balances_"
	frame_dig 3 // assetOut: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetOut).value
	assert
	btoi
	frame_bury 5 // balanceOut: uint64

	// contracts/AssetVault.algo.ts:204
	// weightIn = this.getCurrentWeight(from)
	frame_dig -1 // from: uint64
	callsub getCurrentWeight
	frame_bury 6 // weightIn: uint64

	// contracts/AssetVault.algo.ts:205
	// weightOut = this.getCurrentWeight(to)
	frame_dig -2 // to: uint64
	callsub getCurrentWeight
	frame_bury 7 // weightOut: uint64

	// contracts/AssetVault.algo.ts:207
	// amountOut = this.calcOut(balanceIn, weightIn, balanceOut, weightOut, amount)
	frame_dig 1 // amount: uint64
	frame_dig 7 // weightOut: uint64
	frame_dig 5 // balanceOut: uint64
	frame_dig 6 // weightIn: uint64
	frame_dig 4 // balanceIn: uint64
	callsub calcOut
	frame_bury 8 // amountOut: uint64

	// contracts/AssetVault.algo.ts:209
	// log(itob(amountOut))
	frame_dig 8 // amountOut: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:211
	// this.balances(assetIn).value = balanceIn + amount
	bytec 2 //  "balances_"
	frame_dig 2 // assetIn: uint64
	itob
	concat
	frame_dig 4 // balanceIn: uint64
	frame_dig 1 // amount: uint64
	+
	itob
	box_put

	// contracts/AssetVault.algo.ts:212
	// this.balances(assetOut).value = balanceOut - amountOut
	bytec 2 //  "balances_"
	frame_dig 3 // assetOut: uint64
	itob
	concat
	frame_dig 5 // balanceOut: uint64
	frame_dig 8 // amountOut: uint64
	-
	itob
	box_put

	// contracts/AssetVault.algo.ts:214
	// sendAssetTransfer({
	//       assetReceiver: sender,
	//       assetAmount: amountOut,
	//       xferAsset: assetOut,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/AssetVault.algo.ts:215
	// assetReceiver: sender
	frame_dig 0 // sender: address
	itxn_field AssetReceiver

	// contracts/AssetVault.algo.ts:216
	// assetAmount: amountOut
	frame_dig 8 // amountOut: uint64
	itxn_field AssetAmount

	// contracts/AssetVault.algo.ts:217
	// xferAsset: assetOut
	frame_dig 3 // assetOut: uint64
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetVault.algo.ts:220
	// return amountOut;
	frame_dig 8 // amountOut: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// changeWeights(uint64,uint64[])uint64
*abi_route_changeWeights:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// newWeights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeWeights(uint64,uint64[])uint64
	callsub changeWeights
	itob
	concat
	log
	intc 2 // 1
	return

// changeWeights(duration: uint64, newWeights: uint64[]): uint64
//
// Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
//
// If `duration` is zero, the new weights are applied immediately by overwriting the current weights.
// Otherwise, a linear transition is initiated from the current weights to `newWeights` over the specified
// duration (measured in seconds or microseconds (?)).
//
// During the transition period, weights are dynamically computed based on the elapsed time
// between `startRound` and `endRound`, and stored in `targetWeights`. The current weights must be
// retrieved using a function like `getCurrentWeight()` for accurate interpolated values.
//
// @param {uint64[]} newWeights - Array of new target weights for each asset in the pool.
// @param {uint64} duration - Duration of the interpolation (in blocks). If 0, the weights are updated instantly.
changeWeights:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/AssetVault.algo.ts:238
	// this.assertIsBootstrapped()
	callsub assertIsBootstrapped

	// contracts/AssetVault.algo.ts:239
	// this.assertNoWeightTransition()
	callsub assertNoWeightTransition

	// *if2_condition
	// contracts/AssetVault.algo.ts:241
	// duration === 0
	frame_dig -1 // duration: uint64
	intc 0 // 0
	==
	bz *if2_else

	// *if2_consequent
	// contracts/AssetVault.algo.ts:242
	// this.startRound.value = 0
	bytec 8 //  "start_round"
	intc 0 // 0
	app_global_put

	// contracts/AssetVault.algo.ts:243
	// this.endRound.value = 0
	bytec 5 //  "end_round"
	intc 0 // 0
	app_global_put

	// contracts/AssetVault.algo.ts:244
	// for (let i = 0; i < newWeights.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/AssetVault.algo.ts:244
	// i < newWeights.length
	frame_dig 0 // i: uint64
	frame_dig -2 // newWeights: uint64[]
	len
	intc 1 // 8
	/
	<
	bz *for_3_end

	// contracts/AssetVault.algo.ts:245
	// this.weights(i).value = newWeights[i]
	bytec 6 //  "weights_"
	frame_dig 0 // i: uint64
	itob
	concat
	frame_dig -2 // newWeights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 0 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	box_put

*for_3_continue:
	// contracts/AssetVault.algo.ts:244
	// i += 1
	frame_dig 0 // i: uint64
	intc 2 // 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	b *if2_end

*if2_else:
	// contracts/AssetVault.algo.ts:248
	// currentRound = globals.round
	global Round
	frame_bury 1 // currentRound: uint64

	// contracts/AssetVault.algo.ts:250
	// this.startRound.value = currentRound
	bytec 8 //  "start_round"
	frame_dig 1 // currentRound: uint64
	app_global_put

	// contracts/AssetVault.algo.ts:251
	// this.endRound.value = currentRound + duration
	bytec 5 //  "end_round"
	frame_dig 1 // currentRound: uint64
	frame_dig -1 // duration: uint64
	+
	app_global_put

	// contracts/AssetVault.algo.ts:253
	// for (let i = 0; i < newWeights.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_4:
	// contracts/AssetVault.algo.ts:253
	// i < newWeights.length
	frame_dig 2 // i: uint64
	frame_dig -2 // newWeights: uint64[]
	len
	intc 1 // 8
	/
	<
	bz *for_4_end

	// contracts/AssetVault.algo.ts:254
	// this.targetWeights(i).value = newWeights[i]
	bytec 10 //  "target_weights_"
	frame_dig 2 // i: uint64
	itob
	concat
	frame_dig -2 // newWeights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 2 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	box_put

*for_4_continue:
	// contracts/AssetVault.algo.ts:253
	// i += 1
	frame_dig 2 // i: uint64
	intc 2 // 1
	+
	frame_bury 2 // i: uint64
	b *for_4

*for_4_end:

*if2_end:
	// contracts/AssetVault.algo.ts:258
	// return this.endRound.value;
	bytec 5 //  "end_round"
	app_global_get

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// addAsset(uint64,uint64)uint64
*abi_route_addAsset:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// w: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute addAsset(uint64,uint64)uint64
	callsub addAsset
	itob
	concat
	log
	intc 2 // 1
	return

// addAsset(asset: AssetID, w: uint64): uint64
addAsset:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/AssetVault.algo.ts:262
	// newIndex = this.assets.value.length
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	frame_bury 0 // newIndex: uint64

	// contracts/AssetVault.algo.ts:263
	// this.assets.value[newIndex] = asset
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 0 // newIndex: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	frame_dig -1 // asset: AssetID
	itob
	replace3
	bytec 1 //  "assets"
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/AssetVault.algo.ts:265
	// for (let i = 0; i < newIndex; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_5:
	// contracts/AssetVault.algo.ts:265
	// i < newIndex
	frame_dig 1 // i: uint64
	frame_dig 0 // newIndex: uint64
	<
	bz *for_5_end

	// contracts/AssetVault.algo.ts:266
	// this.weights(i).value = this.weights(i).value * (SCALE - w)
	bytec 6 //  "weights_"
	frame_dig 1 // i: uint64
	itob
	concat
	bytec 6 //  "weights_"
	frame_dig 1 // i: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(i).value
	assert
	btoi
	intc 3 // 1000000
	frame_dig -2 // w: uint64
	-
	*
	itob
	box_put

*for_5_continue:
	// contracts/AssetVault.algo.ts:265
	// i += 1
	frame_dig 1 // i: uint64
	intc 2 // 1
	+
	frame_bury 1 // i: uint64
	b *for_5

*for_5_end:
	// contracts/AssetVault.algo.ts:269
	// this.weights(newIndex).value = w
	bytec 6 //  "weights_"
	frame_dig 0 // newIndex: uint64
	itob
	concat
	frame_dig -2 // w: uint64
	itob
	box_put

	// contracts/AssetVault.algo.ts:271
	// return w;
	frame_dig -2 // w: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// tryFinalizeWeights(): void
tryFinalizeWeights:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if3_condition
	// contracts/AssetVault.algo.ts:275
	// this.endRound.value !== 0 && globals.round >= this.endRound.value
	bytec 5 //  "end_round"
	app_global_get
	intc 0 // 0
	!=
	dup
	bz *skip_and0
	global Round
	bytec 5 //  "end_round"
	app_global_get
	>=
	&&

*skip_and0:
	bz *if3_end

	// *if3_consequent
	// contracts/AssetVault.algo.ts:276
	// for (let i = 0; i < this.assets.value.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_6:
	// contracts/AssetVault.algo.ts:276
	// i < this.assets.value.length
	frame_dig 0 // i: uint64
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	<
	bz *for_6_end

	// contracts/AssetVault.algo.ts:277
	// this.weights(i).value = this.targetWeights(i).value
	bytec 6 //  "weights_"
	frame_dig 0 // i: uint64
	itob
	concat
	bytec 10 //  "target_weights_"
	frame_dig 0 // i: uint64
	itob
	concat
	box_get

	// box value does not exist: this.targetWeights(i).value
	assert
	btoi
	itob
	box_put

*for_6_continue:
	// contracts/AssetVault.algo.ts:276
	// i += 1
	frame_dig 0 // i: uint64
	intc 2 // 1
	+
	frame_bury 0 // i: uint64
	b *for_6

*for_6_end:
	// contracts/AssetVault.algo.ts:279
	// this.startRound.value = 0
	bytec 8 //  "start_round"
	intc 0 // 0
	app_global_put

	// contracts/AssetVault.algo.ts:280
	// this.endRound.value = 0
	bytec 5 //  "end_round"
	intc 0 // 0
	app_global_put

*if3_end:
	retsub

// optIn(assetId: AssetID): void
//
// *******************
// SUBROUTINES
// *******************
//
// Opts the application into a given ASA if not already opted-in.
//
// @param assetId - The ID of the asset to opt into.
optIn:
	proto 1 0

	// *if4_condition
	// contracts/AssetVault.algo.ts:294
	// this.app.address.isOptedInToAsset(assetId)
	global CurrentApplicationAddress
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	bz *if4_end

	// *if4_consequent
	// contracts/AssetVault.algo.ts:295
	// return;
	retsub

*if4_end:
	// contracts/AssetVault.algo.ts:298
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: assetId,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/AssetVault.algo.ts:299
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/AssetVault.algo.ts:300
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts/AssetVault.algo.ts:301
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToken(index: uint64, assetID: AssetID, weight: uint64): void
//
// Registers a new token in the pool by initializing its balance and weight.
//
// This function creates and sets:
// - A balance box for the token, initialized to 0.
// - A weight box for the token's index, used in weighted operations like swaps.
//
// It assumes the caller has already validated inputs and manages order/indexing externally.
//
// @param index - Index of the token within the pool.
// @param assetID - The ASA ID of the token to add.
// @param weight - The normalized weight assigned to the token (e.g., scaled by 1e6).
addToken:
	proto 3 0

	// *if5_condition
	// contracts/AssetVault.algo.ts:319
	// !this.weights(index).exists
	bytec 6 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if5_end

	// *if5_consequent
	// contracts/AssetVault.algo.ts:320
	// this.weights(index).create(8)
	bytec 6 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if5_end:
	// *if6_condition
	// contracts/AssetVault.algo.ts:323
	// !this.balances(assetID).exists
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// contracts/AssetVault.algo.ts:324
	// this.balances(assetID).create(8)
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if6_end:
	// contracts/AssetVault.algo.ts:327
	// this.weights(index).value = weight
	bytec 6 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	frame_dig -3 // weight: uint64
	itob
	box_put

	// contracts/AssetVault.algo.ts:328
	// this.balances(assetID).value = 0
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	bytec 12 // 0x0000000000000000
	box_put
	retsub

// createToken(): void
//
// Creates the LP (liquidity provider) token for the pool if it does not already exist.
//
// The LP token is an Algorand Standard Asset (ASA) that represents a user's proportional
// share of the pool.
// This function ensures only one token is created, and sets the contract
// as its manager and reserve.
//
// The token is configured with:
// - Total supply: `TOTAL_LP_SUPPLY`
// - Decimals: 6
// - Reserve: this contract's address
// - No clawback/freeze addresses
// - Default frozen: false
//
// The Token name is dynamically derived from the application ID.
createToken:
	proto 0 0

	// *if7_condition
	// contracts/AssetVault.algo.ts:349
	// this.token.value === AssetID.zeroIndex
	bytec 7 //  "token"
	app_global_get
	intc 0 // 0
	==
	bz *if7_end

	// *if7_consequent
	// contracts/AssetVault.algo.ts:350
	// this.token.value = sendAssetCreation({
	//         configAssetTotal: TOTAL_LP_SUPPLY,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'BalancedPool-' + this.app.id.toString(),
	//         configAssetUnitName: 'LP',
	//       })
	bytec 7 //  "token"
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/AssetVault.algo.ts:351
	// configAssetTotal: TOTAL_LP_SUPPLY
	intc 5 // 10
	pushint 16
	exp
	itxn_field ConfigAssetTotal

	// contracts/AssetVault.algo.ts:352
	// configAssetDecimals: 6
	intc 6 // 6
	itxn_field ConfigAssetDecimals

	// contracts/AssetVault.algo.ts:353
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/AssetVault.algo.ts:354
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/AssetVault.algo.ts:355
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts/AssetVault.algo.ts:356
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts/AssetVault.algo.ts:357
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/AssetVault.algo.ts:358
	// configAssetName: 'BalancedPool-' + this.app.id.toString()
	pushbytes 0x42616c616e636564506f6f6c2d // "BalancedPool-"
	txna Applications 0
	callsub *itoa
	concat
	itxn_field ConfigAssetName

	// contracts/AssetVault.algo.ts:359
	// configAssetUnitName: 'LP'
	pushbytes 0x4c50 // "LP"
	itxn_field ConfigAssetUnitName

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if7_end:
	retsub

// assertIsManager(): void
//
// Assert the tx sender is the manager
assertIsManager:
	proto 0 0

	// contracts/AssetVault.algo.ts:368
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 13 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert
	retsub

// assertIsBootstrapped(): void
assertIsBootstrapped:
	proto 0 0

	// contracts/AssetVault.algo.ts:372
	// assert(this.token.value !== AssetID.zeroIndex, 'pool not bootstrapped')
	bytec 7 //  "token"
	app_global_get
	intc 0 // 0
	!=

	// pool not bootstrapped
	assert
	retsub

// assertNoWeightTransition(): void
assertNoWeightTransition:
	proto 0 0

	// contracts/AssetVault.algo.ts:376
	// assert(this.startRound.value === 0 && this.startRound.value === this.endRound.value)
	bytec 8 //  "start_round"
	app_global_get
	intc 0 // 0
	==
	dup
	bz *skip_and1
	bytec 8 //  "start_round"
	app_global_get
	bytec 5 //  "end_round"
	app_global_get
	==
	&&

*skip_and1:
	assert
	retsub

// lnWithSign(x: uint64): uint64[]
//
// Approximates the natural logarithm of a fixed-point value `x` with sign support.
//
// Uses a rational approximation of ln(x) via the Mercator series, centered around 1.
// If `x < SCALE`, the logarithm of the inverse is computed and a `negative` flag is returned.
// This is used to handle values less than 1 while keeping precision stable.
//
// @param x - Input value in fixed-point representation (scaled by SCALE).
// @returns A tuple [negative: uint64, result: uint64] where:
// - negative = 1 if log(x) is negative
// - result = absolute value of log(x) scaled by SCALE
lnWithSign:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts/AssetVault.algo.ts:392
	// assert(x > 0, 'log undefined for x ≤ 0')
	frame_dig -1 // x: uint64
	intc 0 // 0
	>

	// log undefined for x ≤ 0
	assert

	// contracts/AssetVault.algo.ts:394
	// negative: uint64 = 0
	intc 0 // 0
	frame_bury 0 // negative: uint64

	// *if8_condition
	// contracts/AssetVault.algo.ts:397
	// x < SCALE
	frame_dig -1 // x: uint64
	intc 3 // 1000000
	<
	bz *if8_else

	// *if8_consequent
	// contracts/AssetVault.algo.ts:398
	// negative = 1
	intc 2 // 1
	frame_bury 0 // negative: uint64

	// contracts/AssetVault.algo.ts:399
	// invX = wideRatio([SCALE, SCALE], [x])
	intc 3 // 1000000
	dup
	mulw
	intc 0 // 0
	frame_dig -1 // x: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // invX: uint64

	// contracts/AssetVault.algo.ts:400
	// z = wideRatio([invX - SCALE, SCALE], [invX])
	frame_dig 2 // invX: uint64
	intc 3 // 1000000
	-
	intc 3 // 1000000
	mulw
	intc 0 // 0
	frame_dig 2 // invX: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // z: uint64
	b *if8_end

*if8_else:
	// contracts/AssetVault.algo.ts:402
	// z = wideRatio([x - SCALE, SCALE], [x])
	frame_dig -1 // x: uint64
	intc 3 // 1000000
	-
	intc 3 // 1000000
	mulw
	intc 0 // 0
	frame_dig -1 // x: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // z: uint64

*if8_end:
	// contracts/AssetVault.algo.ts:405
	// result = z
	frame_dig 1 // z: uint64
	frame_bury 3 // result: uint64

	// contracts/AssetVault.algo.ts:406
	// term = z
	frame_dig 1 // z: uint64
	frame_bury 4 // term: uint64

	// contracts/AssetVault.algo.ts:407
	// neg = false
	intc 0 // 0
	frame_bury 5 // neg: bool

	// contracts/AssetVault.algo.ts:409
	// increaseOpcodeBudget()
	itxn_begin
	intc 6 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 9 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 7 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts/AssetVault.algo.ts:411
	// for (let i = 2; i <= 10; i = i + 1)
	intc 8 // 2
	frame_bury 6 // i: uint64

*for_7:
	// contracts/AssetVault.algo.ts:411
	// i <= 10
	frame_dig 6 // i: uint64
	intc 5 // 10
	<=
	bz *for_7_end

	// contracts/AssetVault.algo.ts:412
	// term = wideRatio([term, z], [SCALE])
	frame_dig 4 // term: uint64
	frame_dig 1 // z: uint64
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // term: uint64

	// contracts/AssetVault.algo.ts:413
	// delta = wideRatio([term], [i])
	intc 0 // 0
	frame_dig 4 // term: uint64
	intc 0 // 0
	frame_dig 6 // i: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // delta: uint64

	// contracts/AssetVault.algo.ts:414
	// result = neg ? result - delta : result + delta
	frame_dig 5 // neg: bool
	bz *ternary0_false
	frame_dig 3 // result: uint64
	frame_dig 7 // delta: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig 3 // result: uint64
	frame_dig 7 // delta: uint64
	+

*ternary0_end:
	frame_bury 3 // result: uint64

	// contracts/AssetVault.algo.ts:415
	// neg = !neg
	frame_dig 5 // neg: bool
	!
	frame_bury 5 // neg: bool

*for_7_continue:
	// contracts/AssetVault.algo.ts:411
	// i = i + 1
	frame_dig 6 // i: uint64
	intc 2 // 1
	+
	frame_bury 6 // i: uint64
	b *for_7

*for_7_end:
	// contracts/AssetVault.algo.ts:418
	// return [negative, result];
	frame_dig 0 // negative: uint64
	itob
	frame_dig 3 // result: uint64
	itob
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// exp(x: uint64): uint64
//
// Approximates the exponential function e^x for a fixed-point input.
//
// Uses a truncated Taylor series expansion of e^x:
// e^x ≈ 1 + x + x^2/2! + x^3/3! + ... + x^n/n!
//
// @param x - Exponent in fixed-point representation (scaled by SCALE).
// @returns Approximated e^x value in fixed-point representation.
exp:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/AssetVault.algo.ts:431
	// result = SCALE
	intc 3 // 1000000
	frame_bury 0 // result: uint64

	// contracts/AssetVault.algo.ts:432
	// term = SCALE
	intc 3 // 1000000
	frame_bury 1 // term: uint64

	// contracts/AssetVault.algo.ts:434
	// for (let i = 1; i <= 10; i = i + 1)
	intc 2 // 1
	frame_bury 2 // i: uint64

*for_8:
	// contracts/AssetVault.algo.ts:434
	// i <= 10
	frame_dig 2 // i: uint64
	intc 5 // 10
	<=
	bz *for_8_end

	// contracts/AssetVault.algo.ts:435
	// term = wideRatio([term, x], [i * SCALE])
	frame_dig 1 // term: uint64
	frame_dig -1 // x: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // i: uint64
	intc 3 // 1000000
	*
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // term: uint64

	// contracts/AssetVault.algo.ts:436
	// result += term
	frame_dig 0 // result: uint64
	frame_dig 1 // term: uint64
	+
	frame_bury 0 // result: uint64

*for_8_continue:
	// contracts/AssetVault.algo.ts:434
	// i = i + 1
	frame_dig 2 // i: uint64
	intc 2 // 1
	+
	frame_bury 2 // i: uint64
	b *for_8

*for_8_end:
	// contracts/AssetVault.algo.ts:439
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// pow(x: uint64, y: uint64): uint64
//
// Approximates x rise to the power of y (i.e., x^y) in fixed-point arithmetic.
//
// Internally implemented using:
// x^y = exp(y * ln(x))
// Handles x < 1 via sign-aware logarithm and inversion logic.
//
// @param x - Base value in fixed-point representation.
// @param y - Exponent in fixed-point representation.
// @returns Approximated result of x^y in fixed-point.
pow:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// *if9_condition
	// contracts/AssetVault.algo.ts:454
	// x === 0
	frame_dig -1 // x: uint64
	intc 0 // 0
	==
	bz *if9_end

	// *if9_consequent
	// contracts/AssetVault.algo.ts:454
	// return 0;
	intc 0 // 0
	b *pow*return

*if9_end:
	// contracts/AssetVault.algo.ts:456
	// lnXResult = this.lnWithSign(x)
	frame_dig -1 // x: uint64
	callsub lnWithSign
	frame_bury 0 // lnXResult: uint64[]

	// contracts/AssetVault.algo.ts:457
	// negativeLn = lnXResult[0]
	frame_dig 0 // lnXResult: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 1 // negativeLn: uint64

	// contracts/AssetVault.algo.ts:458
	// lnX = lnXResult[1]
	frame_dig 0 // lnXResult: uint64[]
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_bury 2 // lnX: uint64

	// contracts/AssetVault.algo.ts:460
	// ylnX = wideRatio([y, lnX], [SCALE])
	frame_dig -2 // y: uint64
	frame_dig 2 // lnX: uint64
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // ylnX: uint64

	// contracts/AssetVault.algo.ts:462
	// expResult = this.exp(ylnX)
	frame_dig 3 // ylnX: uint64
	callsub exp
	frame_bury 4 // expResult: uint64

	// *if10_condition
	// contracts/AssetVault.algo.ts:464
	// negativeLn === 1
	frame_dig 1 // negativeLn: uint64
	intc 2 // 1
	==
	bz *if10_end

	// *if10_consequent
	// contracts/AssetVault.algo.ts:465
	// return wideRatio([SCALE, SCALE], [expResult]);
	intc 3 // 1000000
	dup
	mulw
	intc 0 // 0
	frame_dig 4 // expResult: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	b *pow*return

*if10_end:
	// contracts/AssetVault.algo.ts:468
	// return expResult;
	frame_dig 4 // expResult: uint64

*pow*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// calcOut(balanceIn: uint64, weightIn: uint64, balanceOut: uint64, weightOut: uint64, amountIn: uint64): uint64
//
// Calculates the output amount of a token swap using the constant mean formula
// with weight-based pricing and an optional fee.
//
// The formula used is derived from the Balancer-style AMM:
//
// amountOut = balanceOut * (1 - (balanceIn / (balanceIn + amountInWithFee))^(weightIn / weightOut))
//
// This ensures price sensitivity based on both token weights and pool balances.
// A swap fee is applied by reducing the effective input amount.
//
// @param balanceIn - Current balance of the input asset in the pool.
// @param weightIn - Weight of the input asset, scaled by SCALE.
// @param balanceOut - Current balance of the output asset in the pool.
// @param weightOut - Weight of the output asset, scaled by SCALE.
// @param amountIn - Amount of input asset sent by the user.
// @returns The amount of output asset the user will receive.
calcOut:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/AssetVault.algo.ts:498
	// amountInWithFee = wideRatio([amountIn, SCALE - fee], [SCALE])
	frame_dig -5 // amountIn: uint64
	pushint 999000
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // amountInWithFee: uint64

	// contracts/AssetVault.algo.ts:501
	// ratio = wideRatio([balanceIn, SCALE], [balanceIn + amountInWithFee])
	frame_dig -1 // balanceIn: uint64
	intc 3 // 1000000
	mulw
	intc 0 // 0
	frame_dig -1 // balanceIn: uint64
	frame_dig 0 // amountInWithFee: uint64
	+
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // ratio: uint64

	// contracts/AssetVault.algo.ts:503
	// power = wideRatio([weightIn, SCALE], [weightOut])
	frame_dig -2 // weightIn: uint64
	intc 3 // 1000000
	mulw
	intc 0 // 0
	frame_dig -4 // weightOut: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // power: uint64

	// contracts/AssetVault.algo.ts:506
	// ratioPow = this.pow(ratio, power)
	frame_dig 2 // power: uint64
	frame_dig 1 // ratio: uint64
	callsub pow
	frame_bury 3 // ratioPow: uint64

	// contracts/AssetVault.algo.ts:508
	// log(itob(balanceIn))
	frame_dig -1 // balanceIn: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:509
	// log(itob(amountInWithFee))
	frame_dig 0 // amountInWithFee: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:510
	// log(itob(ratio))
	frame_dig 1 // ratio: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:511
	// log(itob(power))
	frame_dig 2 // power: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:512
	// log(itob(ratioPow))
	frame_dig 3 // ratioPow: uint64
	itob
	log

	// contracts/AssetVault.algo.ts:513
	// log(itob(wideRatio([balanceOut, SCALE - ratioPow], [SCALE])))
	frame_dig -3 // balanceOut: uint64
	intc 3 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	itob
	log

	// contracts/AssetVault.algo.ts:515
	// return wideRatio([balanceOut, SCALE - ratioPow], [SCALE]);
	frame_dig -3 // balanceOut: uint64
	intc 3 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// computeNAssetsLiquidity(sender: Address): uint64
//
// Computes the amount of LP tokens to mint for a user based on the assets they provided,
// using the constant mean formula with weight sensitivity.
//
// This method calculates the geometric mean of each provided asset relative to the pool's balance,
// adjusted by its weight. The formula is:
//
// liquidity = totalLP * Π_i (provided_i / (balance_i - provided_i)) ^ weight_i
//
// It ensures proportional liquidity provisioning across all assets, weighted appropriately.
// The liquidity amount is scaled by the product of powered ratios and the total LP supply.
//
// During execution, this function also resets the sender's `provided` vector to zero,
// consuming the state used to compute the liquidity. This ensures the same input
// cannot be reused in future calculations.
//
// @param sender - The user address for which liquidity is being computed.
// @returns The amount of LP tokens to mint for the sender.
computeNAssetsLiquidity:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 10

	// contracts/AssetVault.algo.ts:538
	// totalAssets = this.assets.value.length
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	frame_bury 0 // totalAssets: uint64

	// contracts/AssetVault.algo.ts:539
	// assert(totalAssets >= 1, 'Please provide at least one asset')
	frame_dig 0 // totalAssets: uint64
	intc 2 // 1
	>=

	// Please provide at least one asset
	assert

	// contracts/AssetVault.algo.ts:541
	// ratio = SCALE
	intc 3 // 1000000
	frame_bury 1 // ratio: uint64

	// contracts/AssetVault.algo.ts:543
	// for (let i = 0; i < totalAssets - 1; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_9:
	// contracts/AssetVault.algo.ts:543
	// i < totalAssets - 1
	frame_dig 2 // i: uint64
	frame_dig 0 // totalAssets: uint64
	intc 2 // 1
	-
	<
	bz *for_9_end

	// contracts/AssetVault.algo.ts:544
	// increaseOpcodeBudget()
	itxn_begin
	intc 6 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 9 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 7 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*for_9_continue:
	// contracts/AssetVault.algo.ts:543
	// i += 1
	frame_dig 2 // i: uint64
	intc 2 // 1
	+
	frame_bury 2 // i: uint64
	b *for_9

*for_9_end:
	// contracts/AssetVault.algo.ts:547
	// for (let i = 0; i < totalAssets; i += 1)
	intc 0 // 0
	frame_bury 3 // i: uint64

*for_10:
	// contracts/AssetVault.algo.ts:547
	// i < totalAssets
	frame_dig 3 // i: uint64
	frame_dig 0 // totalAssets: uint64
	<
	bz *for_10_end

	// contracts/AssetVault.algo.ts:548
	// assetId = this.assets.value[i]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 4 // assetId: uint64

	// contracts/AssetVault.algo.ts:549
	// poolBalance = this.balances(assetId).value
	bytec 2 //  "balances_"
	frame_dig 4 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_bury 5 // poolBalance: uint64

	// contracts/AssetVault.algo.ts:550
	// providedAmount = this.provided(sender).value[i]
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 6 // providedAmount: uint64

	// contracts/AssetVault.algo.ts:551
	// weight = this.getCurrentWeight(i)
	frame_dig 3 // i: uint64
	callsub getCurrentWeight
	frame_bury 7 // weight: uint64

	// contracts/AssetVault.algo.ts:553
	// assert(poolBalance > 0, 'Pool balance must be > 0')
	frame_dig 5 // poolBalance: uint64
	intc 0 // 0
	>

	// Pool balance must be > 0
	assert

	// contracts/AssetVault.algo.ts:555
	// assetRatio = wideRatio([providedAmount, SCALE], [poolBalance - providedAmount])
	frame_dig 6 // providedAmount: uint64
	intc 3 // 1000000
	mulw
	intc 0 // 0
	frame_dig 5 // poolBalance: uint64
	frame_dig 6 // providedAmount: uint64
	-
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // assetRatio: uint64

	// contracts/AssetVault.algo.ts:556
	// powed = this.pow(assetRatio, weight)
	frame_dig 7 // weight: uint64
	frame_dig 8 // assetRatio: uint64
	callsub pow
	frame_bury 9 // powed: uint64

	// contracts/AssetVault.algo.ts:557
	// ratio = wideRatio([ratio, powed], [SCALE])
	frame_dig 1 // ratio: uint64
	frame_dig 9 // powed: uint64
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // ratio: uint64

	// contracts/AssetVault.algo.ts:559
	// this.provided(sender).value[i] = 0
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 12 // 0x0000000000000000
	replace3
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*for_10_continue:
	// contracts/AssetVault.algo.ts:547
	// i += 1
	frame_dig 3 // i: uint64
	intc 2 // 1
	+
	frame_bury 3 // i: uint64
	b *for_10

*for_10_end:
	// contracts/AssetVault.algo.ts:562
	// totalLP = this.totalLP()
	callsub totalLP
	frame_bury 10 // totalLP: uint64

	// contracts/AssetVault.algo.ts:563
	// return wideRatio([totalLP, ratio], [SCALE]);
	frame_dig 10 // totalLP: uint64
	frame_dig 1 // ratio: uint64
	mulw
	intc 0 // 0
	intc 3 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 10
	retsub

// totalLP(): uint64
//
// Returns the total circulating supply of LP tokens in the pool.
//
// Circulating LP supply is calculated as:
// totalIssued - reserveBalance - burned
//
// - `totalIssued`: the total supply originally created by the pool.
// - `reserveBalance`: LP tokens still held in the reserve (i.e., the pool itself).
// - `burned`: total LP tokens permanently removed via `burnLiquidity()`.
//
// This value is used in proportional calculations such as minting or burning LP tokens.
//
// @returns The current total circulating LP token supply.
totalLP:
	proto 0 1

	// contracts/AssetVault.algo.ts:581
	// return this.token.value.total - this.token.value.reserve.assetBalance(this.token.value) - this.burned.value;
	bytec 7 //  "token"
	app_global_get
	asset_params_get AssetTotal
	pop
	bytec 7 //  "token"
	app_global_get
	asset_params_get AssetReserve
	pop
	bytec 7 //  "token"
	app_global_get
	asset_holding_get AssetBalance
	pop
	-
	bytec 11 //  "burned"
	app_global_get
	-
	retsub

// absDiff(a: uint64, b: uint64): uint64
//
// Returns the absolute difference between two unsigned integers.
// @param a - First value.
// @param b - Second value.
// @returns The absolute difference between `a` and `b`.
absDiff:
	proto 2 1

	// contracts/AssetVault.algo.ts:591
	// return a > b ? a - b : b - a;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	>
	bz *ternary1_false
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	-
	b *ternary1_end

*ternary1_false:
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	-

*ternary1_end:
	retsub

// getTotalAssets()uint64
*abi_route_getTotalAssets:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// execute getTotalAssets()uint64
	callsub getTotalAssets
	itob
	concat
	log
	intc 2 // 1
	return

// getTotalAssets(): uint64
getTotalAssets:
	proto 0 1

	// contracts/AssetVault.algo.ts:596
	// return this.assets.value.length;
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	len
	intc 1 // 8
	/
	retsub

// getToken()uint64
*abi_route_getToken:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// execute getToken()uint64
	callsub getToken
	itob
	concat
	log
	intc 2 // 1
	return

// getToken(): AssetID
getToken:
	proto 0 1

	// contracts/AssetVault.algo.ts:601
	// return this.token.value;
	bytec 7 //  "token"
	app_global_get
	retsub

// getBalance(uint64)uint64
*abi_route_getBalance:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute getBalance(uint64)uint64
	callsub getBalance
	itob
	concat
	log
	intc 2 // 1
	return

// getBalance(index: uint64): uint64
getBalance:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/AssetVault.algo.ts:606
	// asset = this.assets.value[index]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // asset: uint64

	// contracts/AssetVault.algo.ts:607
	// return this.balances(asset).value;
	bytec 2 //  "balances_"
	frame_dig 0 // asset: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(asset).value
	assert
	btoi

	// set the subroutine return value
	frame_bury 0
	retsub

// estimateSwap(uint64,uint64,uint64)uint64
*abi_route_estimateSwap:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// to: uint64
	txna ApplicationArgs 2
	btoi

	// from: uint64
	txna ApplicationArgs 1
	btoi

	// execute estimateSwap(uint64,uint64,uint64)uint64
	callsub estimateSwap
	itob
	concat
	log
	intc 2 // 1
	return

// estimateSwap(from: uint64, to: uint64, amount: uint64): uint64
estimateSwap:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/AssetVault.algo.ts:612
	// assetIn = this.assets.value[from]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // from: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetIn: uint64

	// contracts/AssetVault.algo.ts:613
	// assetOut = this.assets.value[to]
	bytec 1 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // to: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 1 // assetOut: uint64

	// contracts/AssetVault.algo.ts:615
	// balanceIn = this.balances(assetIn).value
	bytec 2 //  "balances_"
	frame_dig 0 // assetIn: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetIn).value
	assert
	btoi
	frame_bury 2 // balanceIn: uint64

	// contracts/AssetVault.algo.ts:616
	// balanceOut = this.balances(assetOut).value
	bytec 2 //  "balances_"
	frame_dig 1 // assetOut: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetOut).value
	assert
	btoi
	frame_bury 3 // balanceOut: uint64

	// contracts/AssetVault.algo.ts:618
	// weightIn = this.getCurrentWeight(from)
	frame_dig -1 // from: uint64
	callsub getCurrentWeight
	frame_bury 4 // weightIn: uint64

	// contracts/AssetVault.algo.ts:619
	// weightOut = this.getCurrentWeight(to)
	frame_dig -2 // to: uint64
	callsub getCurrentWeight
	frame_bury 5 // weightOut: uint64

	// contracts/AssetVault.algo.ts:621
	// return this.calcOut(balanceIn, weightIn, balanceOut, weightOut, amount);
	frame_dig -3 // amount: uint64
	frame_dig 5 // weightOut: uint64
	frame_dig 3 // balanceOut: uint64
	frame_dig 4 // weightIn: uint64
	frame_dig 2 // balanceIn: uint64
	callsub calcOut

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// getCurrentWeight(uint64)uint64
*abi_route_getCurrentWeight:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCurrentWeight(uint64)uint64
	callsub getCurrentWeight
	itob
	concat
	log
	intc 2 // 1
	return

// getCurrentWeight(index: uint64): uint64
getCurrentWeight:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 8

	// contracts/AssetVault.algo.ts:626
	// current = globals.round
	global Round
	frame_bury 0 // current: uint64

	// contracts/AssetVault.algo.ts:627
	// start = this.startRound.value
	bytec 8 //  "start_round"
	app_global_get
	frame_bury 1 // start: uint64

	// contracts/AssetVault.algo.ts:628
	// end = this.endRound.value
	bytec 5 //  "end_round"
	app_global_get
	frame_bury 2 // end: uint64

	// *if11_condition
	// contracts/AssetVault.algo.ts:630
	// current <= start || start === 0 || end === 0
	frame_dig 0 // current: uint64
	frame_dig 1 // start: uint64
	<=
	dup
	bnz *skip_or0
	frame_dig 1 // start: uint64
	intc 0 // 0
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig 2 // end: uint64
	intc 0 // 0
	==
	||

*skip_or1:
	bz *if11_end

	// *if11_consequent
	// contracts/AssetVault.algo.ts:631
	// return this.weights(index).value;
	bytec 6 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(index).value
	assert
	btoi
	b *getCurrentWeight*return

*if11_end:
	// *if12_condition
	// contracts/AssetVault.algo.ts:634
	// current >= end
	frame_dig 0 // current: uint64
	frame_dig 2 // end: uint64
	>=
	bz *if12_end

	// *if12_consequent
	// contracts/AssetVault.algo.ts:635
	// return this.targetWeights(index).value;
	bytec 10 //  "target_weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.targetWeights(index).value
	assert
	btoi
	b *getCurrentWeight*return

*if12_end:
	// contracts/AssetVault.algo.ts:638
	// elapsed = current - start
	frame_dig 0 // current: uint64
	frame_dig 1 // start: uint64
	-
	frame_bury 3 // elapsed: uint64

	// contracts/AssetVault.algo.ts:639
	// total = end - start
	frame_dig 2 // end: uint64
	frame_dig 1 // start: uint64
	-
	frame_bury 4 // total: uint64

	// contracts/AssetVault.algo.ts:641
	// w0 = this.weights(index).value
	bytec 6 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(index).value
	assert
	btoi
	frame_bury 5 // w0: uint64

	// contracts/AssetVault.algo.ts:642
	// w1 = this.targetWeights(index).value
	bytec 10 //  "target_weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.targetWeights(index).value
	assert
	btoi
	frame_bury 6 // w1: uint64

	// contracts/AssetVault.algo.ts:644
	// delta = w1 > w0 ? w1 - w0 : w0 - w1
	frame_dig 6 // w1: uint64
	frame_dig 5 // w0: uint64
	>
	bz *ternary2_false
	frame_dig 6 // w1: uint64
	frame_dig 5 // w0: uint64
	-
	b *ternary2_end

*ternary2_false:
	frame_dig 5 // w0: uint64
	frame_dig 6 // w1: uint64
	-

*ternary2_end:
	frame_bury 7 // delta: uint64

	// contracts/AssetVault.algo.ts:645
	// offset = wideRatio([delta, elapsed], [total])
	frame_dig 7 // delta: uint64
	frame_dig 3 // elapsed: uint64
	mulw
	intc 0 // 0
	frame_dig 4 // total: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // offset: uint64

	// contracts/AssetVault.algo.ts:647
	// return w1 > w0 ? w0 + offset : w0 - offset;
	frame_dig 6 // w1: uint64
	frame_dig 5 // w0: uint64
	>
	bz *ternary3_false
	frame_dig 5 // w0: uint64
	frame_dig 8 // offset: uint64
	+
	b *ternary3_end

*ternary3_false:
	frame_dig 5 // w0: uint64
	frame_dig 8 // offset: uint64
	-

*ternary3_end:

*getCurrentWeight*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// getTimes()uint64[]
*abi_route_getTimes:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// execute getTimes()uint64[]
	callsub getTimes
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 2 // 1
	return

// getTimes(): uint64[]
getTimes:
	proto 0 1

	// contracts/AssetVault.algo.ts:652
	// return [this.startRound.value, this.endRound.value, globals.round];
	bytec 8 //  "start_round"
	app_global_get
	itob
	bytec 5 //  "end_round"
	app_global_get
	itob
	concat
	global Round
	itob
	concat
	retsub

// opUp()void
*abi_route_opUp:
	// execute opUp()void
	callsub opUp
	intc 2 // 1
	return

// opUp(): void
opUp:
	proto 0 0
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	pushbytes 0xafbb1f60 // method "addLiquidity(uint64,axfer)void"
	pushbytes 0xb2636155 // method "getLiquidity()uint64"
	pushbytes 0xc5db9b2d // method "burnLiquidity(axfer)void"
	pushbytes 0xee9e60fd // method "swap(uint64,uint64,axfer)uint64"
	pushbytes 0xf47ba5ea // method "changeWeights(uint64,uint64[])uint64"
	pushbytes 0xa4f48434 // method "addAsset(uint64,uint64)uint64"
	pushbytes 0x7194259e // method "getTotalAssets()uint64"
	pushbytes 0x20eb5394 // method "getToken()uint64"
	pushbytes 0x41310aee // method "getBalance(uint64)uint64"
	pushbytes 0x29200583 // method "estimateSwap(uint64,uint64,uint64)uint64"
	pushbytes 0x287889e2 // method "getCurrentWeight(uint64)uint64"
	pushbytes 0x89915be2 // method "getTimes()uint64[]"
	pushbytes 0x854dede0 // method "opUp()void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_addLiquidity *abi_route_getLiquidity *abi_route_burnLiquidity *abi_route_swap *abi_route_changeWeights *abi_route_addAsset *abi_route_getTotalAssets *abi_route_getToken *abi_route_getBalance *abi_route_estimateSwap *abi_route_getCurrentWeight *abi_route_getTimes *abi_route_opUp

	// this contract does not implement the given ABI method for call NoOp
	err

*intToAscii:
	proto 1 1
	pushbytes 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	intc 2 // 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	intc 0 // 0
	==
	bz *itoa_if_end
	pushbytes 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	intc 5 // 10
	/
	intc 0 // 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	intc 5 // 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	bytec 0 //  ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	intc 5 // 10
	%
	callsub *intToAscii
	concat
	retsub