{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLiquidity(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnLiquidity(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(address,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeWeights(uint64,uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTotalAssets()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBalance(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "estimateSwap(uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCurrentWeight(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTimes()uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "token": {
          "type": "uint64",
          "key": "token"
        },
        "burned": {
          "type": "uint64",
          "key": "burned"
        },
        "assets": {
          "type": "bytes",
          "key": "assets"
        },
        "startRound": {
          "type": "uint64",
          "key": "start_round"
        },
        "endRound": {
          "type": "uint64",
          "key": "end_round"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AssetVault",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initializes global state variables when the application is first created.\n\n\nThis method is automatically invoked during the application's creation call ( with bare create).\nIt sets the initial manager to the app creator.\n\n\nThis function should only be called once at contract deployment.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Bootstrap the pool by assigning assets and weights, create the LP tokens.",
        "args": [
          {
            "name": "assetIds",
            "type": "uint64[]",
            "desc": "assets of the pool"
          },
          {
            "name": "weights",
            "type": "uint64[]",
            "desc": "weights of the pool\n uint64 - LP Token created ID"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "Provide one token liquidity to the pool",
        "args": [
          {
            "name": "index",
            "type": "uint64",
            "desc": "index of the token in the pool"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "amount of token sent"
          },
          {
            "name": "sender",
            "type": "address",
            "desc": "the sender"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLiquidity",
        "desc": "Mints LP tokens to the given sender based on the liquidity they provided.\n\n\nIf this is the first liquidity provision (i.e., total LP supply is 0),\na fixed initial amount is minted to the sender. Otherwise, the amount\nis calculated proportionally using .\n\n\nAfter minting, the sender's \"provided\" state is reset.",
        "args": [
          {
            "name": "sender",
            "type": "address",
            "desc": "The address receiving the LP tokens"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The amount of LP tokens minted"
        }
      },
      {
        "name": "burnLiquidity",
        "desc": "Burns a given amount of LP tokens from the sender and returns\ntheir proportional share of each asset in the pool.\n\n\nThe withdrawn amount for each asset is calculated based on the\nratio of  to the total LP supply.",
        "args": [
          {
            "name": "sender",
            "type": "address",
            "desc": "The address burning LP tokens"
          },
          {
            "name": "amountLP",
            "type": "uint64",
            "desc": "The amount of LP tokens to burn"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "desc": "Executes a weighted swap between two tokens in the pool based on the constant mean formula.\n\n\nThe input token () is sent into the pool, and the output token () is sent back\nto the sender, following the AMM's pricing curve determined by current balances and weights.\n\n\nThis function performs the following steps:\n- Retrieves the current weights and balances for the two assets.\n- Calculates the output amount using the invariant pricing function ().\n- Updates the pool's internal balances accordingly.\n- Transfers the output asset to the sender.",
        "args": [
          {
            "name": "sender",
            "type": "address",
            "desc": "The address initiating the swap."
          },
          {
            "name": "from",
            "type": "uint64",
            "desc": "Index of the input asset in the pool."
          },
          {
            "name": "to",
            "type": "uint64",
            "desc": "Index of the output asset in the pool."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of input asset to swap."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The amount of output asset received."
        }
      },
      {
        "name": "changeWeights",
        "desc": "Updates the pool's asset weights, either immediately or with a time-based linear interpolation.\n\n\nIf  is zero, the new weights are applied immediately by overwriting the current weights.\nOtherwise, a linear transition is initiated from the current weights to  over the specified\nduration (measured in seconds or microseconds (?)).\n\n\nDuring the transition period, weights are dynamically computed based on the elapsed time\nbetween  and , and stored in . The current weights must be\nretrieved using a function like  for accurate interpolated values.",
        "args": [
          {
            "name": "duration",
            "type": "uint64",
            "desc": "Duration of the interpolation (in blocks). If 0, the weights are updated instantly."
          },
          {
            "name": "newWeights",
            "type": "uint64[]",
            "desc": "Array of new target weights for each asset in the pool."
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getTotalAssets",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getToken",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getBalance",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "estimateSwap",
        "readonly": true,
        "args": [
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getCurrentWeight",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getTimes",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64[]"
        }
      }
    ]
  }
}