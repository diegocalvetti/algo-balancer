#pragma version 10
intcblock 0 8 1000000 1 10 6 4 16 32
bytecblock 0x 0x746f6b656e 0x70726f76696465645f 0x6d696e726174696f5f 0x62616c616e6365735f 0x776569676874735f 0x0000000000000000 0x617373657473 0x6d616e61676572

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 5 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 3 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:24
	// this.manager.value = this.app.creator
	bytec 8 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// bootstrap(uint64[],uint64[])uint64
*abi_route_bootstrap:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bootstrap(uint64[],uint64[])uint64
	callsub bootstrap
	itob
	concat
	log
	intc 3 // 1
	return

// bootstrap(assetIds: AssetID[], weights: uint64[]): AssetID
bootstrap:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:28
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/BalancedPoolV2.algo.ts:29
	// total = 0
	intc 0 // 0
	frame_bury 0 // total: uint64

	// contracts/BalancedPoolV2.algo.ts:31
	// for (let i = 0; i < assetIds.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/BalancedPoolV2.algo.ts:31
	// i < assetIds.length
	frame_dig 1 // i: uint64
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	<
	bz *for_0_end

	// contracts/BalancedPoolV2.algo.ts:32
	// this.addToken(i, assetIds[i], weights[i])
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig 1 // i: uint64
	callsub addToken

	// contracts/BalancedPoolV2.algo.ts:33
	// total += weights[i]
	frame_dig 0 // total: uint64
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	+
	frame_bury 0 // total: uint64

*for_0_continue:
	// contracts/BalancedPoolV2.algo.ts:31
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/BalancedPoolV2.algo.ts:36
	// this.assets.value = assetIds
	bytec 7 //  "assets"
	frame_dig -1 // assetIds: AssetID[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/BalancedPoolV2.algo.ts:38
	// assert(total === SCALE, 'Weights must sum to 1')
	frame_dig 0 // total: uint64
	intc 2 // 1000000
	==

	// Weights must sum to 1
	assert

	// contracts/BalancedPoolV2.algo.ts:39
	// this.createToken()
	callsub createToken

	// contracts/BalancedPoolV2.algo.ts:41
	// return this.token.value;
	bytec 1 //  "token"
	app_global_get

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(uint64,uint64,address)void
*abi_route_addLiquidity:
	// sender: address
	txna ApplicationArgs 3
	dup
	len
	intc 8 // 32
	==

	// argument 0 (sender) for addLiquidity must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,address)void
	callsub addLiquidity
	intc 3 // 1
	return

// addLiquidity(index: uint64, amount: uint64, sender: Address): void
//
// Provide Liquidity to the pool
addLiquidity:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:48
	// assert(this.token.value !== AssetID.zeroIndex, 'pool not bootstrapped')
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	!=

	// pool not bootstrapped
	assert

	// contracts/BalancedPoolV2.algo.ts:49
	// assetId = this.assets.value[index]
	bytec 7 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetId: uint64

	// contracts/BalancedPoolV2.algo.ts:50
	// log('Asset ID => ' + itob(assetId))
	pushbytes 0x4173736574204944203d3e20 // "Asset ID => "
	frame_dig 0 // assetId: uint64
	itob
	concat
	log

	// contracts/BalancedPoolV2.algo.ts:52
	// this.optIn(assetId)
	frame_dig 0 // assetId: uint64
	callsub optIn

	// contracts/BalancedPoolV2.algo.ts:53
	// this.balances(assetId).value += amount
	bytec 4 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_dig -2 // amount: uint64
	+
	bytec 4 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	swap
	itob
	box_put

	// *if0_condition
	// contracts/BalancedPoolV2.algo.ts:55
	// !this.provided(sender).exists
	bytec 2 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/BalancedPoolV2.algo.ts:56
	// this.provided(sender).create(64)
	bytec 2 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	pushint 64
	box_create
	pop

*if0_end:
	// contracts/BalancedPoolV2.algo.ts:59
	// this.provided(sender).value[index] += amount
	bytec 2 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 2 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig -2 // amount: uint64
	+
	itob
	replace3
	bytec 2 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/BalancedPoolV2.algo.ts:61
	// newMinRatio = this.computeLP(sender, index)
	frame_dig -1 // index: uint64
	frame_dig -3 // sender: Address
	callsub computeLP
	frame_bury 1 // newMinRatio: uint64

	// *if1_condition
	// contracts/BalancedPoolV2.algo.ts:63
	// !this.minRatios(sender).exists
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if1_elseif1_condition

	// *if1_consequent
	// contracts/BalancedPoolV2.algo.ts:64
	// this.minRatios(sender).create(8)
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	intc 1 // 8
	box_create
	pop

	// contracts/BalancedPoolV2.algo.ts:65
	// this.minRatios(sender).value = newMinRatio
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put
	b *if1_end

*if1_elseif1_condition:
	// contracts/BalancedPoolV2.algo.ts:67
	// this.minRatios(sender).value == 0
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	intc 0 // 0
	==
	bz *if1_else

	// *if1_elseif1_consequent
	// contracts/BalancedPoolV2.algo.ts:68
	// this.minRatios(sender).value = newMinRatio
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put
	b *if1_end

*if1_else:
	// contracts/BalancedPoolV2.algo.ts:70
	// currentMin = this.minRatios(sender).value
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	frame_bury 2 // currentMin: uint64

	// *if2_condition
	// contracts/BalancedPoolV2.algo.ts:72
	// newMinRatio < currentMin
	frame_dig 1 // newMinRatio: uint64
	frame_dig 2 // currentMin: uint64
	<
	bz *if2_end

	// *if2_consequent
	// contracts/BalancedPoolV2.algo.ts:73
	// this.minRatios(sender).value = newMinRatio
	bytec 3 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put

*if2_end:

*if1_end:
	retsub

// computeLiquidity(address)void
*abi_route_computeLiquidity:
	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 8 // 32
	==

	// argument 0 (sender) for computeLiquidity must be a address
	assert

	// execute computeLiquidity(address)void
	callsub computeLiquidity
	intc 3 // 1
	return

// computeLiquidity(sender: Address): void
computeLiquidity:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:79
	// minRatio = this.minRatios(sender).value
	bytec 3 //  "minratio_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	frame_bury 0 // minRatio: uint64

	// contracts/BalancedPoolV2.algo.ts:81
	// assert(minRatio > 0, 'computed ratio is zero')
	frame_dig 0 // minRatio: uint64
	intc 0 // 0
	>

	// computed ratio is zero
	assert

	// contracts/BalancedPoolV2.algo.ts:83
	// amount = AMOUNT_LP_DEPLOYER
	pushint 1_000_000
	intc 4 // 10
	intc 5 // 6
	exp
	*
	frame_bury 1 // amount: uint64

	// *if3_condition
	// contracts/BalancedPoolV2.algo.ts:84
	// this.token.value.reserve.assetBalance(this.token.value) !== TOTAL_LP_SUPPLY
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetReserve
	pop
	bytec 1 //  "token"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 4 // 10
	intc 7 // 16
	exp
	!=
	bz *if3_end

	// *if3_consequent
	// contracts/BalancedPoolV2.algo.ts:85
	// issued = this.token.value.total - this.token.value.reserve.assetBalance(this.token.value)
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetTotal
	pop
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetReserve
	pop
	bytec 1 //  "token"
	app_global_get
	asset_holding_get AssetBalance
	pop
	-
	frame_bury 2 // issued: uint64

	// contracts/BalancedPoolV2.algo.ts:86
	// amount = wideRatio([issued, minRatio], [SCALE])
	frame_dig 2 // issued: uint64
	frame_dig 0 // minRatio: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // amount: uint64

*if3_end:
	// contracts/BalancedPoolV2.algo.ts:89
	// assert(amount > 0, 'computed LP amount is zero')
	frame_dig 1 // amount: uint64
	intc 0 // 0
	>

	// computed LP amount is zero
	assert

	// contracts/BalancedPoolV2.algo.ts:91
	// this.minRatios(sender).value = 0
	bytec 3 //  "minratio_"
	frame_dig -1 // sender: Address
	concat
	bytec 6 // 0x0000000000000000
	box_put

	// contracts/BalancedPoolV2.algo.ts:93
	// for (let i = 0; i < this.provided(sender).value.length; i += 1)
	intc 0 // 0
	frame_bury 3 // i: uint64

*for_1:
	// contracts/BalancedPoolV2.algo.ts:93
	// i < this.provided(sender).value.length
	frame_dig 3 // i: uint64
	bytec 2 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	len
	intc 1 // 8
	/
	<
	bz *for_1_end

	// contracts/BalancedPoolV2.algo.ts:94
	// this.provided(sender).value[i] = 0
	bytec 2 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 6 // 0x0000000000000000
	replace3
	bytec 2 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*for_1_continue:
	// contracts/BalancedPoolV2.algo.ts:93
	// i += 1
	frame_dig 3 // i: uint64
	intc 3 // 1
	+
	frame_bury 3 // i: uint64
	b *for_1

*for_1_end:
	// contracts/BalancedPoolV2.algo.ts:97
	// sendAssetTransfer({
	//       assetReceiver: sender,
	//       assetAmount: amount,
	//       xferAsset: this.token.value,
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:98
	// assetReceiver: sender
	frame_dig -1 // sender: Address
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:99
	// assetAmount: amount
	frame_dig 1 // amount: uint64
	itxn_field AssetAmount

	// contracts/BalancedPoolV2.algo.ts:100
	// xferAsset: this.token.value
	bytec 1 //  "token"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optIn(uint64)void
*abi_route_optIn:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIn(uint64)void
	callsub optIn
	intc 3 // 1
	return

// optIn(assetId: AssetID): void
optIn:
	proto 1 0

	// *if4_condition
	// contracts/BalancedPoolV2.algo.ts:105
	// this.app.address.isOptedInToAsset(assetId)
	global CurrentApplicationAddress
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	bz *if4_end

	// *if4_consequent
	// contracts/BalancedPoolV2.algo.ts:106
	// return;
	retsub

*if4_end:
	// contracts/BalancedPoolV2.algo.ts:109
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: assetId,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:110
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:111
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts/BalancedPoolV2.algo.ts:112
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToken(index: uint64, assetID: AssetID, weight: uint64): void
addToken:
	proto 3 0

	// *if5_condition
	// contracts/BalancedPoolV2.algo.ts:117
	// !this.weights(index).exists
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if5_end

	// *if5_consequent
	// contracts/BalancedPoolV2.algo.ts:118
	// this.weights(index).create(8)
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if5_end:
	// *if6_condition
	// contracts/BalancedPoolV2.algo.ts:121
	// !this.balances(assetID).exists
	bytec 4 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// contracts/BalancedPoolV2.algo.ts:122
	// this.balances(assetID).create(8)
	bytec 4 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if6_end:
	// contracts/BalancedPoolV2.algo.ts:125
	// this.weights(index).value = weight
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	frame_dig -3 // weight: uint64
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:126
	// this.balances(assetID).value = 0
	bytec 4 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	bytec 6 // 0x0000000000000000
	box_put
	retsub

// createToken(): void
createToken:
	proto 0 0

	// *if7_condition
	// contracts/BalancedPoolV2.algo.ts:130
	// this.token.value === AssetID.zeroIndex
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	==
	bz *if7_end

	// *if7_consequent
	// contracts/BalancedPoolV2.algo.ts:131
	// this.token.value = sendAssetCreation({
	//         configAssetTotal: TOTAL_LP_SUPPLY,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'BalancedPool-' + this.app.id.toString(),
	//         configAssetUnitName: 'LP',
	//       })
	bytec 1 //  "token"
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:132
	// configAssetTotal: TOTAL_LP_SUPPLY
	intc 4 // 10
	intc 7 // 16
	exp
	itxn_field ConfigAssetTotal

	// contracts/BalancedPoolV2.algo.ts:133
	// configAssetDecimals: 6
	intc 5 // 6
	itxn_field ConfigAssetDecimals

	// contracts/BalancedPoolV2.algo.ts:134
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/BalancedPoolV2.algo.ts:135
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/BalancedPoolV2.algo.ts:136
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts/BalancedPoolV2.algo.ts:137
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts/BalancedPoolV2.algo.ts:138
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/BalancedPoolV2.algo.ts:139
	// configAssetName: 'BalancedPool-' + this.app.id.toString()
	pushbytes 0x42616c616e636564506f6f6c2d // "BalancedPool-"
	txna Applications 0
	callsub *itoa
	concat
	itxn_field ConfigAssetName

	// contracts/BalancedPoolV2.algo.ts:140
	// configAssetUnitName: 'LP'
	pushbytes 0x4c50 // "LP"
	itxn_field ConfigAssetUnitName

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if7_end:
	retsub

// assertIsManager(): void
assertIsManager:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:146
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 8 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert
	retsub

// ln(x: uint64): uint64
//
// Approximate ln(x) using the Mercator series expansion
ln:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/BalancedPoolV2.algo.ts:153
	// assert(x > 0, 'log undefined for x ≤ 0')
	frame_dig -1 // x: uint64
	intc 0 // 0
	>

	// log undefined for x ≤ 0
	assert

	// contracts/BalancedPoolV2.algo.ts:156
	// z = ((x - SCALE) * SCALE) / x
	frame_dig -1 // x: uint64
	intc 2 // 1000000
	-
	intc 2 // 1000000
	*
	frame_dig -1 // x: uint64
	/
	frame_bury 0 // z: uint64

	// contracts/BalancedPoolV2.algo.ts:157
	// result = z
	frame_dig 0 // z: uint64
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:158
	// term = z
	frame_dig 0 // z: uint64
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:159
	// neg = false
	intc 0 // 0
	frame_bury 3 // neg: bool

	// contracts/BalancedPoolV2.algo.ts:161
	// for (let i = 2; i <= 10; i = i + 1)
	pushint 2
	frame_bury 4 // i: uint64

*for_2:
	// contracts/BalancedPoolV2.algo.ts:161
	// i <= 10
	frame_dig 4 // i: uint64
	intc 4 // 10
	<=
	bz *for_2_end

	// contracts/BalancedPoolV2.algo.ts:162
	// term = (term * z) / SCALE
	frame_dig 2 // term: uint64
	frame_dig 0 // z: uint64
	*
	intc 2 // 1000000
	/
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:163
	// delta = term / i
	frame_dig 2 // term: uint64
	frame_dig 4 // i: uint64
	/
	frame_bury 5 // delta: uint64

	// contracts/BalancedPoolV2.algo.ts:164
	// result = neg ? result - delta : result + delta
	frame_dig 3 // neg: bool
	bz *ternary0_false
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	+

*ternary0_end:
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:165
	// neg = !neg
	frame_dig 3 // neg: bool
	!
	frame_bury 3 // neg: bool

*for_2_continue:
	// contracts/BalancedPoolV2.algo.ts:161
	// i = i + 1
	frame_dig 4 // i: uint64
	intc 3 // 1
	+
	frame_bury 4 // i: uint64
	b *for_2

*for_2_end:
	// contracts/BalancedPoolV2.algo.ts:168
	// return result;
	frame_dig 1 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// exp(x: uint64): uint64
//
// Approximate e^x using the Taylor series expansion
exp:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:175
	// result = SCALE
	intc 2 // 1000000
	frame_bury 0 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:176
	// term = SCALE
	intc 2 // 1000000
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:178
	// for (let i = 1; i <= 10; i = i + 1)
	intc 3 // 1
	frame_bury 2 // i: uint64

*for_3:
	// contracts/BalancedPoolV2.algo.ts:178
	// i <= 10
	frame_dig 2 // i: uint64
	intc 4 // 10
	<=
	bz *for_3_end

	// contracts/BalancedPoolV2.algo.ts:179
	// term = (term * x) / (i * SCALE)
	frame_dig 1 // term: uint64
	frame_dig -1 // x: uint64
	*
	frame_dig 2 // i: uint64
	intc 2 // 1000000
	*
	/
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:180
	// result += term
	frame_dig 0 // result: uint64
	frame_dig 1 // term: uint64
	+
	frame_bury 0 // result: uint64

*for_3_continue:
	// contracts/BalancedPoolV2.algo.ts:178
	// i = i + 1
	frame_dig 2 // i: uint64
	intc 3 // 1
	+
	frame_bury 2 // i: uint64
	b *for_3

*for_3_end:
	// contracts/BalancedPoolV2.algo.ts:183
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// pow(x: uint64, y: uint64): uint64
//
// Approximate x^y by computing e^(y ln x)
pow:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:190
	// lnX = this.ln(x)
	frame_dig -1 // x: uint64
	callsub ln
	frame_bury 0 // lnX: uint64

	// contracts/BalancedPoolV2.algo.ts:191
	// ylnX = (y * lnX) / SCALE
	frame_dig -2 // y: uint64
	frame_dig 0 // lnX: uint64
	*
	intc 2 // 1000000
	/
	frame_bury 1 // ylnX: uint64

	// contracts/BalancedPoolV2.algo.ts:192
	// return this.exp(ylnX);
	frame_dig 1 // ylnX: uint64
	callsub exp

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// computeLP(sender: Address, index: uint64): uint64
computeLP:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/BalancedPoolV2.algo.ts:196
	// assetId = this.assets.value[index]
	bytec 7 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetId: uint64

	// contracts/BalancedPoolV2.algo.ts:197
	// weight = this.weights(index).value
	bytec 5 //  "weights_"
	frame_dig -2 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(index).value
	assert
	btoi
	frame_bury 1 // weight: uint64

	// contracts/BalancedPoolV2.algo.ts:198
	// poolBalance = this.balances(assetId).value
	bytec 4 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_bury 2 // poolBalance: uint64

	// contracts/BalancedPoolV2.algo.ts:199
	// providedAmount = this.provided(sender).value[index]
	bytec 2 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 3 // providedAmount: uint64

	// *if8_condition
	// contracts/BalancedPoolV2.algo.ts:201
	// providedAmount <= 0
	frame_dig 3 // providedAmount: uint64
	intc 0 // 0
	<=
	bz *if8_end

	// *if8_consequent
	// contracts/BalancedPoolV2.algo.ts:202
	// return 0;
	intc 0 // 0
	b *computeLP*return

*if8_end:
	// contracts/BalancedPoolV2.algo.ts:205
	// ratio = wideRatio([providedAmount, SCALE], [poolBalance])
	frame_dig 3 // providedAmount: uint64
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig 2 // poolBalance: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:206
	// return wideRatio([ratio, weight], [SCALE]);
	frame_dig 4 // ratio: uint64
	frame_dig 1 // weight: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

*computeLP*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// calcOut(balanceIn: uint64, weightIn: uint64, balanceOut: uint64, weightOut: uint64, amountIn: uint64): uint64
calcOut:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:218
	// amountInWithFee = (amountIn * (SCALE - fee)) / SCALE
	frame_dig -5 // amountIn: uint64
	pushint 999000
	*
	intc 2 // 1000000
	/
	frame_bury 0 // amountInWithFee: uint64

	// contracts/BalancedPoolV2.algo.ts:221
	// ratio = balanceIn / (balanceIn + amountInWithFee)
	frame_dig -1 // balanceIn: uint64
	frame_dig -1 // balanceIn: uint64
	frame_dig 0 // amountInWithFee: uint64
	+
	/
	frame_bury 1 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:223
	// power = (weightIn * SCALE) / weightOut
	frame_dig -2 // weightIn: uint64
	intc 2 // 1000000
	*
	frame_dig -4 // weightOut: uint64
	/
	frame_bury 2 // power: uint64

	// contracts/BalancedPoolV2.algo.ts:226
	// ratioPow = this.pow(ratio, power)
	frame_dig 2 // power: uint64
	frame_dig 1 // ratio: uint64
	callsub pow
	frame_bury 3 // ratioPow: uint64

	// contracts/BalancedPoolV2.algo.ts:228
	// return (balanceOut * (SCALE - ratioPow)) / SCALE;
	frame_dig -3 // balanceOut: uint64
	intc 2 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	*
	intc 2 // 1000000
	/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	pushbytes 0xabdf7e15 // method "addLiquidity(uint64,uint64,address)void"
	pushbytes 0xc35f0f19 // method "computeLiquidity(address)void"
	pushbytes 0x1fc4c3e3 // method "optIn(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_addLiquidity *abi_route_computeLiquidity *abi_route_optIn

	// this contract does not implement the given ABI method for call NoOp
	err

*intToAscii:
	proto 1 1
	pushbytes 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	intc 3 // 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	intc 0 // 0
	==
	bz *itoa_if_end
	pushbytes 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	intc 4 // 10
	/
	intc 0 // 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	intc 4 // 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	bytec 0 //  ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	intc 4 // 10
	%
	callsub *intToAscii
	concat
	retsub