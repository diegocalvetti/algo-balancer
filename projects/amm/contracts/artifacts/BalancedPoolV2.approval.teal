#pragma version 10
intcblock 0 8 1000000 1 10 4 6 32 16
bytecblock 0x 0x746f6b656e 0x62616c616e6365735f 0x70726f76696465645f 0x6d696e726174696f5f 0x776569676874735f 0x617373657473 0x0000000000000000 0x6d616e61676572

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 6 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 3 // 1
	return

// createApplication(): void
//
// createApplication method called at creation
createApplication:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:29
	// this.manager.value = this.app.creator
	bytec 8 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// bootstrap(uint64[],uint64[])uint64
*abi_route_bootstrap:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bootstrap(uint64[],uint64[])uint64
	callsub bootstrap
	itob
	concat
	log
	intc 3 // 1
	return

// bootstrap(assetIds: AssetID[], weights: uint64[]): AssetID
//
// Bootstrap the pool by assigning assets and weights, create the LP tokens
// @param {AssetID[]} assetIds - assets of the pool
// @param {uint64[]} weights - weights of the pool
// @return uint64 - LP Token created ID
bootstrap:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:39
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/BalancedPoolV2.algo.ts:40
	// total = 0
	intc 0 // 0
	frame_bury 0 // total: uint64

	// contracts/BalancedPoolV2.algo.ts:42
	// for (let i = 0; i < assetIds.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/BalancedPoolV2.algo.ts:42
	// i < assetIds.length
	frame_dig 1 // i: uint64
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	<
	bz *for_0_end

	// contracts/BalancedPoolV2.algo.ts:43
	// this.addToken(i, assetIds[i], weights[i])
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig 1 // i: uint64
	callsub addToken

	// contracts/BalancedPoolV2.algo.ts:44
	// total += weights[i]
	frame_dig 0 // total: uint64
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	+
	frame_bury 0 // total: uint64

*for_0_continue:
	// contracts/BalancedPoolV2.algo.ts:42
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/BalancedPoolV2.algo.ts:47
	// this.assets.value = assetIds
	bytec 6 //  "assets"
	frame_dig -1 // assetIds: AssetID[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/BalancedPoolV2.algo.ts:49
	// assert(total === SCALE, 'Weights must sum to 1')
	frame_dig 0 // total: uint64
	intc 2 // 1000000
	==

	// Weights must sum to 1
	assert

	// contracts/BalancedPoolV2.algo.ts:50
	// this.createToken()
	callsub createToken

	// contracts/BalancedPoolV2.algo.ts:52
	// return this.token.value;
	bytec 1 //  "token"
	app_global_get

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(uint64,uint64,address)void
*abi_route_addLiquidity:
	// sender: address
	txna ApplicationArgs 3
	dup
	len
	intc 7 // 32
	==

	// argument 0 (sender) for addLiquidity must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,address)void
	callsub addLiquidity
	intc 3 // 1
	return

// addLiquidity(index: uint64, amount: uint64, sender: Address): void
//
// Provide one token liquidity to the pool
// @param {uint64} index - index of the token in the pool
// @param {uint64} amount - amount of token sent
// @param {Address} sender - the sender
addLiquidity:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:62
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/BalancedPoolV2.algo.ts:63
	// assert(this.token.value !== AssetID.zeroIndex, 'pool not bootstrapped')
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	!=

	// pool not bootstrapped
	assert

	// contracts/BalancedPoolV2.algo.ts:64
	// assetId = this.assets.value[index]
	bytec 6 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetId: uint64

	// contracts/BalancedPoolV2.algo.ts:65
	// log('Asset ID => ' + itob(assetId))
	pushbytes 0x4173736574204944203d3e20 // "Asset ID => "
	frame_dig 0 // assetId: uint64
	itob
	concat
	log

	// contracts/BalancedPoolV2.algo.ts:67
	// this.optIn(assetId)
	frame_dig 0 // assetId: uint64
	callsub optIn

	// contracts/BalancedPoolV2.algo.ts:68
	// this.balances(assetId).value += amount
	bytec 2 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_dig -2 // amount: uint64
	+
	bytec 2 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	swap
	itob
	box_put

	// *if0_condition
	// contracts/BalancedPoolV2.algo.ts:70
	// !this.provided(sender).exists
	bytec 3 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/BalancedPoolV2.algo.ts:71
	// this.provided(sender).create(64)
	bytec 3 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	pushint 64
	box_create
	pop

*if0_end:
	// contracts/BalancedPoolV2.algo.ts:74
	// this.provided(sender).value[index] += amount
	bytec 3 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 3 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_dig -2 // amount: uint64
	+
	itob
	replace3
	bytec 3 //  "provided_"
	frame_dig -3 // sender: Address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/BalancedPoolV2.algo.ts:76
	// newMinRatio = this.computeLP(sender, index)
	frame_dig -1 // index: uint64
	frame_dig -3 // sender: Address
	callsub computeLP
	frame_bury 1 // newMinRatio: uint64

	// *if1_condition
	// contracts/BalancedPoolV2.algo.ts:78
	// !this.minRatios(sender).exists
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if1_elseif1_condition

	// *if1_consequent
	// contracts/BalancedPoolV2.algo.ts:79
	// this.minRatios(sender).create(8)
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	intc 1 // 8
	box_create
	pop

	// contracts/BalancedPoolV2.algo.ts:80
	// this.minRatios(sender).value = newMinRatio
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put
	b *if1_end

*if1_elseif1_condition:
	// contracts/BalancedPoolV2.algo.ts:82
	// this.minRatios(sender).value == 0
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	intc 0 // 0
	==
	bz *if1_else

	// *if1_elseif1_consequent
	// contracts/BalancedPoolV2.algo.ts:83
	// this.minRatios(sender).value = newMinRatio
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put
	b *if1_end

*if1_else:
	// contracts/BalancedPoolV2.algo.ts:85
	// currentMin = this.minRatios(sender).value
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	frame_bury 2 // currentMin: uint64

	// *if2_condition
	// contracts/BalancedPoolV2.algo.ts:87
	// newMinRatio < currentMin
	frame_dig 1 // newMinRatio: uint64
	frame_dig 2 // currentMin: uint64
	<
	bz *if2_end

	// *if2_consequent
	// contracts/BalancedPoolV2.algo.ts:88
	// this.minRatios(sender).value = newMinRatio
	bytec 4 //  "minratio_"
	frame_dig -3 // sender: Address
	concat
	frame_dig 1 // newMinRatio: uint64
	itob
	box_put

*if2_end:

*if1_end:
	retsub

// computeLiquidity(address)void
*abi_route_computeLiquidity:
	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 7 // 32
	==

	// argument 0 (sender) for computeLiquidity must be a address
	assert

	// execute computeLiquidity(address)void
	callsub computeLiquidity
	intc 3 // 1
	return

// computeLiquidity(sender: Address): void
//
// Compute the liquidity for the given sender based on the state
// in the contract
// @param sender - the sender
computeLiquidity:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:99
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/BalancedPoolV2.algo.ts:100
	// minRatio = this.minRatios(sender).value
	bytec 4 //  "minratio_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.minRatios(sender).value
	assert
	btoi
	frame_bury 0 // minRatio: uint64

	// contracts/BalancedPoolV2.algo.ts:102
	// assert(minRatio > 0, 'computed ratio is zero')
	frame_dig 0 // minRatio: uint64
	intc 0 // 0
	>

	// computed ratio is zero
	assert

	// contracts/BalancedPoolV2.algo.ts:104
	// amount = AMOUNT_LP_DEPLOYER
	pushint 1_000_000
	intc 4 // 10
	intc 6 // 6
	exp
	*
	frame_bury 1 // amount: uint64

	// *if3_condition
	// contracts/BalancedPoolV2.algo.ts:105
	// this.token.value.reserve.assetBalance(this.token.value) !== TOTAL_LP_SUPPLY
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetReserve
	pop
	bytec 1 //  "token"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 4 // 10
	intc 8 // 16
	exp
	!=
	bz *if3_end

	// *if3_consequent
	// contracts/BalancedPoolV2.algo.ts:106
	// issued = this.token.value.total - this.token.value.reserve.assetBalance(this.token.value)
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetTotal
	pop
	bytec 1 //  "token"
	app_global_get
	asset_params_get AssetReserve
	pop
	bytec 1 //  "token"
	app_global_get
	asset_holding_get AssetBalance
	pop
	-
	frame_bury 2 // issued: uint64

	// contracts/BalancedPoolV2.algo.ts:107
	// amount = wideRatio([issued, minRatio], [SCALE])
	frame_dig 2 // issued: uint64
	frame_dig 0 // minRatio: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // amount: uint64

*if3_end:
	// contracts/BalancedPoolV2.algo.ts:110
	// assert(amount > 0, 'computed LP amount is zero')
	frame_dig 1 // amount: uint64
	intc 0 // 0
	>

	// computed LP amount is zero
	assert

	// contracts/BalancedPoolV2.algo.ts:112
	// this.minRatios(sender).value = 0
	bytec 4 //  "minratio_"
	frame_dig -1 // sender: Address
	concat
	bytec 7 // 0x0000000000000000
	box_put

	// contracts/BalancedPoolV2.algo.ts:114
	// for (let i = 0; i < this.provided(sender).value.length; i += 1)
	intc 0 // 0
	frame_bury 3 // i: uint64

*for_1:
	// contracts/BalancedPoolV2.algo.ts:114
	// i < this.provided(sender).value.length
	frame_dig 3 // i: uint64
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	len
	intc 1 // 8
	/
	<
	bz *for_1_end

	// contracts/BalancedPoolV2.algo.ts:115
	// this.provided(sender).value[i] = 0
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	bytec 7 // 0x0000000000000000
	replace3
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*for_1_continue:
	// contracts/BalancedPoolV2.algo.ts:114
	// i += 1
	frame_dig 3 // i: uint64
	intc 3 // 1
	+
	frame_bury 3 // i: uint64
	b *for_1

*for_1_end:
	// contracts/BalancedPoolV2.algo.ts:118
	// sendAssetTransfer({
	//       assetReceiver: sender,
	//       assetAmount: amount,
	//       xferAsset: this.token.value,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:119
	// assetReceiver: sender
	frame_dig -1 // sender: Address
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:120
	// assetAmount: amount
	frame_dig 1 // amount: uint64
	itxn_field AssetAmount

	// contracts/BalancedPoolV2.algo.ts:121
	// xferAsset: this.token.value
	bytec 1 //  "token"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// swap(address,uint64,uint64,uint64)void
*abi_route_swap:
	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// to: uint64
	txna ApplicationArgs 3
	btoi

	// from: uint64
	txna ApplicationArgs 2
	btoi

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 7 // 32
	==

	// argument 3 (sender) for swap must be a address
	assert

	// execute swap(address,uint64,uint64,uint64)void
	callsub swap
	intc 3 // 1
	return

// swap(sender: Address, from: uint64, to: uint64, amount: uint64): void
swap:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts/BalancedPoolV2.algo.ts:126
	// assert(this.token.value !== AssetID.zeroIndex, 'pool not bootstrapped')
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	!=

	// pool not bootstrapped
	assert

	// contracts/BalancedPoolV2.algo.ts:128
	// assetIn = this.assets.value[from]
	bytec 6 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // from: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetIn: uint64

	// contracts/BalancedPoolV2.algo.ts:129
	// assetOut = this.assets.value[to]
	bytec 6 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -3 // to: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 1 // assetOut: uint64

	// contracts/BalancedPoolV2.algo.ts:131
	// balanceIn = this.balances(assetIn).value
	bytec 2 //  "balances_"
	frame_dig 0 // assetIn: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetIn).value
	assert
	btoi
	frame_bury 2 // balanceIn: uint64

	// contracts/BalancedPoolV2.algo.ts:132
	// balanceOut = this.balances(assetOut).value
	bytec 2 //  "balances_"
	frame_dig 1 // assetOut: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetOut).value
	assert
	btoi
	frame_bury 3 // balanceOut: uint64

	// contracts/BalancedPoolV2.algo.ts:134
	// weightIn = this.weights(from).value
	bytec 5 //  "weights_"
	frame_dig -2 // from: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(from).value
	assert
	btoi
	frame_bury 4 // weightIn: uint64

	// contracts/BalancedPoolV2.algo.ts:135
	// weightOut = this.weights(to).value
	bytec 5 //  "weights_"
	frame_dig -3 // to: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(to).value
	assert
	btoi
	frame_bury 5 // weightOut: uint64

	// contracts/BalancedPoolV2.algo.ts:137
	// log(itob(balanceIn))
	frame_dig 2 // balanceIn: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:138
	// log(itob(balanceOut))
	frame_dig 3 // balanceOut: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:139
	// log(itob(weightIn))
	frame_dig 4 // weightIn: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:140
	// log(itob(weightOut))
	frame_dig 5 // weightOut: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:142
	// amountOut = this.calcOut(balanceIn, weightIn, balanceOut, weightOut, amount)
	frame_dig -4 // amount: uint64
	frame_dig 5 // weightOut: uint64
	frame_dig 3 // balanceOut: uint64
	frame_dig 4 // weightIn: uint64
	frame_dig 2 // balanceIn: uint64
	callsub calcOut
	frame_bury 6 // amountOut: uint64

	// contracts/BalancedPoolV2.algo.ts:144
	// log(itob(amountOut))
	frame_dig 6 // amountOut: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:146
	// this.balances(assetIn).value = balanceIn + amount
	bytec 2 //  "balances_"
	frame_dig 0 // assetIn: uint64
	itob
	concat
	frame_dig 2 // balanceIn: uint64
	frame_dig -4 // amount: uint64
	+
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:147
	// this.balances(assetOut).value = balanceOut - amountOut
	bytec 2 //  "balances_"
	frame_dig 1 // assetOut: uint64
	itob
	concat
	frame_dig 3 // balanceOut: uint64
	frame_dig 6 // amountOut: uint64
	-
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:149
	// sendAssetTransfer({
	//       assetReceiver: sender,
	//       assetAmount: amountOut,
	//       xferAsset: assetOut,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:150
	// assetReceiver: sender
	frame_dig -1 // sender: Address
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:151
	// assetAmount: amountOut
	frame_dig 6 // amountOut: uint64
	itxn_field AssetAmount

	// contracts/BalancedPoolV2.algo.ts:152
	// xferAsset: assetOut
	frame_dig 1 // assetOut: uint64
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optIn(uint64)void
*abi_route_optIn:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIn(uint64)void
	callsub optIn
	intc 3 // 1
	return

// optIn(assetId: AssetID): void
//
// @param assetId asset to opt-in
// @todo why?
optIn:
	proto 1 0

	// *if4_condition
	// contracts/BalancedPoolV2.algo.ts:161
	// this.app.address.isOptedInToAsset(assetId)
	global CurrentApplicationAddress
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	bz *if4_end

	// *if4_consequent
	// contracts/BalancedPoolV2.algo.ts:162
	// return;
	retsub

*if4_end:
	// contracts/BalancedPoolV2.algo.ts:165
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: assetId,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:166
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:167
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts/BalancedPoolV2.algo.ts:168
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToken(index: uint64, assetID: AssetID, weight: uint64): void
//
// *******************
// SUBROUTINES
// *******************
//
// Add a token setting balances and weights associated
// in their box
addToken:
	proto 3 0

	// *if5_condition
	// contracts/BalancedPoolV2.algo.ts:181
	// !this.weights(index).exists
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if5_end

	// *if5_consequent
	// contracts/BalancedPoolV2.algo.ts:182
	// this.weights(index).create(8)
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if5_end:
	// *if6_condition
	// contracts/BalancedPoolV2.algo.ts:185
	// !this.balances(assetID).exists
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// contracts/BalancedPoolV2.algo.ts:186
	// this.balances(assetID).create(8)
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	intc 1 // 8
	box_create
	pop

*if6_end:
	// contracts/BalancedPoolV2.algo.ts:189
	// this.weights(index).value = weight
	bytec 5 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	frame_dig -3 // weight: uint64
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:190
	// this.balances(assetID).value = 0
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	bytec 7 // 0x0000000000000000
	box_put
	retsub

// createToken(): void
//
// Create the LP tokens for this pool
createToken:
	proto 0 0

	// *if7_condition
	// contracts/BalancedPoolV2.algo.ts:197
	// this.token.value === AssetID.zeroIndex
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	==
	bz *if7_end

	// *if7_consequent
	// contracts/BalancedPoolV2.algo.ts:198
	// this.token.value = sendAssetCreation({
	//         configAssetTotal: TOTAL_LP_SUPPLY,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'BalancedPool-' + this.app.id.toString(),
	//         configAssetUnitName: 'LP',
	//       })
	bytec 1 //  "token"
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:199
	// configAssetTotal: TOTAL_LP_SUPPLY
	intc 4 // 10
	intc 8 // 16
	exp
	itxn_field ConfigAssetTotal

	// contracts/BalancedPoolV2.algo.ts:200
	// configAssetDecimals: 6
	intc 6 // 6
	itxn_field ConfigAssetDecimals

	// contracts/BalancedPoolV2.algo.ts:201
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/BalancedPoolV2.algo.ts:202
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/BalancedPoolV2.algo.ts:203
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts/BalancedPoolV2.algo.ts:204
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts/BalancedPoolV2.algo.ts:205
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/BalancedPoolV2.algo.ts:206
	// configAssetName: 'BalancedPool-' + this.app.id.toString()
	pushbytes 0x42616c616e636564506f6f6c2d // "BalancedPool-"
	txna Applications 0
	callsub *itoa
	concat
	itxn_field ConfigAssetName

	// contracts/BalancedPoolV2.algo.ts:207
	// configAssetUnitName: 'LP'
	pushbytes 0x4c50 // "LP"
	itxn_field ConfigAssetUnitName

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if7_end:
	retsub

// assertIsManager(): void
//
// Assert the tx sender is the manager
assertIsManager:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:216
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 8 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert
	retsub

// lnWithSign(x: uint64): uint64[]
lnWithSign:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts/BalancedPoolV2.algo.ts:220
	// assert(x > 0, 'log undefined for x ≤ 0')
	frame_dig -1 // x: uint64
	intc 0 // 0
	>

	// log undefined for x ≤ 0
	assert

	// contracts/BalancedPoolV2.algo.ts:222
	// negative: uint64 = 0
	intc 0 // 0
	frame_bury 0 // negative: uint64

	// *if8_condition
	// contracts/BalancedPoolV2.algo.ts:225
	// x < SCALE
	frame_dig -1 // x: uint64
	intc 2 // 1000000
	<
	bz *if8_else

	// *if8_consequent
	// contracts/BalancedPoolV2.algo.ts:226
	// negative = 1
	intc 3 // 1
	frame_bury 0 // negative: uint64

	// contracts/BalancedPoolV2.algo.ts:227
	// invX = wideRatio([SCALE, SCALE], [x])
	intc 2 // 1000000
	dup
	mulw
	intc 0 // 0
	frame_dig -1 // x: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // invX: uint64

	// contracts/BalancedPoolV2.algo.ts:228
	// z = wideRatio([invX - SCALE, SCALE], [invX])
	frame_dig 2 // invX: uint64
	intc 2 // 1000000
	-
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig 2 // invX: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // z: uint64
	b *if8_end

*if8_else:
	// contracts/BalancedPoolV2.algo.ts:230
	// z = wideRatio([x - SCALE, SCALE], [x])
	frame_dig -1 // x: uint64
	intc 2 // 1000000
	-
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig -1 // x: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // z: uint64

*if8_end:
	// contracts/BalancedPoolV2.algo.ts:233
	// result = z
	frame_dig 1 // z: uint64
	frame_bury 3 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:234
	// term = z
	frame_dig 1 // z: uint64
	frame_bury 4 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:235
	// neg = false
	intc 0 // 0
	frame_bury 5 // neg: bool

	// contracts/BalancedPoolV2.algo.ts:237
	// for (let i = 2; i <= 5; i = i + 1)
	pushint 2
	frame_bury 6 // i: uint64

*for_2:
	// contracts/BalancedPoolV2.algo.ts:237
	// i <= 5
	frame_dig 6 // i: uint64
	pushint 5
	<=
	bz *for_2_end

	// contracts/BalancedPoolV2.algo.ts:238
	// term = wideRatio([term, z], [SCALE])
	frame_dig 4 // term: uint64
	frame_dig 1 // z: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:239
	// delta = wideRatio([term], [i])
	intc 0 // 0
	frame_dig 4 // term: uint64
	intc 0 // 0
	frame_dig 6 // i: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // delta: uint64

	// contracts/BalancedPoolV2.algo.ts:240
	// result = neg ? result - delta : result + delta
	frame_dig 5 // neg: bool
	bz *ternary0_false
	frame_dig 3 // result: uint64
	frame_dig 7 // delta: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig 3 // result: uint64
	frame_dig 7 // delta: uint64
	+

*ternary0_end:
	frame_bury 3 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:241
	// neg = !neg
	frame_dig 5 // neg: bool
	!
	frame_bury 5 // neg: bool

*for_2_continue:
	// contracts/BalancedPoolV2.algo.ts:237
	// i = i + 1
	frame_dig 6 // i: uint64
	intc 3 // 1
	+
	frame_bury 6 // i: uint64
	b *for_2

*for_2_end:
	// contracts/BalancedPoolV2.algo.ts:244
	// return [negative, result];
	frame_dig 0 // negative: uint64
	itob
	frame_dig 3 // result: uint64
	itob
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// exp(x: uint64): uint64
exp:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:248
	// result = SCALE
	intc 2 // 1000000
	frame_bury 0 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:249
	// term = SCALE
	intc 2 // 1000000
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:251
	// for (let i = 1; i <= 10; i = i + 1)
	intc 3 // 1
	frame_bury 2 // i: uint64

*for_3:
	// contracts/BalancedPoolV2.algo.ts:251
	// i <= 10
	frame_dig 2 // i: uint64
	intc 4 // 10
	<=
	bz *for_3_end

	// contracts/BalancedPoolV2.algo.ts:252
	// term = wideRatio([term, x], [i * SCALE])
	frame_dig 1 // term: uint64
	frame_dig -1 // x: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // i: uint64
	intc 2 // 1000000
	*
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:253
	// result += term
	frame_dig 0 // result: uint64
	frame_dig 1 // term: uint64
	+
	frame_bury 0 // result: uint64

*for_3_continue:
	// contracts/BalancedPoolV2.algo.ts:251
	// i = i + 1
	frame_dig 2 // i: uint64
	intc 3 // 1
	+
	frame_bury 2 // i: uint64
	b *for_3

*for_3_end:
	// contracts/BalancedPoolV2.algo.ts:256
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// pow(x: uint64, y: uint64): uint64
pow:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// *if9_condition
	// contracts/BalancedPoolV2.algo.ts:260
	// x === 0
	frame_dig -1 // x: uint64
	intc 0 // 0
	==
	bz *if9_end

	// *if9_consequent
	// contracts/BalancedPoolV2.algo.ts:260
	// return 0;
	intc 0 // 0
	b *pow*return

*if9_end:
	// contracts/BalancedPoolV2.algo.ts:262
	// lnXResult = this.lnWithSign(x)
	frame_dig -1 // x: uint64
	callsub lnWithSign
	frame_bury 0 // lnXResult: uint64[]

	// contracts/BalancedPoolV2.algo.ts:263
	// negativeLn = lnXResult[0]
	frame_dig 0 // lnXResult: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 1 // negativeLn: uint64

	// contracts/BalancedPoolV2.algo.ts:264
	// lnX = lnXResult[1]
	frame_dig 0 // lnXResult: uint64[]
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_bury 2 // lnX: uint64

	// contracts/BalancedPoolV2.algo.ts:266
	// ylnX = wideRatio([y, lnX], [SCALE])
	frame_dig -2 // y: uint64
	frame_dig 2 // lnX: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // ylnX: uint64

	// contracts/BalancedPoolV2.algo.ts:268
	// expResult = this.exp(ylnX)
	frame_dig 3 // ylnX: uint64
	callsub exp
	frame_bury 4 // expResult: uint64

	// *if10_condition
	// contracts/BalancedPoolV2.algo.ts:270
	// negativeLn === 1
	frame_dig 1 // negativeLn: uint64
	intc 3 // 1
	==
	bz *if10_end

	// *if10_consequent
	// contracts/BalancedPoolV2.algo.ts:272
	// return wideRatio([SCALE, SCALE], [expResult]);
	intc 2 // 1000000
	dup
	mulw
	intc 0 // 0
	frame_dig 4 // expResult: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	b *pow*return

*if10_end:
	// contracts/BalancedPoolV2.algo.ts:274
	// return expResult;
	frame_dig 4 // expResult: uint64

*pow*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// computeLP(sender: Address, index: uint64): uint64
//
// Compute the ratio of the given token respect to the total balance of the pool
computeLP:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/BalancedPoolV2.algo.ts:281
	// assetId = this.assets.value[index]
	bytec 6 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 0 // assetId: uint64

	// contracts/BalancedPoolV2.algo.ts:282
	// weight = this.weights(index).value
	bytec 5 //  "weights_"
	frame_dig -2 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.weights(index).value
	assert
	btoi
	frame_bury 1 // weight: uint64

	// contracts/BalancedPoolV2.algo.ts:283
	// poolBalance = this.balances(assetId).value
	bytec 2 //  "balances_"
	frame_dig 0 // assetId: uint64
	itob
	concat
	box_get

	// box value does not exist: this.balances(assetId).value
	assert
	btoi
	frame_bury 2 // poolBalance: uint64

	// contracts/BalancedPoolV2.algo.ts:284
	// providedAmount = this.provided(sender).value[index]
	bytec 3 //  "provided_"
	frame_dig -1 // sender: Address
	concat
	box_get

	// box value does not exist: this.provided(sender).value
	assert
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -2 // index: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 3 // providedAmount: uint64

	// *if11_condition
	// contracts/BalancedPoolV2.algo.ts:286
	// providedAmount <= 0
	frame_dig 3 // providedAmount: uint64
	intc 0 // 0
	<=
	bz *if11_end

	// *if11_consequent
	// contracts/BalancedPoolV2.algo.ts:287
	// return 0;
	intc 0 // 0
	b *computeLP*return

*if11_end:
	// contracts/BalancedPoolV2.algo.ts:290
	// ratio = wideRatio([providedAmount, SCALE], [poolBalance])
	frame_dig 3 // providedAmount: uint64
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig 2 // poolBalance: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:291
	// return wideRatio([ratio, weight], [SCALE]);
	frame_dig 4 // ratio: uint64
	frame_dig 1 // weight: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

*computeLP*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// calcOut(balanceIn: uint64, weightIn: uint64, balanceOut: uint64, weightOut: uint64, amountIn: uint64): uint64
calcOut:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:303
	// amountInWithFee = wideRatio([amountIn, SCALE - fee], [SCALE])
	frame_dig -5 // amountIn: uint64
	pushint 999000
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // amountInWithFee: uint64

	// contracts/BalancedPoolV2.algo.ts:306
	// ratio = wideRatio([balanceIn, SCALE], [balanceIn + amountInWithFee])
	frame_dig -1 // balanceIn: uint64
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig -1 // balanceIn: uint64
	frame_dig 0 // amountInWithFee: uint64
	+
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:308
	// power = wideRatio([weightIn, SCALE], [weightOut])
	frame_dig -2 // weightIn: uint64
	intc 2 // 1000000
	mulw
	intc 0 // 0
	frame_dig -4 // weightOut: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // power: uint64

	// contracts/BalancedPoolV2.algo.ts:310
	// log(itob(ratio))
	frame_dig 1 // ratio: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:311
	// log(itob(power))
	frame_dig 2 // power: uint64
	itob
	log

	// contracts/BalancedPoolV2.algo.ts:314
	// ratioPow = this.pow(ratio, power)
	frame_dig 2 // power: uint64
	frame_dig 1 // ratio: uint64
	callsub pow
	frame_bury 3 // ratioPow: uint64

	// contracts/BalancedPoolV2.algo.ts:316
	// return wideRatio([balanceOut, SCALE - ratioPow], [SCALE]);
	frame_dig -3 // balanceOut: uint64
	intc 2 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	mulw
	intc 0 // 0
	intc 2 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	pushbytes 0xabdf7e15 // method "addLiquidity(uint64,uint64,address)void"
	pushbytes 0xc35f0f19 // method "computeLiquidity(address)void"
	pushbytes 0x04aa5c7e // method "swap(address,uint64,uint64,uint64)void"
	pushbytes 0x1fc4c3e3 // method "optIn(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_addLiquidity *abi_route_computeLiquidity *abi_route_swap *abi_route_optIn

	// this contract does not implement the given ABI method for call NoOp
	err

*intToAscii:
	proto 1 1
	pushbytes 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	intc 3 // 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	intc 0 // 0
	==
	bz *itoa_if_end
	pushbytes 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	intc 4 // 10
	/
	intc 0 // 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	intc 4 // 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	bytec 0 //  ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	intc 4 // 10
	%
	callsub *intToAscii
	concat
	retsub