#pragma version 10
intcblock 1000000 1 0 10
bytecblock 0x

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:20
	// this.manager.value = this.app.creator
	pushbytes 0x6d616e61676572 // "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// addToken(uint64,uint64,uint64)void
*abi_route_addToken:
	// weight: uint64
	txna ApplicationArgs 3
	btoi

	// assetID: uint64
	txna ApplicationArgs 2
	btoi

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute addToken(uint64,uint64,uint64)void
	callsub addToken
	intc 1 // 1
	return

// addToken(index: uint64, assetID: AssetID, weight: uint64): void
addToken:
	proto 3 0

	// contracts/BalancedPoolV2.algo.ts:24
	// this.assets(index + 1).value = assetID
	pushbytes 0x6173736574735f // "assets_"
	frame_dig -1 // index: uint64
	intc 1 // 1
	+
	itob
	concat
	frame_dig -2 // assetID: AssetID
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:25
	// this.weights(index + 1).value = weight
	pushbytes 0x776569676874735f // "weights_"
	frame_dig -1 // index: uint64
	intc 1 // 1
	+
	itob
	concat
	frame_dig -3 // weight: uint64
	itob
	box_put
	retsub

// ln(x: uint64): uint64
//
// Approximate ln(x) using the Mercator series expansion
ln:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/BalancedPoolV2.algo.ts:32
	// assert(x > 0, 'log undefined for x ≤ 0')
	frame_dig -1 // x: uint64
	intc 2 // 0
	>

	// log undefined for x ≤ 0
	assert

	// contracts/BalancedPoolV2.algo.ts:35
	// z = ((x - SCALE) * SCALE) / x
	frame_dig -1 // x: uint64
	intc 0 // 1000000
	-
	intc 0 // 1000000
	*
	frame_dig -1 // x: uint64
	/
	frame_bury 0 // z: uint64

	// contracts/BalancedPoolV2.algo.ts:36
	// result = z
	frame_dig 0 // z: uint64
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:37
	// term = z
	frame_dig 0 // z: uint64
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:38
	// neg = false
	intc 2 // 0
	frame_bury 3 // neg: bool

	// contracts/BalancedPoolV2.algo.ts:40
	// for (let i = 2; i <= 10; i = i + 1)
	pushint 2
	frame_bury 4 // i: uint64

*for_0:
	// contracts/BalancedPoolV2.algo.ts:40
	// i <= 10
	frame_dig 4 // i: uint64
	intc 3 // 10
	<=
	bz *for_0_end

	// contracts/BalancedPoolV2.algo.ts:41
	// term = (term * z) / SCALE
	frame_dig 2 // term: uint64
	frame_dig 0 // z: uint64
	*
	intc 0 // 1000000
	/
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:42
	// delta = term / i
	frame_dig 2 // term: uint64
	frame_dig 4 // i: uint64
	/
	frame_bury 5 // delta: uint64

	// contracts/BalancedPoolV2.algo.ts:43
	// result = neg ? result - delta : result + delta
	frame_dig 3 // neg: bool
	bz *ternary0_false
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	+

*ternary0_end:
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:44
	// neg = !neg
	frame_dig 3 // neg: bool
	!
	frame_bury 3 // neg: bool

*for_0_continue:
	// contracts/BalancedPoolV2.algo.ts:40
	// i = i + 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_0

*for_0_end:
	// contracts/BalancedPoolV2.algo.ts:47
	// return result;
	frame_dig 1 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// exp(x: uint64): uint64
//
// Approximate e^x using the Taylor series expansion
exp:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:54
	// result = SCALE
	intc 0 // 1000000
	frame_bury 0 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:55
	// term = SCALE
	intc 0 // 1000000
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:57
	// for (let i = 1; i <= 10; i = i + 1)
	intc 1 // 1
	frame_bury 2 // i: uint64

*for_1:
	// contracts/BalancedPoolV2.algo.ts:57
	// i <= 10
	frame_dig 2 // i: uint64
	intc 3 // 10
	<=
	bz *for_1_end

	// contracts/BalancedPoolV2.algo.ts:58
	// term = (term * x) / (i * SCALE)
	frame_dig 1 // term: uint64
	frame_dig -1 // x: uint64
	*
	frame_dig 2 // i: uint64
	intc 0 // 1000000
	*
	/
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:59
	// result += term
	frame_dig 0 // result: uint64
	frame_dig 1 // term: uint64
	+
	frame_bury 0 // result: uint64

*for_1_continue:
	// contracts/BalancedPoolV2.algo.ts:57
	// i = i + 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	// contracts/BalancedPoolV2.algo.ts:62
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// pow(x: uint64, y: uint64): uint64
//
// Approximate x^y by computing e^(y ln x)
pow:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:69
	// lnX = this.ln(x)
	frame_dig -1 // x: uint64
	callsub ln
	frame_bury 0 // lnX: uint64

	// contracts/BalancedPoolV2.algo.ts:70
	// ylnX = (y * lnX) / SCALE
	frame_dig -2 // y: uint64
	frame_dig 0 // lnX: uint64
	*
	intc 0 // 1000000
	/
	frame_bury 1 // ylnX: uint64

	// contracts/BalancedPoolV2.algo.ts:71
	// return this.exp(ylnX);
	frame_dig 1 // ylnX: uint64
	callsub exp

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// calcOut(balanceIn: uint64, weightIn: uint64, balanceOut: uint64, weightOut: uint64, amountIn: uint64): uint64
calcOut:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:83
	// amountInWithFee = (amountIn * (SCALE - fee)) / SCALE
	frame_dig -5 // amountIn: uint64
	pushint 999000
	*
	intc 0 // 1000000
	/
	frame_bury 0 // amountInWithFee: uint64

	// contracts/BalancedPoolV2.algo.ts:86
	// ratio = balanceIn / (balanceIn + amountInWithFee)
	frame_dig -1 // balanceIn: uint64
	frame_dig -1 // balanceIn: uint64
	frame_dig 0 // amountInWithFee: uint64
	+
	/
	frame_bury 1 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:88
	// power = (weightIn * SCALE) / weightOut
	frame_dig -2 // weightIn: uint64
	intc 0 // 1000000
	*
	frame_dig -4 // weightOut: uint64
	/
	frame_bury 2 // power: uint64

	// contracts/BalancedPoolV2.algo.ts:91
	// ratioPow = this.pow(ratio, power)
	frame_dig 2 // power: uint64
	frame_dig 1 // ratio: uint64
	callsub pow
	frame_bury 3 // ratioPow: uint64

	// contracts/BalancedPoolV2.algo.ts:93
	// return (balanceOut * (SCALE - ratioPow)) / SCALE;
	frame_dig -3 // balanceOut: uint64
	intc 0 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	*
	intc 0 // 1000000
	/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x5c4dfb2a // method "addToken(uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_addToken

	// this contract does not implement the given ABI method for call NoOp
	err