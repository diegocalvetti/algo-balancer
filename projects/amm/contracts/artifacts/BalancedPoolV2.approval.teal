#pragma version 10
intcblock 0 1000000 8 1 10 6
bytecblock 0x 0x746f6b656e 0x62616c616e6365735f 0x776569676874735f 0x6d616e61676572 0x617373657473

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 5 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 3 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:20
	// this.manager.value = this.app.creator
	bytec 4 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// bootstrap(uint64[],uint64[])uint64
*abi_route_bootstrap:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bootstrap(uint64[],uint64[])uint64
	callsub bootstrap
	itob
	concat
	log
	intc 3 // 1
	return

// bootstrap(assetIds: AssetID[], weights: uint64[]): AssetID
bootstrap:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:24
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/BalancedPoolV2.algo.ts:25
	// total = 0
	intc 0 // 0
	frame_bury 0 // total: uint64

	// contracts/BalancedPoolV2.algo.ts:27
	// for (let i = 0; i < assetIds.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/BalancedPoolV2.algo.ts:27
	// i < assetIds.length
	frame_dig 1 // i: uint64
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 2 // 8
	/
	<
	bz *for_0_end

	// contracts/BalancedPoolV2.algo.ts:28
	// this.addToken(i, assetIds[i], weights[i])
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_dig 1 // i: uint64
	callsub addToken

	// contracts/BalancedPoolV2.algo.ts:29
	// total += weights[i]
	frame_dig 0 // total: uint64
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	+
	frame_bury 0 // total: uint64

*for_0_continue:
	// contracts/BalancedPoolV2.algo.ts:27
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/BalancedPoolV2.algo.ts:32
	// this.assets.value = assetIds
	bytec 5 //  "assets"
	frame_dig -1 // assetIds: AssetID[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/BalancedPoolV2.algo.ts:34
	// assert(total === SCALE, 'Weights must sum to 1')
	frame_dig 0 // total: uint64
	intc 1 // 1000000
	==

	// Weights must sum to 1
	assert

	// contracts/BalancedPoolV2.algo.ts:35
	// this.createToken()
	callsub createToken

	// contracts/BalancedPoolV2.algo.ts:37
	// return this.token.value;
	bytec 1 //  "token"
	app_global_get

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(uint64,uint64,address)void
*abi_route_addLiquidity:
	// sender: address
	txna ApplicationArgs 3
	dup
	len
	pushint 32
	==

	// argument 0 (sender) for addLiquidity must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,address)void
	callsub addLiquidity
	intc 3 // 1
	return

// addLiquidity(index: uint64, amount: uint64, sender: Address): void
//
// Provide Liquidity to the pool proportionally to the weights
addLiquidity:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/BalancedPoolV2.algo.ts:44
	// assert(this.token.value !== AssetID.zeroIndex, 'pool not bootstrapped')
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	!=

	// pool not bootstrapped
	assert

	// contracts/BalancedPoolV2.algo.ts:45
	// assetId = this.assets.value[index]
	bytec 5 //  "assets"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig -1 // index: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_bury 0 // assetId: uint64

	// contracts/BalancedPoolV2.algo.ts:46
	// log('Asset ID => ' + itob(assetId))
	pushbytes 0x4173736574204944203d3e20 // "Asset ID => "
	frame_dig 0 // assetId: uint64
	itob
	concat
	log
	retsub

// optIn(uint64)void
*abi_route_optIn:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIn(uint64)void
	callsub optIn
	intc 3 // 1
	return

// optIn(assetId: AssetID): void
optIn:
	proto 1 0

	// *if0_condition
	// contracts/BalancedPoolV2.algo.ts:92
	// this.app.address.isOptedInToAsset(assetId)
	global CurrentApplicationAddress
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/BalancedPoolV2.algo.ts:93
	// return;
	retsub

*if0_end:
	// contracts/BalancedPoolV2.algo.ts:96
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: assetId,
	//       assetAmount: 0,
	//     })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:97
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/BalancedPoolV2.algo.ts:98
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts/BalancedPoolV2.algo.ts:99
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToken(index: uint64, assetID: AssetID, weight: uint64): void
addToken:
	proto 3 0

	// *if1_condition
	// contracts/BalancedPoolV2.algo.ts:104
	// !this.weights(index).exists
	bytec 3 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/BalancedPoolV2.algo.ts:105
	// this.weights(index).create(8)
	bytec 3 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	intc 2 // 8
	box_create
	pop

*if1_end:
	// *if2_condition
	// contracts/BalancedPoolV2.algo.ts:108
	// !this.balances(assetID).exists
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if2_end

	// *if2_consequent
	// contracts/BalancedPoolV2.algo.ts:109
	// this.balances(assetID).create(8)
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	intc 2 // 8
	box_create
	pop

*if2_end:
	// contracts/BalancedPoolV2.algo.ts:112
	// this.weights(index).value = weight
	bytec 3 //  "weights_"
	frame_dig -1 // index: uint64
	itob
	concat
	frame_dig -3 // weight: uint64
	itob
	box_put

	// contracts/BalancedPoolV2.algo.ts:113
	// this.balances(assetID).value = 0
	bytec 2 //  "balances_"
	frame_dig -2 // assetID: AssetID
	itob
	concat
	pushbytes 0x0000000000000000
	box_put
	retsub

// createToken(): void
createToken:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:117
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 4 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// *if3_condition
	// contracts/BalancedPoolV2.algo.ts:119
	// this.token.value === AssetID.zeroIndex
	bytec 1 //  "token"
	app_global_get
	intc 0 // 0
	==
	bz *if3_end

	// *if3_consequent
	// contracts/BalancedPoolV2.algo.ts:120
	// this.token.value = sendAssetCreation({
	//         configAssetTotal: 10 ** 16,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'BalancedPool-' + itob(this.app.id),
	//         configAssetUnitName: 'LP',
	//       })
	bytec 1 //  "token"
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/BalancedPoolV2.algo.ts:121
	// configAssetTotal: 10 ** 16
	intc 4 // 10
	pushint 16
	exp
	itxn_field ConfigAssetTotal

	// contracts/BalancedPoolV2.algo.ts:122
	// configAssetDecimals: 6
	intc 5 // 6
	itxn_field ConfigAssetDecimals

	// contracts/BalancedPoolV2.algo.ts:123
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/BalancedPoolV2.algo.ts:124
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/BalancedPoolV2.algo.ts:125
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts/BalancedPoolV2.algo.ts:126
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts/BalancedPoolV2.algo.ts:127
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/BalancedPoolV2.algo.ts:128
	// configAssetName: 'BalancedPool-' + itob(this.app.id)
	pushbytes 0x42616c616e636564506f6f6c2d // "BalancedPool-"
	txna Applications 0
	itob
	concat
	itxn_field ConfigAssetName

	// contracts/BalancedPoolV2.algo.ts:129
	// configAssetUnitName: 'LP'
	pushbytes 0x4c50 // "LP"
	itxn_field ConfigAssetUnitName

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if3_end:
	retsub

// assertIsManager(): void
assertIsManager:
	proto 0 0

	// contracts/BalancedPoolV2.algo.ts:135
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 4 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert
	retsub

// ln(x: uint64): uint64
//
// Approximate ln(x) using the Mercator series expansion
ln:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/BalancedPoolV2.algo.ts:142
	// assert(x > 0, 'log undefined for x ≤ 0')
	frame_dig -1 // x: uint64
	intc 0 // 0
	>

	// log undefined for x ≤ 0
	assert

	// contracts/BalancedPoolV2.algo.ts:145
	// z = ((x - SCALE) * SCALE) / x
	frame_dig -1 // x: uint64
	intc 1 // 1000000
	-
	intc 1 // 1000000
	*
	frame_dig -1 // x: uint64
	/
	frame_bury 0 // z: uint64

	// contracts/BalancedPoolV2.algo.ts:146
	// result = z
	frame_dig 0 // z: uint64
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:147
	// term = z
	frame_dig 0 // z: uint64
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:148
	// neg = false
	intc 0 // 0
	frame_bury 3 // neg: bool

	// contracts/BalancedPoolV2.algo.ts:150
	// for (let i = 2; i <= 10; i = i + 1)
	pushint 2
	frame_bury 4 // i: uint64

*for_1:
	// contracts/BalancedPoolV2.algo.ts:150
	// i <= 10
	frame_dig 4 // i: uint64
	intc 4 // 10
	<=
	bz *for_1_end

	// contracts/BalancedPoolV2.algo.ts:151
	// term = (term * z) / SCALE
	frame_dig 2 // term: uint64
	frame_dig 0 // z: uint64
	*
	intc 1 // 1000000
	/
	frame_bury 2 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:152
	// delta = term / i
	frame_dig 2 // term: uint64
	frame_dig 4 // i: uint64
	/
	frame_bury 5 // delta: uint64

	// contracts/BalancedPoolV2.algo.ts:153
	// result = neg ? result - delta : result + delta
	frame_dig 3 // neg: bool
	bz *ternary0_false
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig 1 // result: uint64
	frame_dig 5 // delta: uint64
	+

*ternary0_end:
	frame_bury 1 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:154
	// neg = !neg
	frame_dig 3 // neg: bool
	!
	frame_bury 3 // neg: bool

*for_1_continue:
	// contracts/BalancedPoolV2.algo.ts:150
	// i = i + 1
	frame_dig 4 // i: uint64
	intc 3 // 1
	+
	frame_bury 4 // i: uint64
	b *for_1

*for_1_end:
	// contracts/BalancedPoolV2.algo.ts:157
	// return result;
	frame_dig 1 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// exp(x: uint64): uint64
//
// Approximate e^x using the Taylor series expansion
exp:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/BalancedPoolV2.algo.ts:164
	// result = SCALE
	intc 1 // 1000000
	frame_bury 0 // result: uint64

	// contracts/BalancedPoolV2.algo.ts:165
	// term = SCALE
	intc 1 // 1000000
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:167
	// for (let i = 1; i <= 10; i = i + 1)
	intc 3 // 1
	frame_bury 2 // i: uint64

*for_2:
	// contracts/BalancedPoolV2.algo.ts:167
	// i <= 10
	frame_dig 2 // i: uint64
	intc 4 // 10
	<=
	bz *for_2_end

	// contracts/BalancedPoolV2.algo.ts:168
	// term = (term * x) / (i * SCALE)
	frame_dig 1 // term: uint64
	frame_dig -1 // x: uint64
	*
	frame_dig 2 // i: uint64
	intc 1 // 1000000
	*
	/
	frame_bury 1 // term: uint64

	// contracts/BalancedPoolV2.algo.ts:169
	// result += term
	frame_dig 0 // result: uint64
	frame_dig 1 // term: uint64
	+
	frame_bury 0 // result: uint64

*for_2_continue:
	// contracts/BalancedPoolV2.algo.ts:167
	// i = i + 1
	frame_dig 2 // i: uint64
	intc 3 // 1
	+
	frame_bury 2 // i: uint64
	b *for_2

*for_2_end:
	// contracts/BalancedPoolV2.algo.ts:172
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// pow(x: uint64, y: uint64): uint64
//
// Approximate x^y by computing e^(y ln x)
pow:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/BalancedPoolV2.algo.ts:179
	// lnX = this.ln(x)
	frame_dig -1 // x: uint64
	callsub ln
	frame_bury 0 // lnX: uint64

	// contracts/BalancedPoolV2.algo.ts:180
	// ylnX = (y * lnX) / SCALE
	frame_dig -2 // y: uint64
	frame_dig 0 // lnX: uint64
	*
	intc 1 // 1000000
	/
	frame_bury 1 // ylnX: uint64

	// contracts/BalancedPoolV2.algo.ts:181
	// return this.exp(ylnX);
	frame_dig 1 // ylnX: uint64
	callsub exp

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// calcOut(balanceIn: uint64, weightIn: uint64, balanceOut: uint64, weightOut: uint64, amountIn: uint64): uint64
calcOut:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/BalancedPoolV2.algo.ts:193
	// amountInWithFee = (amountIn * (SCALE - fee)) / SCALE
	frame_dig -5 // amountIn: uint64
	pushint 999000
	*
	intc 1 // 1000000
	/
	frame_bury 0 // amountInWithFee: uint64

	// contracts/BalancedPoolV2.algo.ts:196
	// ratio = balanceIn / (balanceIn + amountInWithFee)
	frame_dig -1 // balanceIn: uint64
	frame_dig -1 // balanceIn: uint64
	frame_dig 0 // amountInWithFee: uint64
	+
	/
	frame_bury 1 // ratio: uint64

	// contracts/BalancedPoolV2.algo.ts:198
	// power = (weightIn * SCALE) / weightOut
	frame_dig -2 // weightIn: uint64
	intc 1 // 1000000
	*
	frame_dig -4 // weightOut: uint64
	/
	frame_bury 2 // power: uint64

	// contracts/BalancedPoolV2.algo.ts:201
	// ratioPow = this.pow(ratio, power)
	frame_dig 2 // power: uint64
	frame_dig 1 // ratio: uint64
	callsub pow
	frame_bury 3 // ratioPow: uint64

	// contracts/BalancedPoolV2.algo.ts:203
	// return (balanceOut * (SCALE - ratioPow)) / SCALE;
	frame_dig -3 // balanceOut: uint64
	intc 1 // 1000000
	frame_dig 3 // ratioPow: uint64
	-
	*
	intc 1 // 1000000
	/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	pushbytes 0xabdf7e15 // method "addLiquidity(uint64,uint64,address)void"
	pushbytes 0x1fc4c3e3 // method "optIn(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_addLiquidity *abi_route_optIn

	// this contract does not implement the given ABI method for call NoOp
	err