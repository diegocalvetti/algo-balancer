{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLiquidity(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnLiquidity(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "token": {
          "type": "uint64",
          "key": "token"
        },
        "burned": {
          "type": "uint64",
          "key": "burned"
        },
        "assets": {
          "type": "bytes",
          "key": "assets"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BalancedPoolV2",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Bootstrap the pool by assigning assets and weights, create the LP tokens",
        "args": [
          {
            "name": "assetIds",
            "type": "uint64[]",
            "desc": "assets of the pool"
          },
          {
            "name": "weights",
            "type": "uint64[]",
            "desc": "weights of the pool\n uint64 - LP Token created ID"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "Provide one token liquidity to the pool",
        "args": [
          {
            "name": "index",
            "type": "uint64",
            "desc": "index of the token in the pool"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "amount of token sent"
          },
          {
            "name": "sender",
            "type": "address",
            "desc": "the sender"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLiquidity",
        "desc": "Compute the liquidity for the given sender based on the state\nin the contract",
        "args": [
          {
            "name": "sender",
            "type": "address",
            "desc": "the sender"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnLiquidity",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amountLP",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIn",
        "args": [
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "asset to opt-in\n why?"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}