{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLiquidity(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnLiquidity(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(address,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "token": {
          "type": "uint64",
          "key": "token"
        },
        "burned": {
          "type": "uint64",
          "key": "burned"
        },
        "assets": {
          "type": "bytes",
          "key": "assets"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDggMTAwMDAwMCAxIDEwIDYgNCAzMiAyIDUKYnl0ZWNibG9jayAweCAweDYyNjE2YzYxNmU2MzY1NzM1ZiAweDcwNzI2Zjc2Njk2NDY1NjQ1ZiAweDYxNzM3MzY1NzQ3MyAweDc0NmY2YjY1NmUgMHg3NzY1Njk2NzY4NzQ3MzVmIDB4NjI3NTcyNmU2NTY0IDB4MTUxZjdjNzUgMHgwYTgxMDEgMHgwMDAwMDAwMDAwMDAwMDAwIDB4NmQ2MTZlNjE2NzY1NzIKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludGMgNSAvLyA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkCi8vCi8vIGNyZWF0ZUFwcGxpY2F0aW9uIG1ldGhvZCBjYWxsZWQgYXQgY3JlYXRpb24KY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyOQoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gdGhpcy5hcHAuY3JlYXRvcgoJYnl0ZWMgMTAgLy8gICJtYW5hZ2VyIgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMwCgkvLyB0aGlzLmJ1cm5lZC52YWx1ZSA9IDAKCWJ5dGVjIDYgLy8gICJidXJuZWQiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYm9vdHN0cmFwKHVpbnQ2NFtdLHVpbnQ2NFtdKXVpbnQ2NAoqYWJpX3JvdXRlX2Jvb3RzdHJhcDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgNyAvLyAweDE1MWY3Yzc1CgoJLy8gd2VpZ2h0czogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gYXNzZXRJZHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgYm9vdHN0cmFwKHVpbnQ2NFtdLHVpbnQ2NFtdKXVpbnQ2NAoJY2FsbHN1YiBib290c3RyYXAKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBib290c3RyYXAoYXNzZXRJZHM6IEFzc2V0SURbXSwgd2VpZ2h0czogdWludDY0W10pOiBBc3NldElECi8vCi8vIEJvb3RzdHJhcCB0aGUgcG9vbCBieSBhc3NpZ25pbmcgYXNzZXRzIGFuZCB3ZWlnaHRzLCBjcmVhdGUgdGhlIExQIHRva2VucwovLyBAcGFyYW0ge0Fzc2V0SURbXX0gYXNzZXRJZHMgLSBhc3NldHMgb2YgdGhlIHBvb2wKLy8gQHBhcmFtIHt1aW50NjRbXX0gd2VpZ2h0cyAtIHdlaWdodHMgb2YgdGhlIHBvb2wKLy8gQHJldHVybiB1aW50NjQgLSBMUCBUb2tlbiBjcmVhdGVkIElECmJvb3RzdHJhcDoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo0MAoJLy8gdGhpcy5hc3NlcnRJc01hbmFnZXIoKQoJY2FsbHN1YiBhc3NlcnRJc01hbmFnZXIKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo0MQoJLy8gYXNzZXJ0KGFzc2V0SWRzLmxlbmd0aCA+PSAyLCAnQXQgbGVhc3QgMiB0b2tlbnMgbmVlZGVkJykKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkczogQXNzZXRJRFtdCglsZW4KCWludGMgMSAvLyA4CgkvCglpbnRjIDggLy8gMgoJPj0KCgkvLyBBdCBsZWFzdCAyIHRva2VucyBuZWVkZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjQyCgkvLyBhc3NlcnQoYXNzZXRJZHMubGVuZ3RoID09PSB3ZWlnaHRzLmxlbmd0aCwgJ1dlaWdodHMgYW5kIEFzc2V0cyBsZW5ndGggbXVzdCBiZSB0aGUgc2FtZScpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJbGVuCglpbnRjIDEgLy8gOAoJLwoJZnJhbWVfZGlnIC0yIC8vIHdlaWdodHM6IHVpbnQ2NFtdCglsZW4KCWludGMgMSAvLyA4CgkvCgk9PQoKCS8vIFdlaWdodHMgYW5kIEFzc2V0cyBsZW5ndGggbXVzdCBiZSB0aGUgc2FtZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NDMKCS8vIHN1bU9mV2VpZ2h0cyA9IDAKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDAgLy8gc3VtT2ZXZWlnaHRzOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo0NQoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhc3NldElkcy5sZW5ndGg7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0CgoqZm9yXzA6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo0NQoJLy8gaSA8IGFzc2V0SWRzLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJbGVuCglpbnRjIDEgLy8gOAoJLwoJPAoJYnogKmZvcl8wX2VuZAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjQ2CgkvLyB0aGlzLm9wdEluKGFzc2V0SWRzW2ldKQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWRzOiBBc3NldElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMSAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMSAvLyA4CglleHRyYWN0MwoJYnRvaQoJY2FsbHN1YiBvcHRJbgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjQ3CgkvLyB0aGlzLmFkZFRva2VuKGksIGFzc2V0SWRzW2ldLCB3ZWlnaHRzW2ldKQoJZnJhbWVfZGlnIC0yIC8vIHdlaWdodHM6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkczogQXNzZXRJRFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJY2FsbHN1YiBhZGRUb2tlbgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjQ4CgkvLyBzdW1PZldlaWdodHMgKz0gd2VpZ2h0c1tpXQoJZnJhbWVfZGlnIDAgLy8gc3VtT2ZXZWlnaHRzOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyB3ZWlnaHRzOiB1aW50NjRbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCgkrCglmcmFtZV9idXJ5IDAgLy8gc3VtT2ZXZWlnaHRzOiB1aW50NjQKCipmb3JfMF9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjQ1CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAzIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKmZvcl8wCgoqZm9yXzBfZW5kOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NTEKCS8vIHRoaXMuYXNzZXRzLnZhbHVlID0gYXNzZXRJZHMKCWJ5dGVjIDMgLy8gICJhc3NldHMiCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJZHVwCglsZW4KCWludGMgMSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjUzCgkvLyBhc3NlcnQodGhpcy5hYnNEaWZmKHN1bU9mV2VpZ2h0cywgU0NBTEUpIDw9IDEsICdXZWlnaHRzIG11c3Qgc3VtIHRvIDEnKQoJaW50YyAyIC8vIDEwMDAwMDAKCWZyYW1lX2RpZyAwIC8vIHN1bU9mV2VpZ2h0czogdWludDY0CgljYWxsc3ViIGFic0RpZmYKCWludGMgMyAvLyAxCgk8PQoKCS8vIFdlaWdodHMgbXVzdCBzdW0gdG8gMQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NTQKCS8vIHRoaXMuY3JlYXRlVG9rZW4oKQoJY2FsbHN1YiBjcmVhdGVUb2tlbgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjU2CgkvLyByZXR1cm4gdGhpcy50b2tlbi52YWx1ZTsKCWJ5dGVjIDQgLy8gICJ0b2tlbiIKCWFwcF9nbG9iYWxfZ2V0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgovLyBhZGRMaXF1aWRpdHkodWludDY0LHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9hZGRMaXF1aWRpdHk6CgkvLyBzZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnRjIDcgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoc2VuZGVyKSBmb3IgYWRkTGlxdWlkaXR5IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBhZGRMaXF1aWRpdHkKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGFkZExpcXVpZGl0eShpbmRleDogdWludDY0LCBhbW91bnQ6IHVpbnQ2NCwgc2VuZGVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBQcm92aWRlIG9uZSB0b2tlbiBsaXF1aWRpdHkgdG8gdGhlIHBvb2wKLy8gQHBhcmFtIHt1aW50NjR9IGluZGV4IC0gaW5kZXggb2YgdGhlIHRva2VuIGluIHRoZSBwb29sCi8vIEBwYXJhbSB7dWludDY0fSBhbW91bnQgLSBhbW91bnQgb2YgdG9rZW4gc2VudAovLyBAcGFyYW0ge0FkZHJlc3N9IHNlbmRlciAtIHRoZSBzZW5kZXIKYWRkTGlxdWlkaXR5OgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo2NgoJLy8gdGhpcy5hc3NlcnRJc01hbmFnZXIoKQoJY2FsbHN1YiBhc3NlcnRJc01hbmFnZXIKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo2NwoJLy8gdGhpcy5hc3NlcnRJc0Jvb3RzdHJhcHBlZCgpCgljYWxsc3ViIGFzc2VydElzQm9vdHN0cmFwcGVkCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NjkKCS8vIGFzc2V0SWQgPSB0aGlzLmFzc2V0cy52YWx1ZVtpbmRleF0KCWJ5dGVjIDMgLy8gICJhc3NldHMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgLTEgLy8gaW5kZXg6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDAgLy8gYXNzZXRJZDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NzAKCS8vIGxvZygnQXNzZXQgSUQgPT4gJyArIGl0b2IoYXNzZXRJZCkpCglwdXNoYnl0ZXMgMHg0MTczNzM2NTc0MjA0OTQ0MjAzZDNlMjAgLy8gIkFzc2V0IElEID0+ICIKCWZyYW1lX2RpZyAwIC8vIGFzc2V0SWQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglsb2cKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo3MgoJLy8gdGhpcy5vcHRJbihhc3NldElkKQoJZnJhbWVfZGlnIDAgLy8gYXNzZXRJZDogdWludDY0CgljYWxsc3ViIG9wdEluCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NzMKCS8vIHRoaXMuYmFsYW5jZXMoYXNzZXRJZCkudmFsdWUgKz0gYW1vdW50CglieXRlYyAxIC8vICAiYmFsYW5jZXNfIgoJZnJhbWVfZGlnIDAgLy8gYXNzZXRJZDogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYmFsYW5jZXMoYXNzZXRJZCkudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CgkrCglieXRlYyAxIC8vICAiYmFsYW5jZXNfIgoJZnJhbWVfZGlnIDAgLy8gYXNzZXRJZDogdWludDY0CglpdG9iCgljb25jYXQKCXN3YXAKCWl0b2IKCWJveF9wdXQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6NzUKCS8vICF0aGlzLnByb3ZpZGVkKHNlbmRlcikuZXhpc3RzCglieXRlYyAyIC8vICAicHJvdmlkZWRfIgoJZnJhbWVfZGlnIC0zIC8vIHNlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo3NgoJLy8gdGhpcy5wcm92aWRlZChzZW5kZXIpLmNyZWF0ZSg2NCkKCWJ5dGVjIDIgLy8gICJwcm92aWRlZF8iCglmcmFtZV9kaWcgLTMgLy8gc2VuZGVyOiBBZGRyZXNzCgljb25jYXQKCXB1c2hpbnQgNjQKCWJveF9jcmVhdGUKCXBvcAoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czo3OQoJLy8gdGhpcy5wcm92aWRlZChzZW5kZXIpLnZhbHVlW2luZGV4XSArPSBhbW91bnQKCWJ5dGVjIDIgLy8gICJwcm92aWRlZF8iCglmcmFtZV9kaWcgLTMgLy8gc2VuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBpbmRleDogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglieXRlYyAyIC8vICAicHJvdmlkZWRfIgoJZnJhbWVfZGlnIC0zIC8vIHNlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb3ZpZGVkKHNlbmRlcikudmFsdWUKCWFzc2VydAoJZXh0cmFjdCAyIDAKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgLTEgLy8gaW5kZXg6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCSsKCWl0b2IKCXJlcGxhY2UzCglieXRlYyAyIC8vICAicHJvdmlkZWRfIgoJZnJhbWVfZGlnIC0zIC8vIHNlbmRlcjogQWRkcmVzcwoJY29uY2F0CglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJZHVwCglsZW4KCWludGMgMSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIGdldExpcXVpZGl0eShhZGRyZXNzKXVpbnQ2NAoqYWJpX3JvdXRlX2dldExpcXVpZGl0eToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgNyAvLyAweDE1MWY3Yzc1CgoJLy8gc2VuZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA3IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHNlbmRlcikgZm9yIGdldExpcXVpZGl0eSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBnZXRMaXF1aWRpdHkoYWRkcmVzcyl1aW50NjQKCWNhbGxzdWIgZ2V0TGlxdWlkaXR5CglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAzIC8vIDEKCXJldHVybgoKLy8gZ2V0TGlxdWlkaXR5KHNlbmRlcjogQWRkcmVzcyk6IHVpbnQ2NAovLwovLyBDb21wdXRlIHRoZSBsaXF1aWRpdHkgZm9yIHRoZSBnaXZlbiBzZW5kZXIgYmFzZWQgb24gdGhlIHN0YXRlCi8vIGluIHRoZSBjb250cmFjdAovLyBAcGFyYW0gc2VuZGVyIC0gdGhlIHNlbmRlcgpnZXRMaXF1aWRpdHk6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTA2CgkvLyB0aGlzLmFzc2VydElzTWFuYWdlcigpCgljYWxsc3ViIGFzc2VydElzTWFuYWdlcgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEwNwoJLy8gdGhpcy5hc3NlcnRJc0Jvb3RzdHJhcHBlZCgpCgljYWxsc3ViIGFzc2VydElzQm9vdHN0cmFwcGVkCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTA5CgkvLyBwcm92aWRlZCA9IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZQoJYnl0ZWMgMiAvLyAgInByb3ZpZGVkXyIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm92aWRlZAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExMAoJLy8gdG90YWxBc3NldHMgPSAwCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAxIC8vIHRvdGFsQXNzZXRzOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxMTEKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvdmlkZWQubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoKKmZvcl8xOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTExCgkvLyBpIDwgcHJvdmlkZWQubGVuZ3RoCglmcmFtZV9kaWcgMiAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm92aWRlZAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wcm92aWRlZChzZW5kZXIpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglsZW4KCWludGMgMSAvLyA4CgkvCgk8CglieiAqZm9yXzFfZW5kCgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExMgoJLy8gcHJvdmlkZWRbaV0gPiAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vcHJvdmlkZWQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglpbnRjIDAgLy8gMAoJPgoJYnogKmlmMV9lbmQKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExMwoJLy8gdG90YWxBc3NldHMgKz0gMQoJZnJhbWVfZGlnIDEgLy8gdG90YWxBc3NldHM6IHVpbnQ2NAoJaW50YyAzIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyB0b3RhbEFzc2V0czogdWludDY0CgoqaWYxX2VuZDoKCipmb3JfMV9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExMQoJLy8gaSArPSAxCglmcmFtZV9kaWcgMiAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCgkrCglmcmFtZV9idXJ5IDIgLy8gaTogdWludDY0CgliICpmb3JfMQoKKmZvcl8xX2VuZDoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExNwoJLy8gYW1vdW50OiB1aW50NjQgPSAwCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAzIC8vIGFtb3VudDogdWludDY0CgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjExOQoJLy8gdGhpcy50b3RhbExQKCkgPT09IDAKCWNhbGxzdWIgdG90YWxMUAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYyX2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxMjEKCS8vIGFtb3VudCA9IEFNT1VOVF9MUF9ERVBMT1lFUgoJcHVzaGludCAxXzAwMF8wMDAKCWludGMgNCAvLyAxMAoJaW50YyA1IC8vIDYKCWV4cAoJKgoJZnJhbWVfYnVyeSAzIC8vIGFtb3VudDogdWludDY0CgliICppZjJfZW5kCgoqaWYyX2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTIyCgkvLyB0b3RhbEFzc2V0cyA9PT0gdGhpcy5hc3NldHMudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgMSAvLyB0b3RhbEFzc2V0czogdWludDY0CglieXRlYyAzIC8vICAiYXNzZXRzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglsZW4KCWludGMgMSAvLyA4CgkvCgk9PQoJYnogKmlmMl9lbHNlaWYyX2NvbmRpdGlvbgoKCS8vICppZjJfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxMjQKCS8vIGFtb3VudCA9IHRoaXMuY29tcHV0ZUFsbEFzc2V0c0xpcXVpZGl0eShzZW5kZXIpCglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCgljYWxsc3ViIGNvbXB1dGVBbGxBc3NldHNMaXF1aWRpdHkKCWZyYW1lX2J1cnkgMyAvLyBhbW91bnQ6IHVpbnQ2NAoJYiAqaWYyX2VuZAoKKmlmMl9lbHNlaWYyX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEyNQoJLy8gdG90YWxBc3NldHMgPT09IDEKCWZyYW1lX2RpZyAxIC8vIHRvdGFsQXNzZXRzOiB1aW50NjQKCWludGMgMyAvLyAxCgk9PQoJYnogKmlmMl9lbHNlCgoJLy8gKmlmMl9lbHNlaWYyX2NvbnNlcXVlbnQKCWIgKmlmMl9lbmQKCippZjJfZWxzZToKCippZjJfZW5kOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTMxCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZS5sZW5ndGg7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDQgLy8gaTogdWludDY0CgoqZm9yXzI6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxMzEKCS8vIGkgPCB0aGlzLnByb3ZpZGVkKHNlbmRlcikudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWJ5dGVjIDIgLy8gICJwcm92aWRlZF8iCglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglleHRyYWN0IDIgMAoJbGVuCglpbnRjIDEgLy8gOAoJLwoJPAoJYnogKmZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEzMgoJLy8gdGhpcy5wcm92aWRlZChzZW5kZXIpLnZhbHVlW2ldID0gMAoJYnl0ZWMgMiAvLyAgInByb3ZpZGVkXyIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wcm92aWRlZChzZW5kZXIpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglieXRlYyA5IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJcmVwbGFjZTMKCWJ5dGVjIDIgLy8gICJwcm92aWRlZF8iCglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglkdXAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJveF9wdXQKCipmb3JfMl9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEzMQoJLy8gaSArPSAxCglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCgkrCglmcmFtZV9idXJ5IDQgLy8gaTogdWludDY0CgliICpmb3JfMgoKKmZvcl8yX2VuZDoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEzNQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogc2VuZGVyLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbi52YWx1ZSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA2IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjEzNgoJLy8gYXNzZXRSZWNlaXZlcjogc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxMzcKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAzIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTM4CgkvLyB4ZmVyQXNzZXQ6IHRoaXMudG9rZW4udmFsdWUKCWJ5dGVjIDQgLy8gICJ0b2tlbiIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNDEKCS8vIHJldHVybiBhbW91bnQ7CglmcmFtZV9kaWcgMyAvLyBhbW91bnQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDQKCXJldHN1YgoKLy8gYnVybkxpcXVpZGl0eShhZGRyZXNzLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYnVybkxpcXVpZGl0eToKCS8vIGFtb3VudExQOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBzZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDcgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoc2VuZGVyKSBmb3IgYnVybkxpcXVpZGl0eSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBidXJuTGlxdWlkaXR5KGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgYnVybkxpcXVpZGl0eQoJaW50YyAzIC8vIDEKCXJldHVybgoKLy8gYnVybkxpcXVpZGl0eShzZW5kZXI6IEFkZHJlc3MsIGFtb3VudExQOiB1aW50NjQpOiB2b2lkCmJ1cm5MaXF1aWRpdHk6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA1CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTQ1CgkvLyB0aGlzLmFzc2VydElzTWFuYWdlcigpCgljYWxsc3ViIGFzc2VydElzTWFuYWdlcgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE0NgoJLy8gdGhpcy5hc3NlcnRJc0Jvb3RzdHJhcHBlZCgpCgljYWxsc3ViIGFzc2VydElzQm9vdHN0cmFwcGVkCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTQ3CgkvLyBhc3NlcnQoYW1vdW50TFAgPiAwLCAnTXVzdCBidXJuIHBvc2l0aXZlIGFtb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50TFA6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCgkvLyBNdXN0IGJ1cm4gcG9zaXRpdmUgYW1vdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNDkKCS8vIHRvdGFsTFAgPSB0aGlzLnRvdGFsTFAoKQoJY2FsbHN1YiB0b3RhbExQCglmcmFtZV9idXJ5IDAgLy8gdG90YWxMUDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTUwCgkvLyBudW1Bc3NldHMgPSB0aGlzLmFzc2V0cy52YWx1ZS5sZW5ndGgKCWJ5dGVjIDMgLy8gICJhc3NldHMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWZyYW1lX2J1cnkgMSAvLyBudW1Bc3NldHM6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE1MgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Bc3NldHM7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDIgLy8gaTogdWludDY0CgoqZm9yXzM6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNTIKCS8vIGkgPCBudW1Bc3NldHMKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gbnVtQXNzZXRzOiB1aW50NjQKCTwKCWJ6ICpmb3JfM19lbmQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNTMKCS8vIGFzc2V0SWQgPSB0aGlzLmFzc2V0cy52YWx1ZVtpXQoJYnl0ZWMgMyAvLyAgImFzc2V0cyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDMgLy8gYXNzZXRJZDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTU0CgkvLyBwb29sQmFsYW5jZSA9IHRoaXMuYmFsYW5jZXMoYXNzZXRJZCkudmFsdWUKCWJ5dGVjIDEgLy8gICJiYWxhbmNlc18iCglmcmFtZV9kaWcgMyAvLyBhc3NldElkOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5iYWxhbmNlcyhhc3NldElkKS52YWx1ZQoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDQgLy8gcG9vbEJhbGFuY2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE1NgoJLy8gYXNzZXRBbW91bnQgPSB3aWRlUmF0aW8oW2Ftb3VudExQLCBwb29sQmFsYW5jZV0sIFt0b3RhbExQXSkKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRMUDogdWludDY0CglmcmFtZV9kaWcgNCAvLyBwb29sQmFsYW5jZTogdWludDY0CgltdWx3CglpbnRjIDAgLy8gMAoJZnJhbWVfZGlnIDAgLy8gdG90YWxMUDogdWludDY0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSA1IC8vIGFzc2V0QW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNTgKCS8vIHRoaXMuYmFsYW5jZXMoYXNzZXRJZCkudmFsdWUgPSBwb29sQmFsYW5jZSAtIGFzc2V0QW1vdW50CglieXRlYyAxIC8vICAiYmFsYW5jZXNfIgoJZnJhbWVfZGlnIDMgLy8gYXNzZXRJZDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyA0IC8vIHBvb2xCYWxhbmNlOiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIGFzc2V0QW1vdW50OiB1aW50NjQKCS0KCWl0b2IKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNjAKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgYXNzZXRSZWNlaXZlcjogc2VuZGVyLAoJLy8gICAgICAgICBhc3NldEFtb3VudDogYXNzZXRBbW91bnQsCgkvLyAgICAgICAgIHhmZXJBc3NldDogYXNzZXRJZCwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDYgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTYxCgkvLyBhc3NldFJlY2VpdmVyOiBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE2MgoJLy8gYXNzZXRBbW91bnQ6IGFzc2V0QW1vdW50CglmcmFtZV9kaWcgNSAvLyBhc3NldEFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTYzCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0SWQKCWZyYW1lX2RpZyAzIC8vIGFzc2V0SWQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqZm9yXzNfY29udGludWU6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNTIKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDIgLy8gaTogdWludDY0CglpbnRjIDMgLy8gMQoJKwoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzMKCipmb3JfM19lbmQ6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNjcKCS8vIHRoaXMuYnVybmVkLnZhbHVlICs9IGFtb3VudExQCglieXRlYyA2IC8vICAiYnVybmVkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRMUDogdWludDY0CgkrCglieXRlYyA2IC8vICAiYnVybmVkIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc3dhcChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NAoqYWJpX3JvdXRlX3N3YXA6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDcgLy8gMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gdG86IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGZyb206IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHNlbmRlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgNyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAzIChzZW5kZXIpIGZvciBzd2FwIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHN3YXAoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgc3dhcAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIHN3YXAoc2VuZGVyOiBBZGRyZXNzLCBmcm9tOiB1aW50NjQsIHRvOiB1aW50NjQsIGFtb3VudDogdWludDY0KTogdWludDY0Ci8vCi8vIFN3YXAgdGhlIHRva2VuIGZyb20gZm9yIHRoZSB0b2tlbiB0bwovLyBAcGFyYW0ge0FkZHJlc3N9IHNlbmRlcgovLyBAcGFyYW0ge3VpbnQ2NH0gZnJvbQovLyBAcGFyYW0ge3VpbnQ2NH0gdG8KLy8gQHBhcmFtIHt1aW50NjR9IGFtb3VudApzd2FwOgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE3OAoJLy8gdGhpcy5hc3NlcnRJc01hbmFnZXIoKQoJY2FsbHN1YiBhc3NlcnRJc01hbmFnZXIKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxNzkKCS8vIHRoaXMuYXNzZXJ0SXNCb290c3RyYXBwZWQoKQoJY2FsbHN1YiBhc3NlcnRJc0Jvb3RzdHJhcHBlZAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE4MQoJLy8gYXNzZXRJbiA9IHRoaXMuYXNzZXRzLnZhbHVlW2Zyb21dCglieXRlYyAzIC8vICAiYXNzZXRzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIC0yIC8vIGZyb206IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDAgLy8gYXNzZXRJbjogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTgyCgkvLyBhc3NldE91dCA9IHRoaXMuYXNzZXRzLnZhbHVlW3RvXQoJYnl0ZWMgMyAvLyAgImFzc2V0cyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0bzogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgMSAvLyBhc3NldE91dDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTg0CgkvLyBiYWxhbmNlSW4gPSB0aGlzLmJhbGFuY2VzKGFzc2V0SW4pLnZhbHVlCglieXRlYyAxIC8vICAiYmFsYW5jZXNfIgoJZnJhbWVfZGlnIDAgLy8gYXNzZXRJbjogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYmFsYW5jZXMoYXNzZXRJbikudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfYnVyeSAyIC8vIGJhbGFuY2VJbjogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTg1CgkvLyBiYWxhbmNlT3V0ID0gdGhpcy5iYWxhbmNlcyhhc3NldE91dCkudmFsdWUKCWJ5dGVjIDEgLy8gICJiYWxhbmNlc18iCglmcmFtZV9kaWcgMSAvLyBhc3NldE91dDogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYmFsYW5jZXMoYXNzZXRPdXQpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2J1cnkgMyAvLyBiYWxhbmNlT3V0OiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxODcKCS8vIHdlaWdodEluID0gdGhpcy53ZWlnaHRzKGZyb20pLnZhbHVlCglieXRlYyA1IC8vICAid2VpZ2h0c18iCglmcmFtZV9kaWcgLTIgLy8gZnJvbTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMud2VpZ2h0cyhmcm9tKS52YWx1ZQoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDQgLy8gd2VpZ2h0SW46IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE4OAoJLy8gd2VpZ2h0T3V0ID0gdGhpcy53ZWlnaHRzKHRvKS52YWx1ZQoJYnl0ZWMgNSAvLyAgIndlaWdodHNfIgoJZnJhbWVfZGlnIC0zIC8vIHRvOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy53ZWlnaHRzKHRvKS52YWx1ZQoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDUgLy8gd2VpZ2h0T3V0OiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxOTAKCS8vIGxvZyhpdG9iKGJhbGFuY2VJbikpCglmcmFtZV9kaWcgMiAvLyBiYWxhbmNlSW46IHVpbnQ2NAoJaXRvYgoJbG9nCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTkxCgkvLyBsb2coaXRvYihiYWxhbmNlT3V0KSkKCWZyYW1lX2RpZyAzIC8vIGJhbGFuY2VPdXQ6IHVpbnQ2NAoJaXRvYgoJbG9nCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTkyCgkvLyBsb2coaXRvYih3ZWlnaHRJbikpCglmcmFtZV9kaWcgNCAvLyB3ZWlnaHRJbjogdWludDY0CglpdG9iCglsb2cKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxOTMKCS8vIGxvZyhpdG9iKHdlaWdodE91dCkpCglmcmFtZV9kaWcgNSAvLyB3ZWlnaHRPdXQ6IHVpbnQ2NAoJaXRvYgoJbG9nCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MTk1CgkvLyBhbW91bnRPdXQgPSB0aGlzLmNhbGNPdXQoYmFsYW5jZUluLCB3ZWlnaHRJbiwgYmFsYW5jZU91dCwgd2VpZ2h0T3V0LCBhbW91bnQpCglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIHdlaWdodE91dDogdWludDY0CglmcmFtZV9kaWcgMyAvLyBiYWxhbmNlT3V0OiB1aW50NjQKCWZyYW1lX2RpZyA0IC8vIHdlaWdodEluOiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VJbjogdWludDY0CgljYWxsc3ViIGNhbGNPdXQKCWZyYW1lX2J1cnkgNiAvLyBhbW91bnRPdXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjE5NwoJLy8gbG9nKGl0b2IoYW1vdW50T3V0KSkKCWZyYW1lX2RpZyA2IC8vIGFtb3VudE91dDogdWludDY0CglpdG9iCglsb2cKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoxOTkKCS8vIHRoaXMuYmFsYW5jZXMoYXNzZXRJbikudmFsdWUgPSBiYWxhbmNlSW4gKyBhbW91bnQKCWJ5dGVjIDEgLy8gICJiYWxhbmNlc18iCglmcmFtZV9kaWcgMCAvLyBhc3NldEluOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDIgLy8gYmFsYW5jZUluOiB1aW50NjQKCWZyYW1lX2RpZyAtNCAvLyBhbW91bnQ6IHVpbnQ2NAoJKwoJaXRvYgoJYm94X3B1dAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIwMAoJLy8gdGhpcy5iYWxhbmNlcyhhc3NldE91dCkudmFsdWUgPSBiYWxhbmNlT3V0IC0gYW1vdW50T3V0CglieXRlYyAxIC8vICAiYmFsYW5jZXNfIgoJZnJhbWVfZGlnIDEgLy8gYXNzZXRPdXQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMyAvLyBiYWxhbmNlT3V0OiB1aW50NjQKCWZyYW1lX2RpZyA2IC8vIGFtb3VudE91dDogdWludDY0CgktCglpdG9iCglib3hfcHV0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjAyCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiBzZW5kZXIsCgkvLyAgICAgICBhc3NldEFtb3VudDogYW1vdW50T3V0LAoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldE91dCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA2IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIwMwoJLy8gYXNzZXRSZWNlaXZlcjogc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMDQKCS8vIGFzc2V0QW1vdW50OiBhbW91bnRPdXQKCWZyYW1lX2RpZyA2IC8vIGFtb3VudE91dDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjA1CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0T3V0CglmcmFtZV9kaWcgMSAvLyBhc3NldE91dDogdWludDY0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMDgKCS8vIHJldHVybiBhbW91bnRPdXQ7CglmcmFtZV9kaWcgNiAvLyBhbW91bnRPdXQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDYKCXJldHN1YgoKLy8gb3B0SW4oYXNzZXRJZDogQXNzZXRJRCk6IHZvaWQKb3B0SW46Cglwcm90byAxIDAKCgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjEyCgkvLyB0aGlzLmFwcC5hZGRyZXNzLmlzT3B0ZWRJblRvQXNzZXQoYXNzZXRJZCkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCWJ6ICppZjNfZW5kCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMTMKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmM19lbmQ6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMTYKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA2IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIxNwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIxOAoJLy8geGZlckFzc2V0OiBhc3NldElkCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMTkKCS8vIGFzc2V0QW1vdW50OiAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gYWRkVG9rZW4oaW5kZXg6IHVpbnQ2NCwgYXNzZXRJRDogQXNzZXRJRCwgd2VpZ2h0OiB1aW50NjQpOiB2b2lkCi8vCi8vICoqKioqKioqKioqKioqKioqKioKLy8gU1VCUk9VVElORVMKLy8gKioqKioqKioqKioqKioqKioqKgovLwovLyBBZGQgYSB0b2tlbiBieSBzZXR0aW5nIGJhbGFuY2VzIGFuZCB3ZWlnaHRzIGFzc29jaWF0ZWQKLy8gaW4gdGhlaXIgYm94CmFkZFRva2VuOgoJcHJvdG8gMyAwCgoJLy8gKmlmNF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIzMgoJLy8gIXRoaXMud2VpZ2h0cyhpbmRleCkuZXhpc3RzCglieXRlYyA1IC8vICAid2VpZ2h0c18iCglmcmFtZV9kaWcgLTEgLy8gaW5kZXg6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6ICppZjRfZW5kCgoJLy8gKmlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMzMKCS8vIHRoaXMud2VpZ2h0cyhpbmRleCkuY3JlYXRlKDgpCglieXRlYyA1IC8vICAid2VpZ2h0c18iCglmcmFtZV9kaWcgLTEgLy8gaW5kZXg6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglpbnRjIDEgLy8gOAoJYm94X2NyZWF0ZQoJcG9wCgoqaWY0X2VuZDoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyMzYKCS8vICF0aGlzLmJhbGFuY2VzKGFzc2V0SUQpLmV4aXN0cwoJYnl0ZWMgMSAvLyAgImJhbGFuY2VzXyIKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElEOiBBc3NldElECglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYnogKmlmNV9lbmQKCgkvLyAqaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjIzNwoJLy8gdGhpcy5iYWxhbmNlcyhhc3NldElEKS5jcmVhdGUoOCkKCWJ5dGVjIDEgLy8gICJiYWxhbmNlc18iCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJRDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglpbnRjIDEgLy8gOAoJYm94X2NyZWF0ZQoJcG9wCgoqaWY1X2VuZDoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI0MAoJLy8gdGhpcy53ZWlnaHRzKGluZGV4KS52YWx1ZSA9IHdlaWdodAoJYnl0ZWMgNSAvLyAgIndlaWdodHNfIgoJZnJhbWVfZGlnIC0xIC8vIGluZGV4OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHdlaWdodDogdWludDY0CglpdG9iCglib3hfcHV0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjQxCgkvLyB0aGlzLmJhbGFuY2VzKGFzc2V0SUQpLnZhbHVlID0gMAoJYnl0ZWMgMSAvLyAgImJhbGFuY2VzXyIKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElEOiBBc3NldElECglpdG9iCgljb25jYXQKCWJ5dGVjIDkgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZVRva2VuKCk6IHZvaWQKLy8KLy8gQ3JlYXRlIHRoZSBMUCB0b2tlbnMgZm9yIHRoaXMgcG9vbApjcmVhdGVUb2tlbjoKCXByb3RvIDAgMAoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNDgKCS8vIHRoaXMudG9rZW4udmFsdWUgPT09IEFzc2V0SUQuemVyb0luZGV4CglieXRlYyA0IC8vICAidG9rZW4iCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CglieiAqaWY2X2VuZAoKCS8vICppZjZfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjQ5CgkvLyB0aGlzLnRva2VuLnZhbHVlID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgICBjb25maWdBc3NldFRvdGFsOiBUT1RBTF9MUF9TVVBQTFksCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDYsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldENsYXdiYWNrOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldEZyZWV6ZTogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgY29uZmlnQXNzZXREZWZhdWx0RnJvemVuOiAwLAoJLy8gICAgICAgICBjb25maWdBc3NldE5hbWU6ICdCYWxhbmNlZFBvb2wtJyArIHRoaXMuYXBwLmlkLnRvU3RyaW5nKCksCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdMUCcsCgkvLyAgICAgICB9KQoJYnl0ZWMgNCAvLyAgInRva2VuIgoJaXR4bl9iZWdpbgoJcHVzaGludCAzIC8vIGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNTAKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IFRPVEFMX0xQX1NVUFBMWQoJaW50YyA0IC8vIDEwCglwdXNoaW50IDE2CglleHAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI1MQoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogNgoJaW50YyA1IC8vIDYKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI1MgoJLy8gY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNTMKCS8vIGNvbmZpZ0Fzc2V0TWFuYWdlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjU0CgkvLyBjb25maWdBc3NldENsYXdiYWNrOiBnbG9iYWxzLnplcm9BZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI1NQoJLy8gY29uZmlnQXNzZXRGcmVlemU6IGdsb2JhbHMuemVyb0FkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI1NgoJLy8gY29uZmlnQXNzZXREZWZhdWx0RnJvemVuOiAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNTcKCS8vIGNvbmZpZ0Fzc2V0TmFtZTogJ0JhbGFuY2VkUG9vbC0nICsgdGhpcy5hcHAuaWQudG9TdHJpbmcoKQoJcHVzaGJ5dGVzIDB4NDI2MTZjNjE2ZTYzNjU2NDUwNmY2ZjZjMmQgLy8gIkJhbGFuY2VkUG9vbC0iCgl0eG5hIEFwcGxpY2F0aW9ucyAwCgljYWxsc3ViICppdG9hCgljb25jYXQKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjU4CgkvLyBjb25maWdBc3NldFVuaXROYW1lOiAnTFAnCglwdXNoYnl0ZXMgMHg0YzUwIC8vICJMUCIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CgoqaWY2X2VuZDoKCXJldHN1YgoKLy8gYXNzZXJ0SXNNYW5hZ2VyKCk6IHZvaWQKLy8KLy8gQXNzZXJ0IHRoZSB0eCBzZW5kZXIgaXMgdGhlIG1hbmFnZXIKYXNzZXJ0SXNNYW5hZ2VyOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjY3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDEwIC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoJcmV0c3ViCgovLyBhc3NlcnRJc0Jvb3RzdHJhcHBlZCgpOiB2b2lkCmFzc2VydElzQm9vdHN0cmFwcGVkOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjcxCgkvLyBhc3NlcnQodGhpcy50b2tlbi52YWx1ZSAhPT0gQXNzZXRJRC56ZXJvSW5kZXgsICdwb29sIG5vdCBib290c3RyYXBwZWQnKQoJYnl0ZWMgNCAvLyAgInRva2VuIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgkhPQoKCS8vIHBvb2wgbm90IGJvb3RzdHJhcHBlZAoJYXNzZXJ0CglyZXRzdWIKCi8vIGxuV2l0aFNpZ24oeDogdWludDY0KTogdWludDY0W10KbG5XaXRoU2lnbjoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDcKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNzUKCS8vIGFzc2VydCh4ID4gMCwgJ2xvZyB1bmRlZmluZWQgZm9yIHgg4omkIDAnKQoJZnJhbWVfZGlnIC0xIC8vIHg6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCgkvLyBsb2cgdW5kZWZpbmVkIGZvciB4IOKJpCAwCglhc3NlcnQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyNzcKCS8vIG5lZ2F0aXZlOiB1aW50NjQgPSAwCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIG5lZ2F0aXZlOiB1aW50NjQKCgkvLyAqaWY3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjgwCgkvLyB4IDwgU0NBTEUKCWZyYW1lX2RpZyAtMSAvLyB4OiB1aW50NjQKCWludGMgMiAvLyAxMDAwMDAwCgk8CglieiAqaWY3X2Vsc2UKCgkvLyAqaWY3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI4MQoJLy8gbmVnYXRpdmUgPSAxCglpbnRjIDMgLy8gMQoJZnJhbWVfYnVyeSAwIC8vIG5lZ2F0aXZlOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czoyODIKCS8vIGludlggPSB3aWRlUmF0aW8oW1NDQUxFLCBTQ0FMRV0sIFt4XSkKCWludGMgMiAvLyAxMDAwMDAwCglkdXAKCW11bHcKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgLTEgLy8geDogdWludDY0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSAyIC8vIGludlg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI4MwoJLy8geiA9IHdpZGVSYXRpbyhbaW52WCAtIFNDQUxFLCBTQ0FMRV0sIFtpbnZYXSkKCWZyYW1lX2RpZyAyIC8vIGludlg6IHVpbnQ2NAoJaW50YyAyIC8vIDEwMDAwMDAKCS0KCWludGMgMiAvLyAxMDAwMDAwCgltdWx3CglpbnRjIDAgLy8gMAoJZnJhbWVfZGlnIDIgLy8gaW52WDogdWludDY0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIHo6IHVpbnQ2NAoJYiAqaWY3X2VuZAoKKmlmN19lbHNlOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjg1CgkvLyB6ID0gd2lkZVJhdGlvKFt4IC0gU0NBTEUsIFNDQUxFXSwgW3hdKQoJZnJhbWVfZGlnIC0xIC8vIHg6IHVpbnQ2NAoJaW50YyAyIC8vIDEwMDAwMDAKCS0KCWludGMgMiAvLyAxMDAwMDAwCgltdWx3CglpbnRjIDAgLy8gMAoJZnJhbWVfZGlnIC0xIC8vIHg6IHVpbnQ2NAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgMSAvLyB6OiB1aW50NjQKCippZjdfZW5kOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjg4CgkvLyByZXN1bHQgPSB6CglmcmFtZV9kaWcgMSAvLyB6OiB1aW50NjQKCWZyYW1lX2J1cnkgMyAvLyByZXN1bHQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI4OQoJLy8gdGVybSA9IHoKCWZyYW1lX2RpZyAxIC8vIHo6IHVpbnQ2NAoJZnJhbWVfYnVyeSA0IC8vIHRlcm06IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI5MAoJLy8gbmVnID0gZmFsc2UKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDUgLy8gbmVnOiBib29sCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MjkyCgkvLyBpbmNyZWFzZU9wY29kZUJ1ZGdldCgpCglpdHhuX2JlZ2luCglpbnRjIDUgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJYnl0ZWMgOCAvLyAgI3ByYWdtYSB2ZXJzaW9uIDEwOyBpbnQgMQoJZHVwCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoJaW50YyA5IC8vICBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjk0CgkvLyBmb3IgKGxldCBpID0gMjsgaSA8PSAxMDsgaSA9IGkgKyAxKQoJaW50YyA4IC8vIDIKCWZyYW1lX2J1cnkgNiAvLyBpOiB1aW50NjQKCipmb3JfNDoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI5NAoJLy8gaSA8PSAxMAoJZnJhbWVfZGlnIDYgLy8gaTogdWludDY0CglpbnRjIDQgLy8gMTAKCTw9CglieiAqZm9yXzRfZW5kCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjk1CgkvLyB0ZXJtID0gd2lkZVJhdGlvKFt0ZXJtLCB6XSwgW1NDQUxFXSkKCWZyYW1lX2RpZyA0IC8vIHRlcm06IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gejogdWludDY0CgltdWx3CglpbnRjIDAgLy8gMAoJaW50YyAyIC8vIDEwMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDQgLy8gdGVybTogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjk2CgkvLyBkZWx0YSA9IHdpZGVSYXRpbyhbdGVybV0sIFtpXSkKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgNCAvLyB0ZXJtOiB1aW50NjQKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgNiAvLyBpOiB1aW50NjQKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDcgLy8gZGVsdGE6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI5NwoJLy8gcmVzdWx0ID0gbmVnID8gcmVzdWx0IC0gZGVsdGEgOiByZXN1bHQgKyBkZWx0YQoJZnJhbWVfZGlnIDUgLy8gbmVnOiBib29sCglieiAqdGVybmFyeTBfZmFsc2UKCWZyYW1lX2RpZyAzIC8vIHJlc3VsdDogdWludDY0CglmcmFtZV9kaWcgNyAvLyBkZWx0YTogdWludDY0CgktCgliICp0ZXJuYXJ5MF9lbmQKCip0ZXJuYXJ5MF9mYWxzZToKCWZyYW1lX2RpZyAzIC8vIHJlc3VsdDogdWludDY0CglmcmFtZV9kaWcgNyAvLyBkZWx0YTogdWludDY0CgkrCgoqdGVybmFyeTBfZW5kOgoJZnJhbWVfYnVyeSAzIC8vIHJlc3VsdDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mjk4CgkvLyBuZWcgPSAhbmVnCglmcmFtZV9kaWcgNSAvLyBuZWc6IGJvb2wKCSEKCWZyYW1lX2J1cnkgNSAvLyBuZWc6IGJvb2wKCipmb3JfNF9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjI5NAoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgNiAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCgkrCglmcmFtZV9idXJ5IDYgLy8gaTogdWludDY0CgliICpmb3JfNAoKKmZvcl80X2VuZDoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMwMQoJLy8gcmV0dXJuIFtuZWdhdGl2ZSwgcmVzdWx0XTsKCWZyYW1lX2RpZyAwIC8vIG5lZ2F0aXZlOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAzIC8vIHJlc3VsdDogdWludDY0CglpdG9iCgljb25jYXQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA3CglyZXRzdWIKCi8vIGV4cCh4OiB1aW50NjQpOiB1aW50NjQKZXhwOgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMwNQoJLy8gcmVzdWx0ID0gU0NBTEUKCWludGMgMiAvLyAxMDAwMDAwCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMDYKCS8vIHRlcm0gPSBTQ0FMRQoJaW50YyAyIC8vIDEwMDAwMDAKCWZyYW1lX2J1cnkgMSAvLyB0ZXJtOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMDgKCS8vIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpID0gaSArIDEpCglpbnRjIDMgLy8gMQoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoKKmZvcl81OgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzA4CgkvLyBpIDw9IDEwCglmcmFtZV9kaWcgMiAvLyBpOiB1aW50NjQKCWludGMgNCAvLyAxMAoJPD0KCWJ6ICpmb3JfNV9lbmQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMDkKCS8vIHRlcm0gPSB3aWRlUmF0aW8oW3Rlcm0sIHhdLCBbaSAqIFNDQUxFXSkKCWZyYW1lX2RpZyAxIC8vIHRlcm06IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHg6IHVpbnQ2NAoJbXVsdwoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDEwMDAwMDAKCSoKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDEgLy8gdGVybTogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzEwCgkvLyByZXN1bHQgKz0gdGVybQoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHRlcm06IHVpbnQ2NAoJKwoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogdWludDY0CgoqZm9yXzVfY29udGludWU6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMDgKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIDIgLy8gaTogdWludDY0CglpbnRjIDMgLy8gMQoJKwoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzUKCipmb3JfNV9lbmQ6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMTMKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gcG93KHg6IHVpbnQ2NCwgeTogdWludDY0KTogdWludDY0CnBvdzoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDQKCgkvLyAqaWY4X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzE3CgkvLyB4ID09PSAwCglmcmFtZV9kaWcgLTEgLy8geDogdWludDY0CglpbnRjIDAgLy8gMAoJPT0KCWJ6ICppZjhfZW5kCgoJLy8gKmlmOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMTcKCS8vIHJldHVybiAwOwoJaW50YyAwIC8vIDAKCWIgKnBvdypyZXR1cm4KCippZjhfZW5kOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzE5CgkvLyBsblhSZXN1bHQgPSB0aGlzLmxuV2l0aFNpZ24oeCkKCWZyYW1lX2RpZyAtMSAvLyB4OiB1aW50NjQKCWNhbGxzdWIgbG5XaXRoU2lnbgoJZnJhbWVfYnVyeSAwIC8vIGxuWFJlc3VsdDogdWludDY0W10KCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMjAKCS8vIG5lZ2F0aXZlTG4gPSBsblhSZXN1bHRbMF0KCWZyYW1lX2RpZyAwIC8vIGxuWFJlc3VsdDogdWludDY0W10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfYnVyeSAxIC8vIG5lZ2F0aXZlTG46IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMyMQoJLy8gbG5YID0gbG5YUmVzdWx0WzFdCglmcmFtZV9kaWcgMCAvLyBsblhSZXN1bHQ6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA4IDgKCWJ0b2kKCWZyYW1lX2J1cnkgMiAvLyBsblg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMyMwoJLy8geWxuWCA9IHdpZGVSYXRpbyhbeSwgbG5YXSwgW1NDQUxFXSkKCWZyYW1lX2RpZyAtMiAvLyB5OiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIGxuWDogdWludDY0CgltdWx3CglpbnRjIDAgLy8gMAoJaW50YyAyIC8vIDEwMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDMgLy8geWxuWDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzI1CgkvLyBleHBSZXN1bHQgPSB0aGlzLmV4cCh5bG5YKQoJZnJhbWVfZGlnIDMgLy8geWxuWDogdWludDY0CgljYWxsc3ViIGV4cAoJZnJhbWVfYnVyeSA0IC8vIGV4cFJlc3VsdDogdWludDY0CgoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjMyNwoJLy8gbmVnYXRpdmVMbiA9PT0gMQoJZnJhbWVfZGlnIDEgLy8gbmVnYXRpdmVMbjogdWludDY0CglpbnRjIDMgLy8gMQoJPT0KCWJ6ICppZjlfZW5kCgoJLy8gKmlmOV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozMjgKCS8vIHJldHVybiB3aWRlUmF0aW8oW1NDQUxFLCBTQ0FMRV0sIFtleHBSZXN1bHRdKTsKCWludGMgMiAvLyAxMDAwMDAwCglkdXAKCW11bHcKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgNCAvLyBleHBSZXN1bHQ6IHVpbnQ2NAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWIgKnBvdypyZXR1cm4KCippZjlfZW5kOgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzMxCgkvLyByZXR1cm4gZXhwUmVzdWx0OwoJZnJhbWVfZGlnIDQgLy8gZXhwUmVzdWx0OiB1aW50NjQKCipwb3cqcmV0dXJuOgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNAoJcmV0c3ViCgovLyBjYWxjT3V0KGJhbGFuY2VJbjogdWludDY0LCB3ZWlnaHRJbjogdWludDY0LCBiYWxhbmNlT3V0OiB1aW50NjQsIHdlaWdodE91dDogdWludDY0LCBhbW91bnRJbjogdWludDY0KTogdWludDY0CmNhbGNPdXQ6Cglwcm90byA1IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzQzCgkvLyBhbW91bnRJbldpdGhGZWUgPSB3aWRlUmF0aW8oW2Ftb3VudEluLCBTQ0FMRSAtIGZlZV0sIFtTQ0FMRV0pCglmcmFtZV9kaWcgLTUgLy8gYW1vdW50SW46IHVpbnQ2NAoJcHVzaGludCA5OTkwMDAKCW11bHcKCWludGMgMCAvLyAwCglpbnRjIDIgLy8gMTAwMDAwMAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRJbldpdGhGZWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM0NgoJLy8gcmF0aW8gPSB3aWRlUmF0aW8oW2JhbGFuY2VJbiwgU0NBTEVdLCBbYmFsYW5jZUluICsgYW1vdW50SW5XaXRoRmVlXSkKCWZyYW1lX2RpZyAtMSAvLyBiYWxhbmNlSW46IHVpbnQ2NAoJaW50YyAyIC8vIDEwMDAwMDAKCW11bHcKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgLTEgLy8gYmFsYW5jZUluOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIGFtb3VudEluV2l0aEZlZTogdWludDY0CgkrCglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIHJhdGlvOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNDgKCS8vIHBvd2VyID0gd2lkZVJhdGlvKFt3ZWlnaHRJbiwgU0NBTEVdLCBbd2VpZ2h0T3V0XSkKCWZyYW1lX2RpZyAtMiAvLyB3ZWlnaHRJbjogdWludDY0CglpbnRjIDIgLy8gMTAwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyAtNCAvLyB3ZWlnaHRPdXQ6IHVpbnQ2NAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgMiAvLyBwb3dlcjogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzUwCgkvLyBsb2coaXRvYihyYXRpbykpCglmcmFtZV9kaWcgMSAvLyByYXRpbzogdWludDY0CglpdG9iCglsb2cKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNTEKCS8vIGxvZyhpdG9iKHBvd2VyKSkKCWZyYW1lX2RpZyAyIC8vIHBvd2VyOiB1aW50NjQKCWl0b2IKCWxvZwoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM1NAoJLy8gcmF0aW9Qb3cgPSB0aGlzLnBvdyhyYXRpbywgcG93ZXIpCglmcmFtZV9kaWcgMiAvLyBwb3dlcjogdWludDY0CglmcmFtZV9kaWcgMSAvLyByYXRpbzogdWludDY0CgljYWxsc3ViIHBvdwoJZnJhbWVfYnVyeSAzIC8vIHJhdGlvUG93OiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNTYKCS8vIHJldHVybiB3aWRlUmF0aW8oW2JhbGFuY2VPdXQsIFNDQUxFIC0gcmF0aW9Qb3ddLCBbU0NBTEVdKTsKCWZyYW1lX2RpZyAtMyAvLyBiYWxhbmNlT3V0OiB1aW50NjQKCWludGMgMiAvLyAxMDAwMDAwCglmcmFtZV9kaWcgMyAvLyByYXRpb1BvdzogdWludDY0CgktCgltdWx3CglpbnRjIDAgLy8gMAoJaW50YyAyIC8vIDEwMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMwoJcmV0c3ViCgovLyBjb21wdXRlQWxsQXNzZXRzTGlxdWlkaXR5KHNlbmRlcjogQWRkcmVzcyk6IHVpbnQ2NApjb21wdXRlQWxsQXNzZXRzTGlxdWlkaXR5OgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gOAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM2MAoJLy8gdG90YWxBc3NldHMgPSB0aGlzLmFzc2V0cy52YWx1ZS5sZW5ndGgKCWJ5dGVjIDMgLy8gICJhc3NldHMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWZyYW1lX2J1cnkgMCAvLyB0b3RhbEFzc2V0czogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzYxCgkvLyBtaW5SYXRpbyA9IDIgKiogNjMKCWludGMgOCAvLyAyCglwdXNoaW50IDYzCglleHAKCWZyYW1lX2J1cnkgMSAvLyBtaW5SYXRpbzogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzYzCgkvLyBpbmNyZWFzZU9wY29kZUJ1ZGdldCgpCglpdHhuX2JlZ2luCglpbnRjIDUgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJYnl0ZWMgOCAvLyAgI3ByYWdtYSB2ZXJzaW9uIDEwOyBpbnQgMQoJZHVwCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoJaW50YyA5IC8vICBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzY1CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQXNzZXRzOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoKKmZvcl82OgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzY1CgkvLyBpIDwgdG90YWxBc3NldHMKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gdG90YWxBc3NldHM6IHVpbnQ2NAoJPAoJYnogKmZvcl82X2VuZAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM2NgoJLy8gYXNzZXRJZCA9IHRoaXMuYXNzZXRzLnZhbHVlW2ldCglieXRlYyAzIC8vICAiYXNzZXRzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDIgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgMyAvLyBhc3NldElkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNjcKCS8vIHBvb2xCYWxhbmNlID0gdGhpcy5iYWxhbmNlcyhhc3NldElkKS52YWx1ZQoJYnl0ZWMgMSAvLyAgImJhbGFuY2VzXyIKCWZyYW1lX2RpZyAzIC8vIGFzc2V0SWQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmJhbGFuY2VzKGFzc2V0SWQpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2J1cnkgNCAvLyBwb29sQmFsYW5jZTogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzY4CgkvLyBwcm92aWRlZEFtb3VudCA9IHRoaXMucHJvdmlkZWQoc2VuZGVyKS52YWx1ZVtpXQoJYnl0ZWMgMiAvLyAgInByb3ZpZGVkXyIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wcm92aWRlZChzZW5kZXIpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDIgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgNSAvLyBwcm92aWRlZEFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzY5CgkvLyBhY3R1YWxQb29sQmFsYW5jZSA9IHBvb2xCYWxhbmNlIC0gcHJvdmlkZWRBbW91bnQKCWZyYW1lX2RpZyA0IC8vIHBvb2xCYWxhbmNlOiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIHByb3ZpZGVkQW1vdW50OiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgNiAvLyBhY3R1YWxQb29sQmFsYW5jZTogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzcxCgkvLyBhc3NlcnQocG9vbEJhbGFuY2UgPiAwLCAnUG9vbCBiYWxhbmNlIG11c3QgYmUgPiAwJykKCWZyYW1lX2RpZyA0IC8vIHBvb2xCYWxhbmNlOiB1aW50NjQKCWludGMgMCAvLyAwCgk+CgoJLy8gUG9vbCBiYWxhbmNlIG11c3QgYmUgPiAwCglhc3NlcnQKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNzIKCS8vIGFzc2VydChwcm92aWRlZEFtb3VudCA+IDAsICdNaXNzaW5nIG9uZSBhc3NldCBjb250cmlidXRpb24nKQoJZnJhbWVfZGlnIDUgLy8gcHJvdmlkZWRBbW91bnQ6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCgkvLyBNaXNzaW5nIG9uZSBhc3NldCBjb250cmlidXRpb24KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM3NAoJLy8gcmF0aW8gPSB3aWRlUmF0aW8oW3Byb3ZpZGVkQW1vdW50LCBTQ0FMRV0sIFthY3R1YWxQb29sQmFsYW5jZV0pCglmcmFtZV9kaWcgNSAvLyBwcm92aWRlZEFtb3VudDogdWludDY0CglpbnRjIDIgLy8gMTAwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyA2IC8vIGFjdHVhbFBvb2xCYWxhbmNlOiB1aW50NjQKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDcgLy8gcmF0aW86IHVpbnQ2NAoKCS8vICppZjEwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mzc2CgkvLyByYXRpbyA8IG1pblJhdGlvCglmcmFtZV9kaWcgNyAvLyByYXRpbzogdWludDY0CglmcmFtZV9kaWcgMSAvLyBtaW5SYXRpbzogdWludDY0Cgk8CglieiAqaWYxMF9lbmQKCgkvLyAqaWYxMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNzcKCS8vIG1pblJhdGlvID0gcmF0aW8KCWZyYW1lX2RpZyA3IC8vIHJhdGlvOiB1aW50NjQKCWZyYW1lX2J1cnkgMSAvLyBtaW5SYXRpbzogdWludDY0CgoqaWYxMF9lbmQ6CgoqZm9yXzZfY29udGludWU6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozNjUKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDIgLy8gaTogdWludDY0CglpbnRjIDMgLy8gMQoJKwoJZnJhbWVfYnVyeSAyIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzYKCipmb3JfNl9lbmQ6CgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozODEKCS8vIHRvdGFsTFAgPSB0aGlzLnRvdGFsTFAoKQoJY2FsbHN1YiB0b3RhbExQCglmcmFtZV9idXJ5IDggLy8gdG90YWxMUDogdWludDY0CgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6MzgyCgkvLyByZXR1cm4gd2lkZVJhdGlvKFt0b3RhbExQLCBtaW5SYXRpb10sIFtTQ0FMRV0pOwoJZnJhbWVfZGlnIDggLy8gdG90YWxMUDogdWludDY0CglmcmFtZV9kaWcgMSAvLyBtaW5SYXRpbzogdWludDY0CgltdWx3CglpbnRjIDAgLy8gMAoJaW50YyAyIC8vIDEwMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gOAoJcmV0c3ViCgovLyB0b3RhbExQKCk6IHVpbnQ2NAp0b3RhbExQOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzL0JhbGFuY2VkUG9vbFYyLmFsZ28udHM6Mzg2CgkvLyByZXR1cm4gdGhpcy50b2tlbi52YWx1ZS50b3RhbCAtIHRoaXMudG9rZW4udmFsdWUucmVzZXJ2ZS5hc3NldEJhbGFuY2UodGhpcy50b2tlbi52YWx1ZSkgLSB0aGlzLmJ1cm5lZC52YWx1ZTsKCWJ5dGVjIDQgLy8gICJ0b2tlbiIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0VG90YWwKCXBvcAoJYnl0ZWMgNCAvLyAgInRva2VuIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXRSZXNlcnZlCglwb3AKCWJ5dGVjIDQgLy8gICJ0b2tlbiIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJLQoJYnl0ZWMgNiAvLyAgImJ1cm5lZCIKCWFwcF9nbG9iYWxfZ2V0CgktCglyZXRzdWIKCi8vIGFic0RpZmYoYTogdWludDY0LCBiOiB1aW50NjQpOiB1aW50NjQKYWJzRGlmZjoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9CYWxhbmNlZFBvb2xWMi5hbGdvLnRzOjM5MAoJLy8gcmV0dXJuIGEgPiBiID8gYSAtIGIgOiBiIC0gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCT4KCWJ6ICp0ZXJuYXJ5MV9mYWxzZQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJLQoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CgktCgoqdGVybmFyeTFfZW5kOgoJcmV0c3ViCgovLyBnZXRUb2tlbigpdWludDY0CiphYmlfcm91dGVfZ2V0VG9rZW46CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDcgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0VG9rZW4oKXVpbnQ2NAoJY2FsbHN1YiBnZXRUb2tlbgoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGdldFRva2VuKCk6IEFzc2V0SUQKZ2V0VG9rZW46Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHMvQmFsYW5jZWRQb29sVjIuYWxnby50czozOTUKCS8vIHJldHVybiB0aGlzLnRva2VuLnZhbHVlOwoJYnl0ZWMgNCAvLyAgInRva2VuIgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJdHhuIE51bUFwcEFyZ3MKCWJ6ICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhlNjM1ZmRiNSAvLyBtZXRob2QgImJvb3RzdHJhcCh1aW50NjRbXSx1aW50NjRbXSl1aW50NjQiCglwdXNoYnl0ZXMgMHhhYmRmN2UxNSAvLyBtZXRob2QgImFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGFkZHJlc3Mpdm9pZCIKCXB1c2hieXRlcyAweDJhNzQwMDRmIC8vIG1ldGhvZCAiZ2V0TGlxdWlkaXR5KGFkZHJlc3MpdWludDY0IgoJcHVzaGJ5dGVzIDB4M2ZiMWQwOWIgLy8gbWV0aG9kICJidXJuTGlxdWlkaXR5KGFkZHJlc3MsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg4ZDMyNWUyOSAvLyBtZXRob2QgInN3YXAoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQiCglwdXNoYnl0ZXMgMHgyMGViNTM5NCAvLyBtZXRob2QgImdldFRva2VuKCl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2Jvb3RzdHJhcCAqYWJpX3JvdXRlX2FkZExpcXVpZGl0eSAqYWJpX3JvdXRlX2dldExpcXVpZGl0eSAqYWJpX3JvdXRlX2J1cm5MaXF1aWRpdHkgKmFiaV9yb3V0ZV9zd2FwICphYmlfcm91dGVfZ2V0VG9rZW4KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnIKCippbnRUb0FzY2lpOgoJcHJvdG8gMSAxCglwdXNoYnl0ZXMgMHgzMDMxMzIzMzM0MzUzNjM3MzgzOSAvLyAiMDEyMzQ1Njc4OSIKCWZyYW1lX2RpZyAtMSAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCglleHRyYWN0MwoJcmV0c3ViCgkKCippdG9hOgoJcHJvdG8gMSAxCglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CglpbnRjIDAgLy8gMAoJPT0KCWJ6ICppdG9hX2lmX2VuZAoJcHVzaGJ5dGVzIDB4MzAKCXJldHN1YgoKKml0b2FfaWZfZW5kOgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA0IC8vIDEwCgkvCglpbnRjIDAgLy8gMAoJPgoJYnogKml0b2FfdGVybmFyeV9mYWxzZQoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA0IC8vIDEwCgkvCgljYWxsc3ViICppdG9hCgliICppdG9hX3Rlcm5hcnlfZW5kCgoqaXRvYV90ZXJuYXJ5X2ZhbHNlOgoJYnl0ZWMgMCAvLyAgIiIKCippdG9hX3Rlcm5hcnlfZW5kOgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA0IC8vIDEwCgklCgljYWxsc3ViICppbnRUb0FzY2lpCgljb25jYXQKCXJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BalancedPoolV2",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Bootstrap the pool by assigning assets and weights, create the LP tokens",
        "args": [
          {
            "name": "assetIds",
            "type": "uint64[]",
            "desc": "assets of the pool"
          },
          {
            "name": "weights",
            "type": "uint64[]",
            "desc": "weights of the pool\n uint64 - LP Token created ID"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "Provide one token liquidity to the pool",
        "args": [
          {
            "name": "index",
            "type": "uint64",
            "desc": "index of the token in the pool"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "amount of token sent"
          },
          {
            "name": "sender",
            "type": "address",
            "desc": "the sender"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLiquidity",
        "desc": "Compute the liquidity for the given sender based on the state\nin the contract",
        "args": [
          {
            "name": "sender",
            "type": "address",
            "desc": "the sender"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "burnLiquidity",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amountLP",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "desc": "Swap the token from for the token to",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getToken",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}