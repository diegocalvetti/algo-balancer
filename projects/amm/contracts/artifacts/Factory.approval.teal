#pragma version 10
intcblock 1 8 0 6 4 2
bytecblock 0x 0x706f6f6c5f617070726f76616c5f70726f6772616d 0x151f7c75 0x706f6f6c735f 0x6d616e61676572 0xb8447b36

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
//
// createApplication method called at creation
createApplication:
	proto 0 0

	// contracts/Factory.algo.ts:22
	// this.manager.value = this.app.creator
	bytec 4 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// createPool()void
*abi_route_createPool:
	// execute createPool()void
	callsub createPool
	intc 0 // 1
	return

// createPool(): void
//
// Deploy the pool contract, compiled teal of the contract
// must be loaded in poolContractApprovalProgram
createPool:
	proto 0 0

	// contracts/Factory.algo.ts:30
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: this.poolContractApprovalProgram.value,
	//       clearStateProgram: BalancedPoolV2.clearProgram(),
	//       globalNumUint: BalancedPoolV2.schema.global.numUint,
	//       globalNumByteSlice: BalancedPoolV2.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [method('createApplication()void')],
	//       fee: 100_000,
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum

	// contracts/Factory.algo.ts:31
	// onCompletion: OnCompletion.NoOp
	intc 2 //  NoOp
	itxn_field OnCompletion

	// contracts/Factory.algo.ts:32
	// approvalProgram: this.poolContractApprovalProgram.value
	bytec 1 //  "pool_approval_program"
	box_get

	// box value does not exist: this.poolContractApprovalProgram.value
	assert
	itxn_field ApprovalProgram

	// contracts/Factory.algo.ts:33
	// clearStateProgram: BalancedPoolV2.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// contracts/Factory.algo.ts:34
	// globalNumUint: BalancedPoolV2.schema.global.numUint
	intc 4 // 4
	itxn_field GlobalNumUint

	// contracts/Factory.algo.ts:35
	// globalNumByteSlice: BalancedPoolV2.schema.global.numByteSlice
	intc 5 // 2
	itxn_field GlobalNumByteSlice

	// contracts/Factory.algo.ts:36
	// extraProgramPages: 3
	pushint 3
	itxn_field ExtraProgramPages

	// contracts/Factory.algo.ts:37
	// applicationArgs: [method('createApplication()void')]
	bytec 5 //  method "createApplication()void"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:38
	// fee: 100_000
	pushint 100_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// initPool(uint64,uint64[],uint64[])uint64
*abi_route_initPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 3
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute initPool(uint64,uint64[],uint64[])uint64
	callsub initPool
	itob
	concat
	log
	intc 0 // 1
	return

// initPool(poolID: AppID, assetIds: AssetID[], weights: uint64[]): AssetID
//
// Initialize the pool with the given assets & weights
// @param {AppID} poolID - Pool App ID
// @param {AssetID[]} assetIds
// @param {uint64[]} weights
initPool:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/Factory.algo.ts:50
	// assert(assetIds.length >= 2, 'At least 2 tokens needed')
	frame_dig -2 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	intc 5 // 2
	>=

	// At least 2 tokens needed
	assert

	// contracts/Factory.algo.ts:51
	// assert(assetIds.length === weights.length, 'Weights and Assets length must be the same')
	frame_dig -2 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	frame_dig -3 // weights: uint64[]
	len
	intc 1 // 8
	/
	==

	// Weights and Assets length must be the same
	assert

	// contracts/Factory.algo.ts:53
	// hash = this.getPoolHash(assetIds, weights)
	frame_dig -3 // weights: uint64[]
	frame_dig -2 // assetIds: AssetID[]
	callsub getPoolHash
	frame_bury 0 // hash: byte[32]

	// contracts/Factory.algo.ts:55
	// assert(!this.pools(hash).exists, 'This pool already exists')
	bytec 3 //  "pools_"
	frame_dig 0 // hash: byte[32]
	concat
	box_len
	swap
	pop
	!

	// This pool already exists
	assert

	// contracts/Factory.algo.ts:57
	// this.pools(hash).value = { id: poolID, assets: assetIds, weights: weights }
	bytec 3 //  "pools_"
	frame_dig 0 // hash: byte[32]
	concat
	dup
	box_del
	pop
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x000c // initial head offset
	frame_dig -1 // poolID: AppID
	itob
	callsub *process_static_tuple_element
	frame_dig -2 // assetIds: AssetID[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // weights: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put

	// contracts/Factory.algo.ts:59
	// return sendMethodCall<typeof BalancedPoolV2.prototype.bootstrap, AssetID>({
	//       applicationID: poolID,
	//       methodArgs: [assetIds, weights],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:60
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:61
	// methodArgs: [assetIds, weights]
	frame_dig -2 // assetIds: AssetID[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs
	frame_dig -3 // weights: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi

	// set the subroutine return value
	frame_bury 0
	retsub

// addLiquidity(uint64,uint64,axfer)void
*abi_route_addLiquidity:
	// transferTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (transferTxn) for addLiquidity must be a axfer transaction
	assert

	// index: uint64
	txna ApplicationArgs 2
	btoi

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,axfer)void
	callsub addLiquidity
	intc 0 // 1
	return

// addLiquidity(poolID: AppID, index: uint64, transferTxn: AssetTransferTxn): void
//
// Add one token as liquidity to the pool
// @param {AppID} poolID - Pool App ID
// @param {uint64} index - the index
// @param {AssetTransferTxn} transferTxn - transfer tx of the token, receiver must be the pool account
addLiquidity:
	proto 3 0

	// contracts/Factory.algo.ts:72
	// sendMethodCall<typeof BalancedPoolV2.prototype.addLiquidity>({
	//       applicationID: poolID,
	//       methodArgs: [index, transferTxn.assetAmount, transferTxn.sender],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xabdf7e15 // method "addLiquidity(uint64,uint64,address)void"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:73
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:74
	// methodArgs: [index, transferTxn.assetAmount, transferTxn.sender]
	frame_dig -2 // index: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getLiquidity(uint64)uint64
*abi_route_getLiquidity:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute getLiquidity(uint64)uint64
	callsub getLiquidity
	itob
	concat
	log
	intc 0 // 1
	return

// getLiquidity(poolID: AppID): uint64
//
// Compute the liquidity for the sender and send the LPs expected
// @param {AppID} poolID - Pool App ID
// @return uint64 - The LPs expected
getLiquidity:
	proto 1 1

	// contracts/Factory.algo.ts:84
	// return sendMethodCall<typeof BalancedPoolV2.prototype.getLiquidity>({
	//       applicationID: poolID,
	//       methodArgs: [this.txn.sender],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x2a74004f // method "getLiquidity(address)uint64"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:85
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:86
	// methodArgs: [this.txn.sender]
	txn Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// burnLiquidity(uint64,axfer)void
*abi_route_burnLiquidity:
	// transferTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (transferTxn) for burnLiquidity must be a axfer transaction
	assert

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute burnLiquidity(uint64,axfer)void
	callsub burnLiquidity
	intc 0 // 1
	return

// burnLiquidity(poolID: AppID, transferTxn: AssetTransferTxn): void
burnLiquidity:
	proto 2 0

	// contracts/Factory.algo.ts:91
	// sendMethodCall<typeof BalancedPoolV2.prototype.burnLiquidity>({
	//       applicationID: poolID,
	//       methodArgs: [this.txn.sender, transferTxn.assetAmount],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x3fb1d09b // method "burnLiquidity(address,uint64)void"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:92
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:93
	// methodArgs: [this.txn.sender, transferTxn.assetAmount]
	txn Sender
	itxn_field ApplicationArgs
	frame_dig -2 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// swap(uint64,uint64,uint64,axfer)uint64
*abi_route_swap:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// transferTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (transferTxn) for swap must be a axfer transaction
	assert

	// to: uint64
	txna ApplicationArgs 3
	btoi

	// from: uint64
	txna ApplicationArgs 2
	btoi

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute swap(uint64,uint64,uint64,axfer)uint64
	callsub swap
	itob
	concat
	log
	intc 0 // 1
	return

// swap(poolID: AppID, from: uint64, to: uint64, transferTxn: AssetTransferTxn): uint64
swap:
	proto 4 1

	// contracts/Factory.algo.ts:98
	// return sendMethodCall<typeof BalancedPoolV2.prototype.swap>({
	//       applicationID: poolID,
	//       methodArgs: [this.txn.sender, from, to, transferTxn.assetAmount],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x8d325e29 // method "swap(address,uint64,uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:99
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:100
	// methodArgs: [this.txn.sender, from, to, transferTxn.assetAmount]
	txn Sender
	itxn_field ApplicationArgs
	frame_dig -2 // from: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // to: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -4 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// changeWeights(uint64,uint64[],uint64)uint64
*abi_route_changeWeights:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// duration: uint64
	txna ApplicationArgs 3
	btoi

	// newWeights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeWeights(uint64,uint64[],uint64)uint64
	callsub changeWeights
	itob
	concat
	log
	intc 0 // 1
	return

// changeWeights(poolID: AppID, newWeights: uint64[], duration: uint64): uint64
changeWeights:
	proto 3 1

	// contracts/Factory.algo.ts:105
	// log(itob(duration))
	frame_dig -3 // duration: uint64
	itob
	log

	// contracts/Factory.algo.ts:107
	// return sendMethodCall<typeof BalancedPoolV2.prototype.changeWeights>({
	//       applicationID: poolID,
	//       methodArgs: [duration, newWeights],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xf47ba5ea // method "changeWeights(uint64,uint64[])uint64"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:108
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:109
	// methodArgs: [duration, newWeights]
	frame_dig -3 // duration: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // newWeights: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// opUp()void
*abi_route_opUp:
	// execute opUp()void
	callsub opUp
	intc 0 // 1
	return

// opUp(): void
opUp:
	proto 0 0
	retsub

// MANAGER_updatePoolContractProgram(uint64)void
*abi_route_MANAGER_updatePoolContractProgram:
	// programSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updatePoolContractProgram(uint64)void
	callsub MANAGER_updatePoolContractProgram
	intc 0 // 1
	return

// MANAGER_updatePoolContractProgram(programSize: uint64): void
//
// *******************
// MANAGER
// *******************
MANAGER_updatePoolContractProgram:
	proto 1 0

	// contracts/Factory.algo.ts:120
	// this.assertIsManager()
	callsub assertIsManager

	// *if0_condition
	// contracts/Factory.algo.ts:122
	// this.poolContractApprovalProgram.exists
	bytec 1 //  "pool_approval_program"
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// contracts/Factory.algo.ts:123
	// this.poolContractApprovalProgram.resize(programSize)
	bytec 1 //  "pool_approval_program"
	frame_dig -1 // programSize: uint64
	box_resize
	b *if0_end

*if0_else:
	// contracts/Factory.algo.ts:125
	// this.poolContractApprovalProgram.create(programSize)
	bytec 1 //  "pool_approval_program"
	frame_dig -1 // programSize: uint64
	box_create
	pop

*if0_end:
	retsub

// MANAGER_writePoolContractProgram(uint64,byte[])void
*abi_route_MANAGER_writePoolContractProgram:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_writePoolContractProgram(uint64,byte[])void
	callsub MANAGER_writePoolContractProgram
	intc 0 // 1
	return

// MANAGER_writePoolContractProgram(offset: uint64, data: bytes): void
MANAGER_writePoolContractProgram:
	proto 2 0

	// contracts/Factory.algo.ts:130
	// this.assertIsManager()
	callsub assertIsManager

	// contracts/Factory.algo.ts:132
	// this.poolContractApprovalProgram.replace(offset, data)
	bytec 1 //  "pool_approval_program"
	frame_dig -1 // offset: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// assertIsManager(): void
//
// *******************
// SUBROUTINES
// *******************
assertIsManager:
	proto 0 0

	// contracts/Factory.algo.ts:140
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 4 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert
	retsub

// getPoolHash(assetIds: AssetID[], weights: uint64[]): bytes32
getPoolHash:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/Factory.algo.ts:144
	// parts: bytes = ''
	bytec 0 //  ""
	frame_bury 0 // parts: bytes

	// contracts/Factory.algo.ts:146
	// for (let i = 0; i < assetIds.length; i += 1)
	intc 2 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/Factory.algo.ts:146
	// i < assetIds.length
	frame_dig 1 // i: uint64
	frame_dig -1 // assetIds: AssetID[]
	len
	intc 1 // 8
	/
	<
	bz *for_0_end

	// contracts/Factory.algo.ts:147
	// parts += itob(assetIds[i])
	frame_dig 0 // parts: bytes
	frame_dig -1 // assetIds: AssetID[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	concat
	frame_bury 0 // parts: bytes

	// contracts/Factory.algo.ts:148
	// parts += itob(weights[i])
	frame_dig 0 // parts: bytes
	frame_dig -2 // weights: uint64[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	concat
	frame_bury 0 // parts: bytes

*for_0_continue:
	// contracts/Factory.algo.ts:146
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/Factory.algo.ts:151
	// return sha512_256(parts);
	frame_dig 0 // parts: bytes
	sha512_256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// getPool(uint64[],uint64[])(uint64,uint64[],uint64[])
*abi_route_getPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute getPool(uint64[],uint64[])(uint64,uint64[],uint64[])
	callsub getPool
	concat
	log
	intc 0 // 1
	return

// getPool(assetIds: AssetID[], weights: uint64[]): Pool
getPool:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/Factory.algo.ts:156
	// hash = this.getPoolHash(assetIds, weights)
	frame_dig -2 // weights: uint64[]
	frame_dig -1 // assetIds: AssetID[]
	callsub getPoolHash
	frame_bury 0 // hash: byte[32]

	// contracts/Factory.algo.ts:157
	// return this.pools(hash).value;
	bytec 3 //  "pools_"
	frame_dig 0 // hash: byte[32]
	concat
	box_get

	// box value does not exist: this.pools(hash).value
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	bytec 5 //  method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x42588e09 // method "createPool()void"
	pushbytes 0xa1eb3020 // method "initPool(uint64,uint64[],uint64[])uint64"
	pushbytes 0x79ad2988 // method "addLiquidity(uint64,uint64,axfer)void"
	pushbytes 0xd08e7a74 // method "getLiquidity(uint64)uint64"
	pushbytes 0xfc609bae // method "burnLiquidity(uint64,axfer)void"
	pushbytes 0x8a37d55e // method "swap(uint64,uint64,uint64,axfer)uint64"
	pushbytes 0x20814b3a // method "changeWeights(uint64,uint64[],uint64)uint64"
	pushbytes 0x854dede0 // method "opUp()void"
	pushbytes 0x099e5cfd // method "MANAGER_updatePoolContractProgram(uint64)void"
	pushbytes 0xa4b503c1 // method "MANAGER_writePoolContractProgram(uint64,byte[])void"
	pushbytes 0xc9911396 // method "getPool(uint64[],uint64[])(uint64,uint64[],uint64[])"
	txna ApplicationArgs 0
	match *abi_route_createPool *abi_route_initPool *abi_route_addLiquidity *abi_route_getLiquidity *abi_route_burnLiquidity *abi_route_swap *abi_route_changeWeights *abi_route_opUp *abi_route_MANAGER_updatePoolContractProgram *abi_route_MANAGER_writePoolContractProgram *abi_route_getPool

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub