#pragma version 10
intcblock 1 0 6 8
bytecblock 0x706f6f6c5f617070726f76616c5f70726f6772616d 0x6d616e61676572 0x151f7c75 0xb8447b36

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Factory.algo.ts:11
	// this.manager.value = this.app.creator
	bytec 1 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// createPool()void
*abi_route_createPool:
	// execute createPool()void
	callsub createPool
	intc 0 // 1
	return

// createPool(): void
createPool:
	proto 0 0

	// contracts/Factory.algo.ts:15
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: this.poolContractApprovalProgram.value,
	//       clearStateProgram: BalancedPoolV2.clearProgram(),
	//       globalNumUint: BalancedPoolV2.schema.global.numUint,
	//       globalNumByteSlice: BalancedPoolV2.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [method('createApplication()void')],
	//       fee: 100_000,
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum

	// contracts/Factory.algo.ts:16
	// onCompletion: OnCompletion.NoOp
	intc 1 //  NoOp
	itxn_field OnCompletion

	// contracts/Factory.algo.ts:17
	// approvalProgram: this.poolContractApprovalProgram.value
	bytec 0 //  "pool_approval_program"
	box_get

	// box value does not exist: this.poolContractApprovalProgram.value
	assert
	itxn_field ApprovalProgram

	// contracts/Factory.algo.ts:18
	// clearStateProgram: BalancedPoolV2.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// contracts/Factory.algo.ts:19
	// globalNumUint: BalancedPoolV2.schema.global.numUint
	intc 0 // 1
	itxn_field GlobalNumUint

	// contracts/Factory.algo.ts:20
	// globalNumByteSlice: BalancedPoolV2.schema.global.numByteSlice
	pushint 2
	itxn_field GlobalNumByteSlice

	// contracts/Factory.algo.ts:21
	// extraProgramPages: 3
	pushint 3
	itxn_field ExtraProgramPages

	// contracts/Factory.algo.ts:22
	// applicationArgs: [method('createApplication()void')]
	bytec 3 //  method "createApplication()void"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:23
	// fee: 100_000
	pushint 100_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// initPool(uint64,uint64[],uint64[])uint64
*abi_route_initPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// weights: uint64[]
	txna ApplicationArgs 3
	extract 2 0

	// assetIds: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute initPool(uint64,uint64[],uint64[])uint64
	callsub initPool
	itob
	concat
	log
	intc 0 // 1
	return

// initPool(poolID: AppID, assetIds: AssetID[], weights: uint64[]): AssetID
initPool:
	proto 3 1

	// contracts/Factory.algo.ts:28
	// return sendMethodCall<typeof BalancedPoolV2.prototype.bootstrap, AssetID>({
	//       applicationID: poolID,
	//       methodArgs: [assetIds, weights],
	//     });
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xe635fdb5 // method "bootstrap(uint64[],uint64[])uint64"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:29
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:30
	// methodArgs: [assetIds, weights]
	frame_dig -2 // assetIds: AssetID[]
	dup
	len
	intc 3 // 8
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs
	frame_dig -3 // weights: uint64[]
	dup
	len
	intc 3 // 8
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// addLiquidity(uint64,uint64,axfer)void
*abi_route_addLiquidity:
	// transferTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	pushint 4 // axfer
	==

	// argument 0 (transferTxn) for addLiquidity must be a axfer transaction
	assert

	// index: uint64
	txna ApplicationArgs 2
	btoi

	// poolID: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,axfer)void
	callsub addLiquidity
	intc 0 // 1
	return

// addLiquidity(poolID: AppID, index: uint64, transferTxn: AssetTransferTxn): void
addLiquidity:
	proto 3 0

	// contracts/Factory.algo.ts:35
	// sendMethodCall<typeof BalancedPoolV2.prototype.addLiquidity>({
	//       applicationID: poolID,
	//       methodArgs: [index, transferTxn.assetAmount, transferTxn.sender],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xabdf7e15 // method "addLiquidity(uint64,uint64,address)void"
	itxn_field ApplicationArgs

	// contracts/Factory.algo.ts:36
	// applicationID: poolID
	frame_dig -1 // poolID: AppID
	itxn_field ApplicationID

	// contracts/Factory.algo.ts:37
	// methodArgs: [index, transferTxn.assetAmount, transferTxn.sender]
	frame_dig -2 // index: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // transferTxn: AssetTransferTxn
	gtxns Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// MANAGER_updatePoolContractProgram(uint64)void
*abi_route_MANAGER_updatePoolContractProgram:
	// programSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updatePoolContractProgram(uint64)void
	callsub MANAGER_updatePoolContractProgram
	intc 0 // 1
	return

// MANAGER_updatePoolContractProgram(programSize: uint64): void
//
// MANAGER Methods
MANAGER_updatePoolContractProgram:
	proto 1 0

	// contracts/Factory.algo.ts:46
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 1 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// *if0_condition
	// contracts/Factory.algo.ts:48
	// this.poolContractApprovalProgram.exists
	bytec 0 //  "pool_approval_program"
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// contracts/Factory.algo.ts:49
	// this.poolContractApprovalProgram.resize(programSize)
	bytec 0 //  "pool_approval_program"
	frame_dig -1 // programSize: uint64
	box_resize
	b *if0_end

*if0_else:
	// contracts/Factory.algo.ts:51
	// this.poolContractApprovalProgram.create(programSize)
	bytec 0 //  "pool_approval_program"
	frame_dig -1 // programSize: uint64
	box_create
	pop

*if0_end:
	retsub

// MANAGER_writePoolContractProgram(uint64,byte[])void
*abi_route_MANAGER_writePoolContractProgram:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_writePoolContractProgram(uint64,byte[])void
	callsub MANAGER_writePoolContractProgram
	intc 0 // 1
	return

// MANAGER_writePoolContractProgram(offset: uint64, data: bytes): void
MANAGER_writePoolContractProgram:
	proto 2 0

	// contracts/Factory.algo.ts:56
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 1 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts/Factory.algo.ts:57
	// this.poolContractApprovalProgram.replace(offset, data)
	bytec 0 //  "pool_approval_program"
	frame_dig -1 // offset: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// hasPoolApprovalProgram()bool
*abi_route_hasPoolApprovalProgram:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute hasPoolApprovalProgram()bool
	callsub hasPoolApprovalProgram
	pushbytes 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// hasPoolApprovalProgram(): boolean
hasPoolApprovalProgram:
	proto 0 1

	// contracts/Factory.algo.ts:61
	// return this.poolContractApprovalProgram.exists;
	bytec 0 //  "pool_approval_program"
	box_len
	swap
	pop
	retsub

// getProgram()byte[]
*abi_route_getProgram:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getProgram()byte[]
	callsub getProgram
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// getProgram(): bytes
getProgram:
	proto 0 1

	// contracts/Factory.algo.ts:65
	// return this.poolContractApprovalProgram.value;
	bytec 0 //  "pool_approval_program"
	box_get

	// box value does not exist: this.poolContractApprovalProgram.value
	assert
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	bytec 3 //  method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x42588e09 // method "createPool()void"
	pushbytes 0xa1eb3020 // method "initPool(uint64,uint64[],uint64[])uint64"
	pushbytes 0x79ad2988 // method "addLiquidity(uint64,uint64,axfer)void"
	pushbytes 0x099e5cfd // method "MANAGER_updatePoolContractProgram(uint64)void"
	pushbytes 0xa4b503c1 // method "MANAGER_writePoolContractProgram(uint64,byte[])void"
	pushbytes 0x73338efa // method "hasPoolApprovalProgram()bool"
	pushbytes 0x145a4004 // method "getProgram()byte[]"
	txna ApplicationArgs 0
	match *abi_route_createPool *abi_route_initPool *abi_route_addLiquidity *abi_route_MANAGER_updatePoolContractProgram *abi_route_MANAGER_writePoolContractProgram *abi_route_hasPoolApprovalProgram *abi_route_getProgram

	// this contract does not implement the given ABI method for call NoOp
	err