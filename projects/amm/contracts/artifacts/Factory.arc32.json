{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createPool()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initPool(uint64,uint64[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opUp()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPool(uint64[],uint64[])(uint64,uint64[],uint64[])": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Factory",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPool",
        "desc": "Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initPool",
        "desc": "Initialize the pool with the given assets & weights",
        "args": [
          {
            "name": "poolID",
            "type": "uint64",
            "desc": "Pool App ID"
          },
          {
            "name": "assetIds",
            "type": "uint64[]"
          },
          {
            "name": "weights",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "opUp",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_writePoolContractProgram",
        "desc": "*******************",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPool",
        "readonly": true,
        "args": [
          {
            "name": "assetIds",
            "type": "uint64[]"
          },
          {
            "name": "weights",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "(uint64,uint64[],uint64[])"
        }
      }
    ]
  }
}