{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createPool()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initPool(uint64,uint64[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractProgram(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasPoolApprovalProgram()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProgram()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Factory",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPool",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initPool",
        "args": [
          {
            "name": "poolID",
            "type": "uint64"
          },
          {
            "name": "assetIds",
            "type": "uint64[]"
          },
          {
            "name": "weights",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addLiquidity",
        "args": [
          {
            "name": "poolID",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "transferTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractProgram",
        "desc": "MANAGER Methods",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_writePoolContractProgram",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "hasPoolApprovalProgram",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "getProgram",
        "args": [],
        "returns": {
          "type": "byte[]"
        }
      }
    ]
  }
}