#pragma version 10
intcblock 0 1 4 6
bytecblock 0x746f6b656e 0x746f74616c5f737570706c79 0x43756261

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Token.algo.ts:14
	// this.token.value = AssetID.zeroIndex
	bytec 0 //  "token"
	intc 0 // 0
	app_global_put

	// contracts/Token.algo.ts:15
	// this.total_supply.value = 0
	bytec 1 //  "total_supply"
	intc 0 // 0
	app_global_put
	retsub

// bootstrap(pay)uint64
*abi_route_bootstrap:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// seed: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (seed) for bootstrap must be a pay transaction
	assert

	// execute bootstrap(pay)uint64
	callsub bootstrap
	itob
	concat
	log
	intc 1 // 1
	return

// bootstrap(seed: PayTxn): AssetID
bootstrap:
	proto 1 1

	// contracts/Token.algo.ts:19
	// assert(this.token.value === AssetID.zeroIndex, 'application has already been bootstrapped')
	bytec 0 //  "token"
	app_global_get
	intc 0 // 0
	==

	// application has already been bootstrapped
	assert

	// contracts/Token.algo.ts:20
	// assert(seed.amount >= 300_000, 'amount minimum not met')
	frame_dig -1 // seed: PayTxn
	gtxns Amount
	pushint 300_000
	>=

	// amount minimum not met
	assert

	// contracts/Token.algo.ts:21
	// assert(seed.receiver === this.app.address, 'receiver not app address')
	frame_dig -1 // seed: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// receiver not app address
	assert

	// contracts/Token.algo.ts:23
	// this.createToken()
	callsub createToken

	// contracts/Token.algo.ts:25
	// sendAssetTransfer({
	//       xferAsset: this.token.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       fee: 1000,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Token.algo.ts:26
	// xferAsset: this.token.value
	bytec 0 //  "token"
	app_global_get
	itxn_field XferAsset

	// contracts/Token.algo.ts:27
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/Token.algo.ts:28
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Token.algo.ts:29
	// fee: 1000
	pushint 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Token.algo.ts:32
	// return this.token.value;
	bytec 0 //  "token"
	app_global_get
	retsub

// mint(uint64)void
*abi_route_mint:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute mint(uint64)void
	callsub mint
	intc 1 // 1
	return

// mint(amount: uint64): void
mint:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts/Token.algo.ts:36
	// this.total_supply.value += amount
	bytec 1 //  "total_supply"
	app_global_get
	frame_dig -1 // amount: uint64
	+
	bytec 1 //  "total_supply"
	swap
	app_global_put

	// contracts/Token.algo.ts:38
	// sender = this.txn.sender
	txn Sender
	frame_bury 0 // sender: address

	// *if0_condition
	// contracts/Token.algo.ts:40
	// !this.balances(sender).exists
	frame_dig 0 // sender: address
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/Token.algo.ts:41
	// this.balances(sender).value = 0
	frame_dig 0 // sender: address
	pushbytes 0x0000000000000000
	box_put

*if0_end:
	// contracts/Token.algo.ts:44
	// this.balances(sender).value += amount
	frame_dig 0 // sender: address
	box_get

	// box value does not exist: this.balances(sender).value
	assert
	btoi
	frame_dig -1 // amount: uint64
	+
	frame_dig 0 // sender: address
	swap
	itob
	box_put

	// contracts/Token.algo.ts:46
	// sendAssetTransfer({
	//       assetReceiver: this.txn.sender,
	//       assetAmount: amount,
	//       xferAsset: this.token.value,
	//       sender: this.txn.sender,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Token.algo.ts:47
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Token.algo.ts:48
	// assetAmount: amount
	frame_dig -1 // amount: uint64
	itxn_field AssetAmount

	// contracts/Token.algo.ts:49
	// xferAsset: this.token.value
	bytec 0 //  "token"
	app_global_get
	itxn_field XferAsset

	// contracts/Token.algo.ts:50
	// sender: this.txn.sender
	txn Sender
	itxn_field Sender

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// createToken(): void
createToken:
	proto 0 0

	// contracts/Token.algo.ts:55
	// this.token.value = sendAssetCreation({
	//       configAssetTotal: TOTAL_SUPPLY,
	//       configAssetDecimals: 6,
	//       configAssetReserve: this.app.address,
	//       configAssetManager: this.app.address,
	//       configAssetClawback: globals.zeroAddress,
	//       configAssetFreeze: globals.zeroAddress,
	//       configAssetDefaultFrozen: 0,
	//       configAssetName: 'Cuba',
	//       configAssetUnitName: 'Cuba',
	//     })
	bytec 0 //  "token"
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/Token.algo.ts:56
	// configAssetTotal: TOTAL_SUPPLY
	pushint 10
	pushint 16
	exp
	itxn_field ConfigAssetTotal

	// contracts/Token.algo.ts:57
	// configAssetDecimals: 6
	intc 3 // 6
	itxn_field ConfigAssetDecimals

	// contracts/Token.algo.ts:58
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/Token.algo.ts:59
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/Token.algo.ts:60
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts/Token.algo.ts:61
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts/Token.algo.ts:62
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/Token.algo.ts:63
	// configAssetName: 'Cuba'
	bytec 2 //  "Cuba"
	itxn_field ConfigAssetName

	// contracts/Token.algo.ts:64
	// configAssetUnitName: 'Cuba'
	bytec 2 //  "Cuba"
	itxn_field ConfigAssetUnitName

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xbb26db40 // method "bootstrap(pay)uint64"
	pushbytes 0xb98b905f // method "mint(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_mint

	// this contract does not implement the given ABI method for call NoOp
	err