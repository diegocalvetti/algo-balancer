/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BalancedPoolV2","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","args":[{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Provide Liquidity to the pool proportionally to the weights","args":[{"name":"index","type":"uint64"},{"name":"amount","type":"uint64"},{"name":"sender","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"optIn","args":[{"name":"assetId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"},"token":{"key":"dG9rZW4=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"assets":{"keyType":"uint64","valueType":"uint64","prefix":"assets_"},"weights":{"keyType":"uint64","valueType":"uint64","prefix":"weights_"},"balances":{"keyType":"uint64","valueType":"uint64","prefix":"balances_"},"provided":{"keyType":"address","valueType":"uint64[]","prefix":"provided_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[0]},{"teal":2,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]},{"teal":15,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[65,66]},{"teal":16,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[67]},{"teal":17,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[68,69]},{"teal":18,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[70]},{"teal":19,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[71,72]},{"teal":20,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[73]},{"teal":21,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]},{"teal":25,"source":"contracts/BalancedPoolV2.algo.ts:5","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[100]},{"teal":30,"source":"contracts/BalancedPoolV2.algo.ts:18","pc":[101,102,103]},{"teal":31,"source":"contracts/BalancedPoolV2.algo.ts:18","pc":[104]},{"teal":32,"source":"contracts/BalancedPoolV2.algo.ts:18","pc":[105]},{"teal":36,"source":"contracts/BalancedPoolV2.algo.ts:18","pc":[106,107,108]},{"teal":40,"source":"contracts/BalancedPoolV2.algo.ts:20","pc":[109,110]},{"teal":41,"source":"contracts/BalancedPoolV2.algo.ts:20","pc":[111,112,113]},{"teal":42,"source":"contracts/BalancedPoolV2.algo.ts:20","pc":[114,115]},{"teal":43,"source":"contracts/BalancedPoolV2.algo.ts:20","pc":[116]},{"teal":44,"source":"contracts/BalancedPoolV2.algo.ts:20","pc":[117]},{"teal":45,"source":"contracts/BalancedPoolV2.algo.ts:18","pc":[118]},{"teal":50,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[119,120,121,122,123,124]},{"teal":53,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[125,126,127]},{"teal":54,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[128,129,130]},{"teal":57,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[131,132,133]},{"teal":58,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[134,135,136]},{"teal":61,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[137,138,139]},{"teal":62,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[140]},{"teal":63,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[141]},{"teal":64,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[142]},{"teal":65,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[143]},{"teal":66,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[144]},{"teal":70,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[145,146,147]},{"teal":73,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[148]},{"teal":74,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[149]},{"teal":78,"source":"contracts/BalancedPoolV2.algo.ts:24","pc":[150,151,152]},{"teal":82,"source":"contracts/BalancedPoolV2.algo.ts:25","pc":[153]},{"teal":83,"source":"contracts/BalancedPoolV2.algo.ts:25","pc":[154,155]},{"teal":87,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[156]},{"teal":88,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[157,158]},{"teal":93,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[159,160]},{"teal":94,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[161,162]},{"teal":95,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[163]},{"teal":96,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[164]},{"teal":97,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[165]},{"teal":98,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[166]},{"teal":99,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[167,168,169]},{"teal":103,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[170,171]},{"teal":104,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[172,173]},{"teal":105,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[174]},{"teal":106,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[175,176]},{"teal":107,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[177]},{"teal":108,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[178]},{"teal":109,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[179]},{"teal":110,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[180,181]},{"teal":111,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[182]},{"teal":112,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[183]},{"teal":113,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[184]},{"teal":114,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[185]},{"teal":115,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[186,187]},{"teal":116,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[188,189]},{"teal":117,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[190]},{"teal":118,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[191,192]},{"teal":119,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[193]},{"teal":120,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[194]},{"teal":121,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[195]},{"teal":122,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[196,197]},{"teal":123,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[198]},{"teal":124,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[199]},{"teal":125,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[200]},{"teal":126,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[201]},{"teal":127,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[202,203]},{"teal":128,"source":"contracts/BalancedPoolV2.algo.ts:28","pc":[204,205,206]},{"teal":132,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[207,208]},{"teal":133,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[209,210]},{"teal":134,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[211,212]},{"teal":135,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[213]},{"teal":136,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[214,215]},{"teal":137,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[216]},{"teal":138,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[217]},{"teal":139,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[218]},{"teal":140,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[219,220]},{"teal":141,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[221]},{"teal":142,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[222]},{"teal":143,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[223]},{"teal":144,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[224]},{"teal":145,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[225]},{"teal":146,"source":"contracts/BalancedPoolV2.algo.ts:29","pc":[226,227]},{"teal":151,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[228,229]},{"teal":152,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[230]},{"teal":153,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[231]},{"teal":154,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[232,233]},{"teal":155,"source":"contracts/BalancedPoolV2.algo.ts:27","pc":[234,235,236]},{"teal":160,"source":"contracts/BalancedPoolV2.algo.ts:32","pc":[237,238]},{"teal":161,"source":"contracts/BalancedPoolV2.algo.ts:32","pc":[239]},{"teal":162,"source":"contracts/BalancedPoolV2.algo.ts:32","pc":[240]},{"teal":165,"source":"contracts/BalancedPoolV2.algo.ts:32","errorMessage":"Weights must sum to 1","pc":[241]},{"teal":169,"source":"contracts/BalancedPoolV2.algo.ts:33","pc":[242,243,244]},{"teal":173,"source":"contracts/BalancedPoolV2.algo.ts:35","pc":[245,246]},{"teal":174,"source":"contracts/BalancedPoolV2.algo.ts:35","pc":[247]},{"teal":177,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[248,249]},{"teal":180,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[250,251]},{"teal":181,"source":"contracts/BalancedPoolV2.algo.ts:23","pc":[252]},{"teal":186,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[253,254,255]},{"teal":187,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[256]},{"teal":188,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[257]},{"teal":189,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[258,259]},{"teal":190,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[260]},{"teal":193,"source":"contracts/BalancedPoolV2.algo.ts:41","errorMessage":"argument 0 (sender) for addLiquidity must be a address","pc":[261]},{"teal":196,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[262,263,264]},{"teal":197,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[265]},{"teal":200,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[266,267,268]},{"teal":201,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[269]},{"teal":204,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[270,271,272]},{"teal":205,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[273]},{"teal":206,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[274]},{"teal":212,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[275,276,277]},{"teal":215,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[278]},{"teal":219,"source":"contracts/BalancedPoolV2.algo.ts:42","pc":[279,280]},{"teal":220,"source":"contracts/BalancedPoolV2.algo.ts:42","pc":[281]},{"teal":221,"source":"contracts/BalancedPoolV2.algo.ts:42","pc":[282]},{"teal":222,"source":"contracts/BalancedPoolV2.algo.ts:42","pc":[283]},{"teal":225,"source":"contracts/BalancedPoolV2.algo.ts:42","errorMessage":"pool not bootstrapped","pc":[284]},{"teal":229,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[285]},{"teal":230,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[286,287]},{"teal":231,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[288]},{"teal":232,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[289]},{"teal":233,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[290]},{"teal":236,"source":"contracts/BalancedPoolV2.algo.ts:43","errorMessage":"box value does not exist: this.assets(index).value","pc":[291]},{"teal":237,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[292]},{"teal":238,"source":"contracts/BalancedPoolV2.algo.ts:43","pc":[293,294]},{"teal":242,"source":"contracts/BalancedPoolV2.algo.ts:44","pc":[295,296,297,298,299,300,301,302,303,304,305,306,307,308]},{"teal":243,"source":"contracts/BalancedPoolV2.algo.ts:44","pc":[309,310]},{"teal":244,"source":"contracts/BalancedPoolV2.algo.ts:44","pc":[311]},{"teal":245,"source":"contracts/BalancedPoolV2.algo.ts:44","pc":[312]},{"teal":246,"source":"contracts/BalancedPoolV2.algo.ts:44","pc":[313]},{"teal":250,"source":"contracts/BalancedPoolV2.algo.ts:46","pc":[314,315]},{"teal":251,"source":"contracts/BalancedPoolV2.algo.ts:46","pc":[316,317,318]},{"teal":255,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[319]},{"teal":256,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[320,321]},{"teal":257,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[322]},{"teal":258,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[323]},{"teal":259,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[324]},{"teal":262,"source":"contracts/BalancedPoolV2.algo.ts:48","errorMessage":"box value does not exist: this.balances(assetId).value","pc":[325]},{"teal":263,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[326]},{"teal":264,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[327,328]},{"teal":265,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[329]},{"teal":266,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[330]},{"teal":267,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[331,332]},{"teal":268,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[333]},{"teal":269,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[334]},{"teal":270,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[335]},{"teal":271,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[336]},{"teal":272,"source":"contracts/BalancedPoolV2.algo.ts:48","pc":[337]},{"teal":277,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[338]},{"teal":278,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[339,340]},{"teal":279,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[341]},{"teal":280,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[342]},{"teal":281,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[343]},{"teal":282,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[344]},{"teal":283,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[345]},{"teal":284,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[346,347,348]},{"teal":289,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[349]},{"teal":290,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[350,351]},{"teal":291,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[352]},{"teal":292,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[353,354]},{"teal":293,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[355]},{"teal":294,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[356]},{"teal":299,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[357]},{"teal":300,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[358,359]},{"teal":301,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[360]},{"teal":302,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[361]},{"teal":305,"source":"contracts/BalancedPoolV2.algo.ts:54","errorMessage":"box value does not exist: this.provided(this.txn.sender).value","pc":[362]},{"teal":306,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[363,364,365]},{"teal":307,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[366,367]},{"teal":308,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[368]},{"teal":309,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[369,370]},{"teal":310,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[371]},{"teal":311,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[372]},{"teal":312,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[373]},{"teal":313,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[374,375]},{"teal":314,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[376]},{"teal":315,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[377,378]},{"teal":316,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[379]},{"teal":317,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[380]},{"teal":318,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[381]},{"teal":319,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[382,383]},{"teal":320,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[384]},{"teal":321,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[385]},{"teal":322,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[386]},{"teal":323,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[387]},{"teal":324,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[388]},{"teal":325,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[389]},{"teal":326,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[390]},{"teal":327,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[391]},{"teal":328,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[392]},{"teal":329,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[393]},{"teal":330,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[394,395,396]},{"teal":331,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[397]},{"teal":332,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[398]},{"teal":333,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[399]},{"teal":334,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[400]},{"teal":339,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[401,402,403]},{"teal":340,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[404]},{"teal":343,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[405,406,407]},{"teal":344,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[408]},{"teal":345,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[409]},{"teal":349,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[410,411,412]},{"teal":354,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[413,414]},{"teal":355,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[415,416]},{"teal":356,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[417,418]},{"teal":357,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[419]},{"teal":358,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[420]},{"teal":359,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[421,422,423]},{"teal":364,"source":"contracts/BalancedPoolV2.algo.ts:89","pc":[424]},{"teal":373,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[425]},{"teal":374,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[426,427]},{"teal":375,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[428,429]},{"teal":379,"source":"contracts/BalancedPoolV2.algo.ts:93","pc":[430,431]},{"teal":380,"source":"contracts/BalancedPoolV2.algo.ts:93","pc":[432,433]},{"teal":384,"source":"contracts/BalancedPoolV2.algo.ts:94","pc":[434,435]},{"teal":385,"source":"contracts/BalancedPoolV2.algo.ts:94","pc":[436,437]},{"teal":389,"source":"contracts/BalancedPoolV2.algo.ts:95","pc":[438]},{"teal":390,"source":"contracts/BalancedPoolV2.algo.ts:95","pc":[439,440]},{"teal":393,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[441]},{"teal":394,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[442,443]},{"teal":397,"source":"contracts/BalancedPoolV2.algo.ts:92","pc":[444]},{"teal":398,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[445]},{"teal":402,"source":"contracts/BalancedPoolV2.algo.ts:99","pc":[446,447,448]},{"teal":407,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[449]},{"teal":408,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[450,451]},{"teal":409,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[452]},{"teal":410,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[453]},{"teal":411,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[454]},{"teal":412,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[455]},{"teal":413,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[456]},{"teal":414,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[457]},{"teal":415,"source":"contracts/BalancedPoolV2.algo.ts:100","pc":[458,459,460]},{"teal":420,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[461]},{"teal":421,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[462,463]},{"teal":422,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[464]},{"teal":423,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[465]},{"teal":424,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[466]},{"teal":425,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[467]},{"teal":426,"source":"contracts/BalancedPoolV2.algo.ts:101","pc":[468]},{"teal":432,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[469,470]},{"teal":433,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[471,472]},{"teal":434,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[473]},{"teal":435,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[474]},{"teal":436,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[475]},{"teal":437,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[476]},{"teal":438,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[477]},{"teal":439,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[478]},{"teal":440,"source":"contracts/BalancedPoolV2.algo.ts:104","pc":[479,480,481]},{"teal":445,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[482,483]},{"teal":446,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[484,485]},{"teal":447,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[486]},{"teal":448,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[487]},{"teal":449,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[488]},{"teal":450,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[489]},{"teal":451,"source":"contracts/BalancedPoolV2.algo.ts:105","pc":[490]},{"teal":457,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[491]},{"teal":458,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[492,493]},{"teal":459,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[494]},{"teal":460,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[495]},{"teal":461,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[496]},{"teal":462,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[497]},{"teal":463,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[498]},{"teal":464,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[499]},{"teal":465,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[500,501,502]},{"teal":470,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[503]},{"teal":471,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[504,505]},{"teal":472,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[506]},{"teal":473,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[507]},{"teal":474,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[508]},{"teal":475,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[509]},{"teal":476,"source":"contracts/BalancedPoolV2.algo.ts:109","pc":[510]},{"teal":481,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[511]},{"teal":482,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[512,513]},{"teal":483,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[514]},{"teal":484,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[515]},{"teal":485,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[516,517]},{"teal":486,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[518]},{"teal":487,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[519]},{"teal":491,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[520,521]},{"teal":492,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[522,523]},{"teal":493,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[524]},{"teal":494,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[525]},{"teal":495,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[526,527]},{"teal":496,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[528]},{"teal":497,"source":"contracts/BalancedPoolV2.algo.ts:113","pc":[529]},{"teal":501,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[530]},{"teal":502,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[531,532]},{"teal":503,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[533]},{"teal":504,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[534]},{"teal":505,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[535,536,537,538,539,540,541,542,543,544]},{"teal":506,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[545]},{"teal":507,"source":"contracts/BalancedPoolV2.algo.ts:99","pc":[546]},{"teal":511,"source":"contracts/BalancedPoolV2.algo.ts:117","pc":[547,548,549]},{"teal":515,"source":"contracts/BalancedPoolV2.algo.ts:118","pc":[550,551]},{"teal":516,"source":"contracts/BalancedPoolV2.algo.ts:118","pc":[552,553]},{"teal":517,"source":"contracts/BalancedPoolV2.algo.ts:118","pc":[554]},{"teal":518,"source":"contracts/BalancedPoolV2.algo.ts:118","pc":[555]},{"teal":521,"source":"contracts/BalancedPoolV2.algo.ts:118","errorMessage":"only the manager can call this method","pc":[556]},{"teal":526,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[557,558]},{"teal":527,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[559]},{"teal":528,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[560]},{"teal":529,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[561]},{"teal":530,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[562,563,564]},{"teal":545,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[565,566]},{"teal":546,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[567]},{"teal":547,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[568,569]},{"teal":548,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[570,571]},{"teal":552,"source":"contracts/BalancedPoolV2.algo.ts:122","pc":[572,573]},{"teal":553,"source":"contracts/BalancedPoolV2.algo.ts:122","pc":[574,575]},{"teal":554,"source":"contracts/BalancedPoolV2.algo.ts:122","pc":[576]},{"teal":555,"source":"contracts/BalancedPoolV2.algo.ts:122","pc":[577,578]},{"teal":559,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[579,580]},{"teal":560,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[581,582]},{"teal":564,"source":"contracts/BalancedPoolV2.algo.ts:124","pc":[583,584]},{"teal":565,"source":"contracts/BalancedPoolV2.algo.ts:124","pc":[585,586]},{"teal":569,"source":"contracts/BalancedPoolV2.algo.ts:125","pc":[587,588]},{"teal":570,"source":"contracts/BalancedPoolV2.algo.ts:125","pc":[589,590]},{"teal":574,"source":"contracts/BalancedPoolV2.algo.ts:126","pc":[591,592]},{"teal":575,"source":"contracts/BalancedPoolV2.algo.ts:126","pc":[593,594]},{"teal":579,"source":"contracts/BalancedPoolV2.algo.ts:127","pc":[595,596]},{"teal":580,"source":"contracts/BalancedPoolV2.algo.ts:127","pc":[597,598]},{"teal":584,"source":"contracts/BalancedPoolV2.algo.ts:128","pc":[599]},{"teal":585,"source":"contracts/BalancedPoolV2.algo.ts:128","pc":[600,601]},{"teal":589,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[602,603,604,605,606,607,608,609,610,611,612,613,614,615,616]},{"teal":590,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[617,618,619]},{"teal":591,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[620]},{"teal":592,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[621]},{"teal":593,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[622,623]},{"teal":597,"source":"contracts/BalancedPoolV2.algo.ts:130","pc":[624,625,626,627]},{"teal":598,"source":"contracts/BalancedPoolV2.algo.ts:130","pc":[628,629]},{"teal":601,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[630]},{"teal":602,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[631,632]},{"teal":605,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[633]},{"teal":606,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[634,635]},{"teal":607,"source":"contracts/BalancedPoolV2.algo.ts:121","pc":[636]},{"teal":610,"source":"contracts/BalancedPoolV2.algo.ts:117","pc":[637]},{"teal":614,"source":"contracts/BalancedPoolV2.algo.ts:135","pc":[638,639,640]},{"teal":618,"source":"contracts/BalancedPoolV2.algo.ts:136","pc":[641,642]},{"teal":619,"source":"contracts/BalancedPoolV2.algo.ts:136","pc":[643,644]},{"teal":620,"source":"contracts/BalancedPoolV2.algo.ts:136","pc":[645]},{"teal":621,"source":"contracts/BalancedPoolV2.algo.ts:136","pc":[646]},{"teal":624,"source":"contracts/BalancedPoolV2.algo.ts:136","errorMessage":"only the manager can call this method","pc":[647]},{"teal":625,"source":"contracts/BalancedPoolV2.algo.ts:135","pc":[648]},{"teal":631,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[649,650,651]},{"teal":634,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[652]},{"teal":635,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[653,654]},{"teal":639,"source":"contracts/BalancedPoolV2.algo.ts:143","pc":[655,656]},{"teal":640,"source":"contracts/BalancedPoolV2.algo.ts:143","pc":[657]},{"teal":641,"source":"contracts/BalancedPoolV2.algo.ts:143","pc":[658]},{"teal":644,"source":"contracts/BalancedPoolV2.algo.ts:143","errorMessage":"log undefined for x ≤ 0","pc":[659]},{"teal":648,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[660,661]},{"teal":649,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[662]},{"teal":650,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[663]},{"teal":651,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[664]},{"teal":652,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[665]},{"teal":653,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[666,667]},{"teal":654,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[668]},{"teal":655,"source":"contracts/BalancedPoolV2.algo.ts:146","pc":[669,670]},{"teal":659,"source":"contracts/BalancedPoolV2.algo.ts:147","pc":[671,672]},{"teal":660,"source":"contracts/BalancedPoolV2.algo.ts:147","pc":[673,674]},{"teal":664,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[675,676]},{"teal":665,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[677,678]},{"teal":669,"source":"contracts/BalancedPoolV2.algo.ts:149","pc":[679]},{"teal":670,"source":"contracts/BalancedPoolV2.algo.ts:149","pc":[680,681]},{"teal":674,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[682,683]},{"teal":675,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[684,685]},{"teal":680,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[686,687]},{"teal":681,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[688,689]},{"teal":682,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[690]},{"teal":683,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[691,692,693]},{"teal":687,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[694,695]},{"teal":688,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[696,697]},{"teal":689,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[698]},{"teal":690,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[699]},{"teal":691,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[700]},{"teal":692,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[701,702]},{"teal":696,"source":"contracts/BalancedPoolV2.algo.ts:153","pc":[703,704]},{"teal":697,"source":"contracts/BalancedPoolV2.algo.ts:153","pc":[705,706]},{"teal":698,"source":"contracts/BalancedPoolV2.algo.ts:153","pc":[707]},{"teal":699,"source":"contracts/BalancedPoolV2.algo.ts:153","pc":[708,709]},{"teal":703,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[710,711]},{"teal":704,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[712,713,714]},{"teal":705,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[715,716]},{"teal":706,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[717,718]},{"teal":707,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[719]},{"teal":708,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[720,721,722]},{"teal":711,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[723,724]},{"teal":712,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[725,726]},{"teal":713,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[727]},{"teal":716,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[728,729]},{"teal":720,"source":"contracts/BalancedPoolV2.algo.ts:155","pc":[730,731]},{"teal":721,"source":"contracts/BalancedPoolV2.algo.ts:155","pc":[732]},{"teal":722,"source":"contracts/BalancedPoolV2.algo.ts:155","pc":[733,734]},{"teal":727,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[735,736]},{"teal":728,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[737]},{"teal":729,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[738]},{"teal":730,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[739,740]},{"teal":731,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[741,742,743]},{"teal":736,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[744,745]},{"teal":739,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[746,747]},{"teal":742,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[748,749]},{"teal":743,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[750]},{"teal":749,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[751,752,753]},{"teal":752,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[754]},{"teal":753,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[755,756]},{"teal":757,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[757]},{"teal":758,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[758,759]},{"teal":762,"source":"contracts/BalancedPoolV2.algo.ts:166","pc":[760]},{"teal":763,"source":"contracts/BalancedPoolV2.algo.ts:166","pc":[761,762]},{"teal":767,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[763]},{"teal":768,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[764,765]},{"teal":773,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[766,767]},{"teal":774,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[768,769]},{"teal":775,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[770]},{"teal":776,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[771,772,773]},{"teal":780,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[774,775]},{"teal":781,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[776,777]},{"teal":782,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[778]},{"teal":783,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[779,780]},{"teal":784,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[781]},{"teal":785,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[782]},{"teal":786,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[783]},{"teal":787,"source":"contracts/BalancedPoolV2.algo.ts:169","pc":[784,785]},{"teal":791,"source":"contracts/BalancedPoolV2.algo.ts:170","pc":[786,787]},{"teal":792,"source":"contracts/BalancedPoolV2.algo.ts:170","pc":[788,789]},{"teal":793,"source":"contracts/BalancedPoolV2.algo.ts:170","pc":[790]},{"teal":794,"source":"contracts/BalancedPoolV2.algo.ts:170","pc":[791,792]},{"teal":799,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[793,794]},{"teal":800,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[795]},{"teal":801,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[796]},{"teal":802,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[797,798]},{"teal":803,"source":"contracts/BalancedPoolV2.algo.ts:168","pc":[799,800,801]},{"teal":808,"source":"contracts/BalancedPoolV2.algo.ts:173","pc":[802,803]},{"teal":811,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[804,805]},{"teal":814,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[806,807]},{"teal":815,"source":"contracts/BalancedPoolV2.algo.ts:164","pc":[808]},{"teal":821,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[809,810,811]},{"teal":824,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[812]},{"teal":825,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[813]},{"teal":829,"source":"contracts/BalancedPoolV2.algo.ts:180","pc":[814,815]},{"teal":830,"source":"contracts/BalancedPoolV2.algo.ts:180","pc":[816,817,818]},{"teal":831,"source":"contracts/BalancedPoolV2.algo.ts:180","pc":[819,820]},{"teal":835,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[821,822]},{"teal":836,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[823,824]},{"teal":837,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[825]},{"teal":838,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[826]},{"teal":839,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[827]},{"teal":840,"source":"contracts/BalancedPoolV2.algo.ts:181","pc":[828,829]},{"teal":844,"source":"contracts/BalancedPoolV2.algo.ts:182","pc":[830,831]},{"teal":845,"source":"contracts/BalancedPoolV2.algo.ts:182","pc":[832,833,834]},{"teal":848,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[835,836]},{"teal":851,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[837,838]},{"teal":852,"source":"contracts/BalancedPoolV2.algo.ts:179","pc":[839]},{"teal":856,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[840,841,842]},{"teal":859,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[843]},{"teal":860,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[844,845]},{"teal":864,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[846,847]},{"teal":865,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[848,849,850,851]},{"teal":866,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[852]},{"teal":867,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[853]},{"teal":868,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[854]},{"teal":869,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[855,856]},{"teal":873,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[857,858]},{"teal":874,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[859,860]},{"teal":875,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[861,862]},{"teal":876,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[863]},{"teal":877,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[864]},{"teal":878,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[865,866]},{"teal":882,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[867,868]},{"teal":883,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[869]},{"teal":884,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[870]},{"teal":885,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[871,872]},{"teal":886,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[873]},{"teal":887,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[874,875]},{"teal":891,"source":"contracts/BalancedPoolV2.algo.ts:202","pc":[876,877]},{"teal":892,"source":"contracts/BalancedPoolV2.algo.ts:202","pc":[878,879]},{"teal":893,"source":"contracts/BalancedPoolV2.algo.ts:202","pc":[880,881,882]},{"teal":894,"source":"contracts/BalancedPoolV2.algo.ts:202","pc":[883,884]},{"teal":898,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[885,886]},{"teal":899,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[887]},{"teal":900,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[888,889]},{"teal":901,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[890]},{"teal":902,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[891]},{"teal":903,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[892]},{"teal":904,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[893]},{"teal":907,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[894,895]},{"teal":910,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[896,897]},{"teal":911,"source":"contracts/BalancedPoolV2.algo.ts:185","pc":[898]},{"teal":914,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[899,900]},{"teal":915,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[901,902,903]},{"teal":916,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[904,905,906,907,908,909]},{"teal":917,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[910,911,912]},{"teal":918,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[913,914,915,916]},{"teal":921,"source":"contracts/BalancedPoolV2.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[917]},{"teal":924,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[918,919,920,921,922,923]},{"teal":925,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[924,925,926,927,928,929]},{"teal":926,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[930,931,932,933,934,935]},{"teal":927,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[936,937,938]},{"teal":928,"source":"contracts/BalancedPoolV2.algo.ts:5","pc":[939,940,941,942,943,944,945,946]},{"teal":931,"source":"contracts/BalancedPoolV2.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[947]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAMCEPQgBCgYmBwAJYmFsYW5jZXNfCXByb3ZpZGVkXwdhc3NldHNfBXRva2VuCHdlaWdodHNfB21hbmFnZXIxGBQhBQsxGQiNDAMyAAAAAAAAAAAAAAMfAAAAAAAAAAAAAACIAAIlQ4oAACcGNjIAcgdIZ4mABBUffHU2GgJXAgA2GgFXAgCIAAUWULAlQ4oCAShJiAHlIowAIowBiwGL/xUkCgxBAEOL/jX/IosBJAsINP9MJFgXi/81/yKLASQLCDT/TCRYF4sBiADviwCL/jX/IosBJAsINP9MJFgXCIwAiwElCIwBQv+yiwAjEkSIAS4nBGSMAEYBiTYaA0kVgSASRDYaAhc2GgEXiAACJUOKAwAoJwRkIhNEK4v/FlC+RBeMAIAMQXNzZXQgSUQgPT4giwAWULCLAIgAWymLABZQvkQXi/4IKYsAFlBMFr8qi/1QvUxIFEEACCqL/VCBQLlIKjEAUL5EVwIANf8ii/8kCwg0/0yL/hZdKjEAUEm8SExJFSQKFlcGAkxQv4k2GgEXiAACJUOKAQAyCov/cABMSEEAAYmxgQSyEDIKshSL/7IRIrISIrIBs4mKAwAri/8WUL1MSBRBAAgri/8WUCS5SCcFi/8WUL1MSBRBAAknBYv/FlAkuUgpi/4WUL1MSBRBAAgpi/4WUCS5SCuL/xZQi/4WvycFi/8WUIv9Fr8pi/4WUIAIAAAAAAAAAAC/iYoAADEAJwZkEkQnBGQiEkEASCcEsYEDshAhBIEQlLIiIQWyIzIKsioyCrIpMgOyLDIDsisisiSADUJhbGFuY2VkUG9vbC02MgAWULImgAJMULIlIrIBs7Q8Z4mKAAAxACcGZBJEiYoBAShHBYv/Ig1Ei/8jCSMLi/8KjACLAIwBiwCMAiKMA4ECjASLBCEEDkEAMosCiwALIwqMAosCiwQKjAWLA0EACIsBiwUJQgAFiwGLBQiMAYsDFIwDiwQlCIwEQv/GiwGMAEYFiYoBAShHAiOMACOMASWMAosCIQQOQQAciwGL/wuLAiMLCowBiwCLAQiMAIsCJQiMAkL/3IsAjABGAomKAgEoSYv/iP9WjACL/osACyMKjAGLAYj/rIwARgGJigUBKEcDi/uB2Pw8CyMKjACL/4v/iwAICowBi/4jC4v8CowCiwKLAYj/towDi/0jiwMJCyMKjABGA4kxG0H83YAEuER7NjYaAI4B/NAAgATmNf21gASr334VgAQfxMPjNhoAjgP8xP1K/d4A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BalancedPoolV2 contract
 */
export type BalancedPoolV2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64[],uint64[])uint64': {
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,address)void': {
      index: bigint | number
      amount: bigint | number
      sender: string
    }
    'optIn(uint64)void': {
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64[],uint64[])uint64': [assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,address)void': [index: bigint | number, amount: bigint | number, sender: string]
    'optIn(uint64)void': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BalancedPoolV2Returns = {
  'createApplication()void': void
  'bootstrap(uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,address)void': void
  'optIn(uint64)void': void
}

/**
 * Defines the types of available calls and state of the BalancedPoolV2 smart contract.
 */
export type BalancedPoolV2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BalancedPoolV2Args['obj']['createApplication()void']
      argsTuple: BalancedPoolV2Args['tuple']['createApplication()void']
      returns: BalancedPoolV2Returns['createApplication()void']
    }>
    & Record<'bootstrap(uint64[],uint64[])uint64' | 'bootstrap', {
      argsObj: BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64']
      argsTuple: BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']
      returns: BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,address)void' | 'addLiquidity', {
      argsObj: BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void']
      argsTuple: BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']
      returns: BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void']
    }>
    & Record<'optIn(uint64)void' | 'optIn', {
      argsObj: BalancedPoolV2Args['obj']['optIn(uint64)void']
      argsTuple: BalancedPoolV2Args['tuple']['optIn(uint64)void']
      returns: BalancedPoolV2Returns['optIn(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
        token: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        assets: Map<bigint | number, bigint>
        weights: Map<bigint | number, bigint>
        balances: Map<bigint | number, bigint>
        provided: Map<string, bigint[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BalancedPoolV2Signatures = keyof BalancedPoolV2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BalancedPoolV2NonVoidMethodSignatures = keyof BalancedPoolV2Types['methods'] extends infer T ? T extends keyof BalancedPoolV2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BalancedPoolV2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BalancedPoolV2Signatures> = BalancedPoolV2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BalancedPoolV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BalancedPoolV2Signatures> = BalancedPoolV2Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BalancedPoolV2Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BalancedPoolV2Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BalancedPoolV2CreateCallParams =
  | Expand<CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BalancedPoolV2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BalancedPoolV2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BalancedPoolV2 smart contract
 */
export abstract class BalancedPoolV2ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BalancedPoolV2CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BalancedPoolV2ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BalancedPoolV2 smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64[],uint64[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,address)void ABI method
   *
   * Provide Liquidity to the pool proportionally to the weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index, params.args.amount, params.args.sender],
    }
  }
  /**
   * Constructs a no op call for the optIn(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIn(params: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIn(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BalancedPoolV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BalancedPoolV2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BalancedPoolV2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BalancedPoolV2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BalancedPoolV2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BalancedPoolV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BalancedPoolV2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BalancedPoolV2ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BalancedPoolV2CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BalancedPoolV2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BalancedPoolV2Returns['createApplication()void']) }, appClient: new BalancedPoolV2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BalancedPoolV2 smart contract
 */
export class BalancedPoolV2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BalancedPoolV2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the BalancedPoolV2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BalancedPoolV2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BalancedPoolV2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BalancedPoolV2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BalancedPoolV2Client> {
    return new BalancedPoolV2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BalancedPoolV2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BalancedPoolV2Client> {
    return new BalancedPoolV2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide Liquidity to the pool proportionally to the weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `optIn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIn: (params: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.optIn(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide Liquidity to the pool proportionally to the weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `optIn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIn: (params: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.optIn(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide Liquidity to the pool proportionally to the weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `optIn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIn: async (params: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.optIn(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['optIn(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BalancedPoolV2Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BalancedPoolV2 app
   */
  state = {
    /**
     * Methods to access global state for the current BalancedPoolV2 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
          token: result.token,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
      /**
       * Get the current value of the token key in global state
       */
      token: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BalancedPoolV2 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the assets map in box state
       */
      assets: {
        /**
         * Get all current values of the assets map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("assets")) as Map<bigint, bigint> },
        /**
         * Get a current value of the assets map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("assets", key) as bigint | undefined },
      },
      /**
       * Get values from the weights map in box state
       */
      weights: {
        /**
         * Get all current values of the weights map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("weights")) as Map<bigint, bigint> },
        /**
         * Get a current value of the weights map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("weights", key) as bigint | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<bigint, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the provided map in box state
       */
      provided: {
        /**
         * Get all current values of the provided map in box state
         */
        getMap: async (): Promise<Map<string, bigint[]>> => { return (await this.appClient.state.box.getMap("provided")) as Map<string, bigint[]> },
        /**
         * Get a current value of the provided map by key from box state
         */
        value: async (key: string): Promise<bigint[] | undefined> => { return await this.appClient.state.box.getMapValue("provided", key) as bigint[] | undefined },
      },
    },
  }

  public newGroup(): BalancedPoolV2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64[],uint64[])uint64 method call against the BalancedPoolV2 contract
       */
      bootstrap(params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,address)void method call against the BalancedPoolV2 contract
       */
      addLiquidity(params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optIn(uint64)void method call against the BalancedPoolV2 contract
       */
      optIn(params: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BalancedPoolV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BalancedPoolV2Composer
  }
}
export type BalancedPoolV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64[],uint64[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,address)void ABI method.
   *
   * Provide Liquidity to the pool proportionally to the weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the optIn(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(params?: CallParams<BalancedPoolV2Args['obj']['optIn(uint64)void'] | BalancedPoolV2Args['tuple']['optIn(uint64)void']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['optIn(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BalancedPoolV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BalancedPoolV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BalancedPoolV2ComposerResults<TReturns>>
}
export type BalancedPoolV2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

