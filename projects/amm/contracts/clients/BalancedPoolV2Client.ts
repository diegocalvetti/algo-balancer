/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BalancedPoolV2","desc":"","methods":[{"name":"createApplication","desc":"Initializes global state variables when the application is first created.\n\n\nThis method is automatically invoked during the application's creation call ( with bare create).\nIt sets the initial manager to the app creator.\n\n\nThis function should only be called once at contract deployment.","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","desc":"Bootstrap the pool by assigning assets and weights, create the LP tokens.","args":[{"name":"assetIds","type":"uint64[]","desc":"assets of the pool"},{"name":"weights","type":"uint64[]","desc":"weights of the pool\n uint64 - LP Token created ID"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Provide one token liquidity to the pool","args":[{"name":"index","type":"uint64","desc":"index of the token in the pool"},{"name":"amount","type":"uint64","desc":"amount of token sent"},{"name":"sender","type":"address","desc":"the sender"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getLiquidity","desc":"Mints LP tokens to the given sender based on the liquidity they provided.\n\n\nIf this is the first liquidity provision (i.e., total LP supply is 0),\na fixed initial amount is minted to the sender. Otherwise, the amount\nis calculated proportionally using .\n\n\nAfter minting, the sender's \"provided\" state is reset.","args":[{"name":"sender","type":"address","desc":"The address receiving the LP tokens"}],"returns":{"type":"uint64","desc":"The amount of LP tokens minted"},"actions":{"create":[],"call":["NoOp"]}},{"name":"burnLiquidity","desc":"Burns a given amount of LP tokens from the sender and returns\ntheir proportional share of each asset in the pool.\n\n\nThe withdrawn amount for each asset is calculated based on the\nratio of  to the total LP supply.","args":[{"name":"sender","type":"address","desc":"The address burning LP tokens"},{"name":"amountLP","type":"uint64","desc":"The amount of LP tokens to burn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","desc":"Executes a weighted swap between two tokens in the pool based on the constant mean formula.\n\n\nThe input token () is sent into the pool, and the output token () is sent back\nto the sender, following the AMM's pricing curve determined by current balances and weights.\n\n\nThis function performs the following steps:\n- Retrieves the current weights and balances for the two assets.\n- Calculates the output amount using the invariant pricing function ().\n- Updates the pool's internal balances accordingly.\n- Transfers the output asset to the sender.","args":[{"name":"sender","type":"address","desc":"The address initiating the swap."},{"name":"from","type":"uint64","desc":"Index of the input asset in the pool."},{"name":"to","type":"uint64","desc":"Index of the output asset in the pool."},{"name":"amount","type":"uint64","desc":"Amount of input asset to swap."}],"returns":{"type":"uint64","desc":"The amount of output asset received."},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeWeights","desc":"Updates the pool's asset weights, either immediately or with a time-based linear interpolation.\n\n\nIf  is zero, the new weights are applied immediately by overwriting the current weights.\nOtherwise, a linear transition is initiated from the current weights to  over the specified\nduration (measured in seconds or microseconds (?)).\n\n\nDuring the transition period, weights are dynamically computed based on the elapsed time\nbetween  and , and stored in . The current weights must be\nretrieved using a function like  for accurate interpolated values.","args":[{"name":"duration","type":"uint64","desc":"Duration of the interpolation. If 0, the weights are updated instantly."},{"name":"newWeights","type":"uint64[]","desc":"Array of new target weights for each asset in the pool."}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getTotalAssets","readonly":true,"args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getToken","readonly":true,"args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBalance","readonly":true,"args":[{"name":"index","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"estimateSwap","readonly":true,"args":[{"name":"from","type":"uint64"},{"name":"to","type":"uint64"},{"name":"amount","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getCurrentWeight","readonly":true,"args":[{"name":"index","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getTimes","readonly":true,"args":[],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":2,"ints":4},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"},"token":{"key":"dG9rZW4=","keyType":"AVMBytes","valueType":"uint64"},"burned":{"key":"YnVybmVk","keyType":"AVMBytes","valueType":"uint64"},"assets":{"key":"YXNzZXRz","keyType":"AVMBytes","valueType":"uint64[]"},"startTime":{"key":"c3RhcnRfdGltZQ==","keyType":"AVMBytes","valueType":"uint64"},"endTime":{"key":"ZW5kX3RpbWU=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"weights":{"keyType":"uint64","valueType":"uint64","prefix":"weights_"},"targetWeights":{"keyType":"uint64","valueType":"uint64","prefix":"target_weights_"},"balances":{"keyType":"uint64","valueType":"uint64","prefix":"balances_"},"provided":{"keyType":"address","valueType":"uint64[]","prefix":"provided_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[0]},{"teal":2,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14]},{"teal":3,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]},{"teal":15,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[129,130]},{"teal":16,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[131]},{"teal":17,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[132,133]},{"teal":18,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[134]},{"teal":19,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[135,136]},{"teal":20,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[137]},{"teal":21,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163]},{"teal":25,"source":"contracts/BalancedPoolV2.algo.ts:7","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[164]},{"teal":30,"source":"contracts/BalancedPoolV2.algo.ts:36","pc":[165,166,167]},{"teal":31,"source":"contracts/BalancedPoolV2.algo.ts:36","pc":[168]},{"teal":32,"source":"contracts/BalancedPoolV2.algo.ts:36","pc":[169]},{"teal":43,"source":"contracts/BalancedPoolV2.algo.ts:36","pc":[170,171,172]},{"teal":47,"source":"contracts/BalancedPoolV2.algo.ts:38","pc":[173,174]},{"teal":48,"source":"contracts/BalancedPoolV2.algo.ts:38","pc":[175,176,177]},{"teal":49,"source":"contracts/BalancedPoolV2.algo.ts:38","pc":[178,179]},{"teal":50,"source":"contracts/BalancedPoolV2.algo.ts:38","pc":[180]},{"teal":51,"source":"contracts/BalancedPoolV2.algo.ts:38","pc":[181]},{"teal":55,"source":"contracts/BalancedPoolV2.algo.ts:40","pc":[182,183]},{"teal":56,"source":"contracts/BalancedPoolV2.algo.ts:40","pc":[184]},{"teal":57,"source":"contracts/BalancedPoolV2.algo.ts:40","pc":[185]},{"teal":61,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[186,187]},{"teal":62,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[188]},{"teal":63,"source":"contracts/BalancedPoolV2.algo.ts:41","pc":[189]},{"teal":64,"source":"contracts/BalancedPoolV2.algo.ts:36","pc":[190]},{"teal":69,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[191,192]},{"teal":72,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[193,194,195]},{"teal":73,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[196,197,198]},{"teal":76,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[199,200,201]},{"teal":77,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[202,203,204]},{"teal":80,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[205,206,207]},{"teal":81,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[208]},{"teal":82,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[209]},{"teal":83,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[210]},{"teal":84,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[211]},{"teal":85,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[212]},{"teal":94,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[213,214,215]},{"teal":97,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[216]},{"teal":98,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[217]},{"teal":102,"source":"contracts/BalancedPoolV2.algo.ts:51","pc":[218,219,220]},{"teal":106,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[221,222]},{"teal":107,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[223]},{"teal":108,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[224]},{"teal":109,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[225]},{"teal":110,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[226,227]},{"teal":111,"source":"contracts/BalancedPoolV2.algo.ts:52","pc":[228]},{"teal":114,"source":"contracts/BalancedPoolV2.algo.ts:52","errorMessage":"At least 2 tokens needed","pc":[229]},{"teal":118,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[230,231]},{"teal":119,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[232]},{"teal":120,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[233]},{"teal":121,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[234]},{"teal":122,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[235,236]},{"teal":123,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[237]},{"teal":124,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[238]},{"teal":125,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[239]},{"teal":126,"source":"contracts/BalancedPoolV2.algo.ts:53","pc":[240]},{"teal":129,"source":"contracts/BalancedPoolV2.algo.ts:53","errorMessage":"Weights and Assets length must be the same","pc":[241]},{"teal":133,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[242]},{"teal":134,"source":"contracts/BalancedPoolV2.algo.ts:54","pc":[243,244]},{"teal":138,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[245]},{"teal":139,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[246,247]},{"teal":144,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[248,249]},{"teal":145,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[250,251]},{"teal":146,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[252]},{"teal":147,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[253]},{"teal":148,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[254]},{"teal":149,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[255]},{"teal":150,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[256,257,258]},{"teal":154,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[259,260]},{"teal":155,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[261,262]},{"teal":156,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[263]},{"teal":157,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[264,265]},{"teal":158,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[266]},{"teal":159,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[267]},{"teal":160,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[268]},{"teal":161,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[269,270]},{"teal":162,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[271]},{"teal":163,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[272]},{"teal":164,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[273]},{"teal":165,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[274]},{"teal":166,"source":"contracts/BalancedPoolV2.algo.ts:57","pc":[275,276,277]},{"teal":170,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[278,279]},{"teal":171,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[280,281]},{"teal":172,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[282]},{"teal":173,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[283,284]},{"teal":174,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[285]},{"teal":175,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[286]},{"teal":176,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[287]},{"teal":177,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[288,289]},{"teal":178,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[290]},{"teal":179,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[291]},{"teal":180,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[292]},{"teal":181,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[293]},{"teal":182,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[294,295]},{"teal":183,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[296,297]},{"teal":184,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[298]},{"teal":185,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[299,300]},{"teal":186,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[301]},{"teal":187,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[302]},{"teal":188,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[303]},{"teal":189,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[304,305]},{"teal":190,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[306]},{"teal":191,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[307]},{"teal":192,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[308]},{"teal":193,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[309]},{"teal":194,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[310,311]},{"teal":195,"source":"contracts/BalancedPoolV2.algo.ts:58","pc":[312,313,314]},{"teal":199,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[315,316]},{"teal":200,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[317,318]},{"teal":201,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[319,320]},{"teal":202,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[321]},{"teal":203,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[322,323]},{"teal":204,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[324]},{"teal":205,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[325]},{"teal":206,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[326]},{"teal":207,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[327,328]},{"teal":208,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[329]},{"teal":209,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[330]},{"teal":210,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[331]},{"teal":211,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[332]},{"teal":212,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[333]},{"teal":213,"source":"contracts/BalancedPoolV2.algo.ts:59","pc":[334,335]},{"teal":218,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[336,337]},{"teal":219,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[338]},{"teal":220,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[339]},{"teal":221,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[340,341]},{"teal":222,"source":"contracts/BalancedPoolV2.algo.ts:56","pc":[342,343,344]},{"teal":227,"source":"contracts/BalancedPoolV2.algo.ts:62","pc":[345,346]},{"teal":228,"source":"contracts/BalancedPoolV2.algo.ts:62","pc":[347]},{"teal":229,"source":"contracts/BalancedPoolV2.algo.ts:62","pc":[348]},{"teal":233,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[349]},{"teal":234,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[350,351]},{"teal":235,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[352]},{"teal":236,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[353]},{"teal":237,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[354]},{"teal":238,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[355]},{"teal":239,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[356]},{"teal":240,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[357,358,359]},{"teal":241,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[360]},{"teal":242,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[361]},{"teal":243,"source":"contracts/BalancedPoolV2.algo.ts:63","pc":[362]},{"teal":247,"source":"contracts/BalancedPoolV2.algo.ts:65","pc":[363]},{"teal":248,"source":"contracts/BalancedPoolV2.algo.ts:65","pc":[364,365]},{"teal":249,"source":"contracts/BalancedPoolV2.algo.ts:65","pc":[366,367,368]},{"teal":250,"source":"contracts/BalancedPoolV2.algo.ts:65","pc":[369]},{"teal":251,"source":"contracts/BalancedPoolV2.algo.ts:65","pc":[370]},{"teal":254,"source":"contracts/BalancedPoolV2.algo.ts:65","errorMessage":"Weights must sum to 1","pc":[371]},{"teal":258,"source":"contracts/BalancedPoolV2.algo.ts:66","pc":[372,373,374]},{"teal":262,"source":"contracts/BalancedPoolV2.algo.ts:68","pc":[375,376]},{"teal":263,"source":"contracts/BalancedPoolV2.algo.ts:68","pc":[377]},{"teal":266,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[378,379]},{"teal":269,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[380,381]},{"teal":270,"source":"contracts/BalancedPoolV2.algo.ts:50","pc":[382]},{"teal":275,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[383,384,385]},{"teal":276,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[386]},{"teal":277,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[387]},{"teal":278,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[388,389]},{"teal":279,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[390]},{"teal":282,"source":"contracts/BalancedPoolV2.algo.ts:77","errorMessage":"argument 0 (sender) for addLiquidity must be a address","pc":[391]},{"teal":285,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[392,393,394]},{"teal":286,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[395]},{"teal":289,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[396,397,398]},{"teal":290,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[399]},{"teal":293,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[400,401,402]},{"teal":294,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[403]},{"teal":295,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[404]},{"teal":304,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[405,406,407]},{"teal":307,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[408]},{"teal":311,"source":"contracts/BalancedPoolV2.algo.ts:78","pc":[409,410,411]},{"teal":315,"source":"contracts/BalancedPoolV2.algo.ts:79","pc":[412,413,414]},{"teal":319,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[415]},{"teal":320,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[416]},{"teal":321,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[417,418,419]},{"teal":322,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[420,421]},{"teal":323,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[422]},{"teal":324,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[423,424]},{"teal":325,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[425]},{"teal":326,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[426]},{"teal":327,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[427]},{"teal":328,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[428,429]},{"teal":329,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[430]},{"teal":330,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[431]},{"teal":331,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[432]},{"teal":332,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[433]},{"teal":333,"source":"contracts/BalancedPoolV2.algo.ts:81","pc":[434,435]},{"teal":337,"source":"contracts/BalancedPoolV2.algo.ts:82","pc":[436,437,438,439,440,441,442,443,444,445,446,447,448,449]},{"teal":338,"source":"contracts/BalancedPoolV2.algo.ts:82","pc":[450,451]},{"teal":339,"source":"contracts/BalancedPoolV2.algo.ts:82","pc":[452]},{"teal":340,"source":"contracts/BalancedPoolV2.algo.ts:82","pc":[453]},{"teal":341,"source":"contracts/BalancedPoolV2.algo.ts:82","pc":[454]},{"teal":345,"source":"contracts/BalancedPoolV2.algo.ts:84","pc":[455,456]},{"teal":346,"source":"contracts/BalancedPoolV2.algo.ts:84","pc":[457,458,459]},{"teal":350,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[460]},{"teal":351,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[461,462]},{"teal":352,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[463]},{"teal":353,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[464]},{"teal":354,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[465]},{"teal":357,"source":"contracts/BalancedPoolV2.algo.ts:85","errorMessage":"box value does not exist: this.balances(assetId).value","pc":[466]},{"teal":358,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[467]},{"teal":359,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[468,469]},{"teal":360,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[470]},{"teal":361,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[471]},{"teal":362,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[472,473]},{"teal":363,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[474]},{"teal":364,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[475]},{"teal":365,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[476]},{"teal":366,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[477]},{"teal":367,"source":"contracts/BalancedPoolV2.algo.ts:85","pc":[478]},{"teal":372,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[479]},{"teal":373,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[480,481]},{"teal":374,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[482]},{"teal":375,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[483]},{"teal":376,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[484]},{"teal":377,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[485]},{"teal":378,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[486]},{"teal":379,"source":"contracts/BalancedPoolV2.algo.ts:87","pc":[487,488,489]},{"teal":384,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[490]},{"teal":385,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[491,492]},{"teal":386,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[493]},{"teal":387,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[494]},{"teal":388,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[495]},{"teal":389,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[496,497,498]},{"teal":390,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[499]},{"teal":391,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[500]},{"teal":392,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[501]},{"teal":393,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[502]},{"teal":394,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[503]},{"teal":395,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[504]},{"teal":396,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[505]},{"teal":397,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[506]},{"teal":398,"source":"contracts/BalancedPoolV2.algo.ts:88","pc":[507]},{"teal":403,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[508]},{"teal":404,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[509,510]},{"teal":405,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[511]},{"teal":406,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[512]},{"teal":409,"source":"contracts/BalancedPoolV2.algo.ts:91","errorMessage":"box value does not exist: this.provided(sender).value","pc":[513]},{"teal":410,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[514,515,516]},{"teal":411,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[517,518]},{"teal":412,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[519]},{"teal":413,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[520,521]},{"teal":414,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[522]},{"teal":415,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[523]},{"teal":416,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[524]},{"teal":417,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[525,526]},{"teal":418,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[527]},{"teal":419,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[528]},{"teal":420,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[529,530]},{"teal":421,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[531]},{"teal":422,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[532]},{"teal":425,"source":"contracts/BalancedPoolV2.algo.ts:91","errorMessage":"box value does not exist: this.provided(sender).value","pc":[533]},{"teal":426,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[534,535,536]},{"teal":427,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[537,538]},{"teal":428,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[539]},{"teal":429,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[540,541]},{"teal":430,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[542]},{"teal":431,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[543]},{"teal":432,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[544]},{"teal":433,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[545,546]},{"teal":434,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[547]},{"teal":435,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[548]},{"teal":436,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[549]},{"teal":437,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[550]},{"teal":438,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[551,552]},{"teal":439,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[553]},{"teal":440,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[554]},{"teal":441,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[555]},{"teal":442,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[556]},{"teal":443,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[557,558]},{"teal":444,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[559]},{"teal":445,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[560]},{"teal":446,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[561]},{"teal":447,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[562]},{"teal":448,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[563]},{"teal":449,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[564]},{"teal":450,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[565]},{"teal":451,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[566]},{"teal":452,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[567]},{"teal":453,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[568]},{"teal":454,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[569,570,571]},{"teal":455,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[572]},{"teal":456,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[573]},{"teal":457,"source":"contracts/BalancedPoolV2.algo.ts:91","pc":[574]},{"teal":458,"source":"contracts/BalancedPoolV2.algo.ts:77","pc":[575]},{"teal":463,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[576,577]},{"teal":466,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[578,579,580]},{"teal":467,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[581]},{"teal":468,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[582]},{"teal":469,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[583,584]},{"teal":470,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[585]},{"teal":473,"source":"contracts/BalancedPoolV2.algo.ts:106","errorMessage":"argument 0 (sender) for getLiquidity must be a address","pc":[586]},{"teal":476,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[587,588,589]},{"teal":477,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[590]},{"teal":478,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[591]},{"teal":479,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[592]},{"teal":480,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[593]},{"teal":481,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[594]},{"teal":496,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[595,596,597]},{"teal":499,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[598]},{"teal":500,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[599]},{"teal":504,"source":"contracts/BalancedPoolV2.algo.ts:107","pc":[600,601,602]},{"teal":508,"source":"contracts/BalancedPoolV2.algo.ts:108","pc":[603,604,605]},{"teal":512,"source":"contracts/BalancedPoolV2.algo.ts:110","pc":[606]},{"teal":513,"source":"contracts/BalancedPoolV2.algo.ts:110","pc":[607,608]},{"teal":518,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[609,610,611]},{"teal":519,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[612]},{"teal":520,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[613]},{"teal":521,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[614,615,616]},{"teal":526,"source":"contracts/BalancedPoolV2.algo.ts:4","pc":[617,618,619,620]},{"teal":527,"source":"contracts/BalancedPoolV2.algo.ts:4","pc":[621,622]},{"teal":528,"source":"contracts/BalancedPoolV2.algo.ts:4","pc":[623,624]},{"teal":529,"source":"contracts/BalancedPoolV2.algo.ts:4","pc":[625]},{"teal":530,"source":"contracts/BalancedPoolV2.algo.ts:4","pc":[626]},{"teal":531,"source":"contracts/BalancedPoolV2.algo.ts:114","pc":[627,628]},{"teal":532,"source":"contracts/BalancedPoolV2.algo.ts:112","pc":[629,630,631]},{"teal":537,"source":"contracts/BalancedPoolV2.algo.ts:116","pc":[632,633]},{"teal":538,"source":"contracts/BalancedPoolV2.algo.ts:116","pc":[634,635,636]},{"teal":539,"source":"contracts/BalancedPoolV2.algo.ts:116","pc":[637,638]},{"teal":544,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[639]},{"teal":545,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[640,641]},{"teal":550,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[642,643]},{"teal":551,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[644]},{"teal":552,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[645,646]},{"teal":553,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[647]},{"teal":554,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[648]},{"teal":557,"source":"contracts/BalancedPoolV2.algo.ts:119","errorMessage":"box value does not exist: this.provided(sender).value","pc":[649]},{"teal":558,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[650,651,652]},{"teal":559,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[653]},{"teal":560,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[654]},{"teal":561,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[655]},{"teal":562,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[656]},{"teal":563,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[657,658,659]},{"teal":567,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[660]},{"teal":568,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[661,662]},{"teal":569,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[663]},{"teal":570,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[664]},{"teal":573,"source":"contracts/BalancedPoolV2.algo.ts:120","errorMessage":"box value does not exist: this.provided(sender).value","pc":[665]},{"teal":574,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[666,667,668]},{"teal":575,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[669,670]},{"teal":576,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[671]},{"teal":577,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[672,673]},{"teal":578,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[674]},{"teal":579,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[675]},{"teal":580,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[676]},{"teal":581,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[677,678]},{"teal":582,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[679]},{"teal":583,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[680,681]},{"teal":584,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[682]},{"teal":585,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[683]},{"teal":586,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[684,685]},{"teal":587,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[686]},{"teal":588,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[687]},{"teal":589,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[688]},{"teal":590,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[689]},{"teal":591,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[690]},{"teal":592,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[691]},{"teal":593,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[692]},{"teal":594,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[693]},{"teal":595,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[694]},{"teal":596,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[695]},{"teal":597,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[696,697,698]},{"teal":598,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[699]},{"teal":599,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[700]},{"teal":600,"source":"contracts/BalancedPoolV2.algo.ts:120","pc":[701]},{"teal":605,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[702,703]},{"teal":606,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[704]},{"teal":607,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[705]},{"teal":608,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[706,707]},{"teal":609,"source":"contracts/BalancedPoolV2.algo.ts:119","pc":[708,709,710]},{"teal":618,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[711]},{"teal":619,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[712,713]},{"teal":620,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[714,715]},{"teal":624,"source":"contracts/BalancedPoolV2.algo.ts:124","pc":[716,717]},{"teal":625,"source":"contracts/BalancedPoolV2.algo.ts:124","pc":[718,719]},{"teal":629,"source":"contracts/BalancedPoolV2.algo.ts:125","pc":[720,721]},{"teal":630,"source":"contracts/BalancedPoolV2.algo.ts:125","pc":[722,723]},{"teal":634,"source":"contracts/BalancedPoolV2.algo.ts:126","pc":[724,725]},{"teal":635,"source":"contracts/BalancedPoolV2.algo.ts:126","pc":[726]},{"teal":636,"source":"contracts/BalancedPoolV2.algo.ts:126","pc":[727,728]},{"teal":639,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[729]},{"teal":640,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[730,731]},{"teal":643,"source":"contracts/BalancedPoolV2.algo.ts:123","pc":[732]},{"teal":647,"source":"contracts/BalancedPoolV2.algo.ts:129","pc":[733,734]},{"teal":650,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[735,736]},{"teal":653,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[737,738]},{"teal":654,"source":"contracts/BalancedPoolV2.algo.ts:106","pc":[739]},{"teal":659,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[740,741,742]},{"teal":660,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[743]},{"teal":663,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[744,745,746]},{"teal":664,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[747]},{"teal":665,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[748]},{"teal":666,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[749,750]},{"teal":667,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[751]},{"teal":670,"source":"contracts/BalancedPoolV2.algo.ts:142","errorMessage":"argument 1 (sender) for burnLiquidity must be a address","pc":[752]},{"teal":673,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[753,754,755]},{"teal":674,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[756]},{"teal":675,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[757]},{"teal":688,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[758,759,760]},{"teal":691,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[761]},{"teal":692,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[762,763]},{"teal":696,"source":"contracts/BalancedPoolV2.algo.ts:143","pc":[764,765,766]},{"teal":700,"source":"contracts/BalancedPoolV2.algo.ts:144","pc":[767,768,769]},{"teal":704,"source":"contracts/BalancedPoolV2.algo.ts:145","pc":[770,771]},{"teal":705,"source":"contracts/BalancedPoolV2.algo.ts:145","pc":[772]},{"teal":706,"source":"contracts/BalancedPoolV2.algo.ts:145","pc":[773]},{"teal":709,"source":"contracts/BalancedPoolV2.algo.ts:145","errorMessage":"Must burn positive amount","pc":[774]},{"teal":713,"source":"contracts/BalancedPoolV2.algo.ts:147","pc":[775,776,777]},{"teal":714,"source":"contracts/BalancedPoolV2.algo.ts:147","pc":[778,779]},{"teal":718,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[780]},{"teal":719,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[781]},{"teal":720,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[782,783,784]},{"teal":721,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[785]},{"teal":722,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[786]},{"teal":723,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[787]},{"teal":724,"source":"contracts/BalancedPoolV2.algo.ts:148","pc":[788,789]},{"teal":728,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[790]},{"teal":729,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[791,792]},{"teal":734,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[793,794]},{"teal":735,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[795,796]},{"teal":736,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[797]},{"teal":737,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[798,799,800]},{"teal":741,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[801]},{"teal":742,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[802]},{"teal":743,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[803,804,805]},{"teal":744,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[806,807]},{"teal":745,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[808]},{"teal":746,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[809,810]},{"teal":747,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[811]},{"teal":748,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[812]},{"teal":749,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[813]},{"teal":750,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[814,815]},{"teal":751,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[816]},{"teal":752,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[817]},{"teal":753,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[818]},{"teal":754,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[819]},{"teal":755,"source":"contracts/BalancedPoolV2.algo.ts:151","pc":[820,821]},{"teal":759,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[822]},{"teal":760,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[823,824]},{"teal":761,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[825]},{"teal":762,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[826]},{"teal":763,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[827]},{"teal":766,"source":"contracts/BalancedPoolV2.algo.ts:152","errorMessage":"box value does not exist: this.balances(assetId).value","pc":[828]},{"teal":767,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[829]},{"teal":768,"source":"contracts/BalancedPoolV2.algo.ts:152","pc":[830,831]},{"teal":772,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[832,833]},{"teal":773,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[834,835]},{"teal":774,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[836]},{"teal":775,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[837]},{"teal":776,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[838,839]},{"teal":777,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[840]},{"teal":778,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[841]},{"teal":779,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[842]},{"teal":780,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[843]},{"teal":781,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[844]},{"teal":784,"source":"contracts/BalancedPoolV2.algo.ts:154","errorMessage":"wideRatio failed","pc":[845]},{"teal":785,"source":"contracts/BalancedPoolV2.algo.ts:154","pc":[846,847]},{"teal":789,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[848]},{"teal":790,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[849,850]},{"teal":791,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[851]},{"teal":792,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[852]},{"teal":793,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[853,854]},{"teal":794,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[855,856]},{"teal":795,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[857]},{"teal":796,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[858]},{"teal":797,"source":"contracts/BalancedPoolV2.algo.ts:156","pc":[859]},{"teal":805,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[860]},{"teal":806,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[861,862]},{"teal":807,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[863,864]},{"teal":811,"source":"contracts/BalancedPoolV2.algo.ts:159","pc":[865,866]},{"teal":812,"source":"contracts/BalancedPoolV2.algo.ts:159","pc":[867,868]},{"teal":816,"source":"contracts/BalancedPoolV2.algo.ts:160","pc":[869,870]},{"teal":817,"source":"contracts/BalancedPoolV2.algo.ts:160","pc":[871,872]},{"teal":821,"source":"contracts/BalancedPoolV2.algo.ts:161","pc":[873,874]},{"teal":822,"source":"contracts/BalancedPoolV2.algo.ts:161","pc":[875,876]},{"teal":825,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[877]},{"teal":826,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[878,879]},{"teal":829,"source":"contracts/BalancedPoolV2.algo.ts:158","pc":[880]},{"teal":834,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[881,882]},{"teal":835,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[883]},{"teal":836,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[884]},{"teal":837,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[885,886]},{"teal":838,"source":"contracts/BalancedPoolV2.algo.ts:150","pc":[887,888,889]},{"teal":843,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[890,891]},{"teal":844,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[892]},{"teal":845,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[893,894]},{"teal":846,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[895]},{"teal":847,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[896,897]},{"teal":848,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[898]},{"teal":849,"source":"contracts/BalancedPoolV2.algo.ts:165","pc":[899]},{"teal":850,"source":"contracts/BalancedPoolV2.algo.ts:142","pc":[900]},{"teal":855,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[901,902]},{"teal":858,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[903,904,905]},{"teal":859,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[906]},{"teal":862,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[907,908,909]},{"teal":863,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[910]},{"teal":866,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[911,912,913]},{"teal":867,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[914]},{"teal":870,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[915,916,917]},{"teal":871,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[918]},{"teal":872,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[919]},{"teal":873,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[920,921]},{"teal":874,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[922]},{"teal":877,"source":"contracts/BalancedPoolV2.algo.ts:186","errorMessage":"argument 3 (sender) for swap must be a address","pc":[923]},{"teal":880,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[924,925,926]},{"teal":881,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[927]},{"teal":882,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[928]},{"teal":883,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[929]},{"teal":884,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[930]},{"teal":885,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[931]},{"teal":906,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[932,933,934]},{"teal":909,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[935]},{"teal":910,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[936,937]},{"teal":914,"source":"contracts/BalancedPoolV2.algo.ts:187","pc":[938,939,940]},{"teal":918,"source":"contracts/BalancedPoolV2.algo.ts:188","pc":[941,942,943]},{"teal":922,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[944]},{"teal":923,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[945]},{"teal":924,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[946,947,948]},{"teal":925,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[949,950]},{"teal":926,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[951]},{"teal":927,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[952,953]},{"teal":928,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[954]},{"teal":929,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[955]},{"teal":930,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[956]},{"teal":931,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[957,958]},{"teal":932,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[959]},{"teal":933,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[960]},{"teal":934,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[961]},{"teal":935,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[962]},{"teal":936,"source":"contracts/BalancedPoolV2.algo.ts:190","pc":[963,964]},{"teal":940,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[965]},{"teal":941,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[966]},{"teal":942,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[967,968,969]},{"teal":943,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[970,971]},{"teal":944,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[972]},{"teal":945,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[973,974]},{"teal":946,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[975]},{"teal":947,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[976]},{"teal":948,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[977]},{"teal":949,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[978,979]},{"teal":950,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[980]},{"teal":951,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[981]},{"teal":952,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[982]},{"teal":953,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[983]},{"teal":954,"source":"contracts/BalancedPoolV2.algo.ts:191","pc":[984,985]},{"teal":958,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[986]},{"teal":959,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[987,988]},{"teal":960,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[989]},{"teal":961,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[990]},{"teal":962,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[991]},{"teal":965,"source":"contracts/BalancedPoolV2.algo.ts:193","errorMessage":"box value does not exist: this.balances(assetIn).value","pc":[992]},{"teal":966,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[993]},{"teal":967,"source":"contracts/BalancedPoolV2.algo.ts:193","pc":[994,995]},{"teal":971,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[996]},{"teal":972,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[997,998]},{"teal":973,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[999]},{"teal":974,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[1000]},{"teal":975,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[1001]},{"teal":978,"source":"contracts/BalancedPoolV2.algo.ts:194","errorMessage":"box value does not exist: this.balances(assetOut).value","pc":[1002]},{"teal":979,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[1003]},{"teal":980,"source":"contracts/BalancedPoolV2.algo.ts:194","pc":[1004,1005]},{"teal":984,"source":"contracts/BalancedPoolV2.algo.ts:196","pc":[1006,1007]},{"teal":985,"source":"contracts/BalancedPoolV2.algo.ts:196","pc":[1008,1009,1010]},{"teal":986,"source":"contracts/BalancedPoolV2.algo.ts:196","pc":[1011,1012]},{"teal":990,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[1013,1014]},{"teal":991,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[1015,1016,1017]},{"teal":992,"source":"contracts/BalancedPoolV2.algo.ts:197","pc":[1018,1019]},{"teal":996,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1020,1021]},{"teal":997,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1022,1023]},{"teal":998,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1024,1025]},{"teal":999,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1026,1027]},{"teal":1000,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1028,1029]},{"teal":1001,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1030,1031,1032]},{"teal":1002,"source":"contracts/BalancedPoolV2.algo.ts:199","pc":[1033,1034]},{"teal":1006,"source":"contracts/BalancedPoolV2.algo.ts:201","pc":[1035,1036]},{"teal":1007,"source":"contracts/BalancedPoolV2.algo.ts:201","pc":[1037]},{"teal":1008,"source":"contracts/BalancedPoolV2.algo.ts:201","pc":[1038]},{"teal":1012,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1039]},{"teal":1013,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1040,1041]},{"teal":1014,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1042]},{"teal":1015,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1043]},{"teal":1016,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1044,1045]},{"teal":1017,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1046,1047]},{"teal":1018,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1048]},{"teal":1019,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1049]},{"teal":1020,"source":"contracts/BalancedPoolV2.algo.ts:203","pc":[1050]},{"teal":1024,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1051]},{"teal":1025,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1052,1053]},{"teal":1026,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1054]},{"teal":1027,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1055]},{"teal":1028,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1056,1057]},{"teal":1029,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1058,1059]},{"teal":1030,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1060]},{"teal":1031,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1061]},{"teal":1032,"source":"contracts/BalancedPoolV2.algo.ts:204","pc":[1062]},{"teal":1040,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1063]},{"teal":1041,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1064,1065]},{"teal":1042,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1066,1067]},{"teal":1046,"source":"contracts/BalancedPoolV2.algo.ts:207","pc":[1068,1069]},{"teal":1047,"source":"contracts/BalancedPoolV2.algo.ts:207","pc":[1070,1071]},{"teal":1051,"source":"contracts/BalancedPoolV2.algo.ts:208","pc":[1072,1073]},{"teal":1052,"source":"contracts/BalancedPoolV2.algo.ts:208","pc":[1074,1075]},{"teal":1056,"source":"contracts/BalancedPoolV2.algo.ts:209","pc":[1076,1077]},{"teal":1057,"source":"contracts/BalancedPoolV2.algo.ts:209","pc":[1078,1079]},{"teal":1060,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1080]},{"teal":1061,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1081,1082]},{"teal":1064,"source":"contracts/BalancedPoolV2.algo.ts:206","pc":[1083]},{"teal":1068,"source":"contracts/BalancedPoolV2.algo.ts:212","pc":[1084,1085]},{"teal":1071,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[1086,1087]},{"teal":1074,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[1088,1089]},{"teal":1075,"source":"contracts/BalancedPoolV2.algo.ts:186","pc":[1090]},{"teal":1080,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1091,1092]},{"teal":1083,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1093,1094,1095]},{"teal":1084,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1096,1097,1098]},{"teal":1087,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1099,1100,1101]},{"teal":1088,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1102]},{"teal":1091,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1103,1104,1105]},{"teal":1092,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1106]},{"teal":1093,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1107]},{"teal":1094,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1108]},{"teal":1095,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1109]},{"teal":1096,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1110]},{"teal":1113,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1111,1112,1113]},{"teal":1116,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1114]},{"teal":1117,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1115]},{"teal":1121,"source":"contracts/BalancedPoolV2.algo.ts:230","pc":[1116,1117,1118]},{"teal":1125,"source":"contracts/BalancedPoolV2.algo.ts:231","pc":[1119,1120,1121]},{"teal":1129,"source":"contracts/BalancedPoolV2.algo.ts:233","pc":[1122,1123]},{"teal":1130,"source":"contracts/BalancedPoolV2.algo.ts:233","pc":[1124,1125]},{"teal":1134,"source":"contracts/BalancedPoolV2.algo.ts:235","pc":[1126,1127]},{"teal":1135,"source":"contracts/BalancedPoolV2.algo.ts:235","pc":[1128,1129]},{"teal":1136,"source":"contracts/BalancedPoolV2.algo.ts:235","pc":[1130]},{"teal":1140,"source":"contracts/BalancedPoolV2.algo.ts:236","pc":[1131,1132]},{"teal":1141,"source":"contracts/BalancedPoolV2.algo.ts:236","pc":[1133,1134]},{"teal":1142,"source":"contracts/BalancedPoolV2.algo.ts:236","pc":[1135,1136]},{"teal":1143,"source":"contracts/BalancedPoolV2.algo.ts:236","pc":[1137]},{"teal":1144,"source":"contracts/BalancedPoolV2.algo.ts:236","pc":[1138]},{"teal":1148,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1139]},{"teal":1149,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1140,1141]},{"teal":1154,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1142,1143]},{"teal":1155,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1144,1145]},{"teal":1156,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1146]},{"teal":1157,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1147]},{"teal":1158,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1148]},{"teal":1159,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1149]},{"teal":1160,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1150,1151,1152]},{"teal":1164,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1153,1154]},{"teal":1165,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1155,1156]},{"teal":1166,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1157]},{"teal":1167,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1158]},{"teal":1168,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1159,1160]},{"teal":1169,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1161,1162]},{"teal":1170,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1163]},{"teal":1171,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1164,1165]},{"teal":1172,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1166]},{"teal":1173,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1167]},{"teal":1174,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1168]},{"teal":1175,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1169,1170]},{"teal":1176,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1171]},{"teal":1177,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1172]},{"teal":1178,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1173]},{"teal":1179,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1174]},{"teal":1180,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1175]},{"teal":1181,"source":"contracts/BalancedPoolV2.algo.ts:239","pc":[1176]},{"teal":1186,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1177,1178]},{"teal":1187,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1179]},{"teal":1188,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1180]},{"teal":1189,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1181,1182]},{"teal":1190,"source":"contracts/BalancedPoolV2.algo.ts:238","pc":[1183,1184,1185]},{"teal":1195,"source":"contracts/BalancedPoolV2.algo.ts:242","pc":[1186,1187]},{"teal":1196,"source":"contracts/BalancedPoolV2.algo.ts:242","pc":[1188]},{"teal":1199,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1189,1190]},{"teal":1202,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1191,1192]},{"teal":1203,"source":"contracts/BalancedPoolV2.algo.ts:229","pc":[1193]},{"teal":1207,"source":"contracts/BalancedPoolV2.algo.ts:245","pc":[1194,1195,1196]},{"teal":1210,"source":"contracts/BalancedPoolV2.algo.ts:245","pc":[1197]},{"teal":1215,"source":"contracts/BalancedPoolV2.algo.ts:246","pc":[1198,1199]},{"teal":1216,"source":"contracts/BalancedPoolV2.algo.ts:246","pc":[1200,1201]},{"teal":1217,"source":"contracts/BalancedPoolV2.algo.ts:246","pc":[1202]},{"teal":1218,"source":"contracts/BalancedPoolV2.algo.ts:246","pc":[1203]},{"teal":1219,"source":"contracts/BalancedPoolV2.algo.ts:246","pc":[1204,1205,1206]},{"teal":1224,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1207]},{"teal":1225,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1208,1209]},{"teal":1230,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1210,1211]},{"teal":1231,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1212]},{"teal":1232,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1213]},{"teal":1233,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1214,1215,1216]},{"teal":1234,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1217]},{"teal":1235,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1218]},{"teal":1236,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1219]},{"teal":1237,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1220]},{"teal":1238,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1221,1222,1223]},{"teal":1242,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1224,1225]},{"teal":1243,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1226,1227]},{"teal":1244,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1228]},{"teal":1245,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1229]},{"teal":1246,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1230,1231]},{"teal":1247,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1232,1233]},{"teal":1248,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1234]},{"teal":1249,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1235]},{"teal":1250,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1236]},{"teal":1253,"source":"contracts/BalancedPoolV2.algo.ts:248","errorMessage":"box value does not exist: this.targetWeights(i).value","pc":[1237]},{"teal":1254,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1238]},{"teal":1255,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1239]},{"teal":1256,"source":"contracts/BalancedPoolV2.algo.ts:248","pc":[1240]},{"teal":1261,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1241,1242]},{"teal":1262,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1243]},{"teal":1263,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1244]},{"teal":1264,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1245,1246]},{"teal":1265,"source":"contracts/BalancedPoolV2.algo.ts:247","pc":[1247,1248,1249]},{"teal":1270,"source":"contracts/BalancedPoolV2.algo.ts:250","pc":[1250,1251]},{"teal":1271,"source":"contracts/BalancedPoolV2.algo.ts:250","pc":[1252]},{"teal":1272,"source":"contracts/BalancedPoolV2.algo.ts:250","pc":[1253]},{"teal":1276,"source":"contracts/BalancedPoolV2.algo.ts:251","pc":[1254,1255]},{"teal":1277,"source":"contracts/BalancedPoolV2.algo.ts:251","pc":[1256]},{"teal":1278,"source":"contracts/BalancedPoolV2.algo.ts:251","pc":[1257]},{"teal":1281,"source":"contracts/BalancedPoolV2.algo.ts:245","pc":[1258]},{"teal":1293,"source":"contracts/BalancedPoolV2.algo.ts:264","pc":[1259,1260,1261]},{"teal":1298,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1262,1263]},{"teal":1299,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1264,1265]},{"teal":1300,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1266,1267]},{"teal":1301,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1268]},{"teal":1302,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1269]},{"teal":1303,"source":"contracts/BalancedPoolV2.algo.ts:265","pc":[1270,1271,1272]},{"teal":1308,"source":"contracts/BalancedPoolV2.algo.ts:266","pc":[1273]},{"teal":1317,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1274]},{"teal":1318,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1275,1276]},{"teal":1319,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1277,1278]},{"teal":1323,"source":"contracts/BalancedPoolV2.algo.ts:270","pc":[1279,1280]},{"teal":1324,"source":"contracts/BalancedPoolV2.algo.ts:270","pc":[1281,1282]},{"teal":1328,"source":"contracts/BalancedPoolV2.algo.ts:271","pc":[1283,1284]},{"teal":1329,"source":"contracts/BalancedPoolV2.algo.ts:271","pc":[1285,1286]},{"teal":1333,"source":"contracts/BalancedPoolV2.algo.ts:272","pc":[1287]},{"teal":1334,"source":"contracts/BalancedPoolV2.algo.ts:272","pc":[1288,1289]},{"teal":1337,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1290]},{"teal":1338,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1291,1292]},{"teal":1341,"source":"contracts/BalancedPoolV2.algo.ts:269","pc":[1293]},{"teal":1342,"source":"contracts/BalancedPoolV2.algo.ts:264","pc":[1294]},{"teal":1358,"source":"contracts/BalancedPoolV2.algo.ts:289","pc":[1295,1296,1297]},{"teal":1363,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1298,1299]},{"teal":1364,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1300,1301]},{"teal":1365,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1302]},{"teal":1366,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1303]},{"teal":1367,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1304]},{"teal":1368,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1305]},{"teal":1369,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1306]},{"teal":1370,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1307]},{"teal":1371,"source":"contracts/BalancedPoolV2.algo.ts:290","pc":[1308,1309,1310]},{"teal":1376,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1311,1312]},{"teal":1377,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1313,1314]},{"teal":1378,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1315]},{"teal":1379,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1316]},{"teal":1380,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1317]},{"teal":1381,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1318]},{"teal":1382,"source":"contracts/BalancedPoolV2.algo.ts:291","pc":[1319]},{"teal":1388,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1320]},{"teal":1389,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1321,1322]},{"teal":1390,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1323]},{"teal":1391,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1324]},{"teal":1392,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1325]},{"teal":1393,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1326]},{"teal":1394,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1327]},{"teal":1395,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1328]},{"teal":1396,"source":"contracts/BalancedPoolV2.algo.ts:294","pc":[1329,1330,1331]},{"teal":1401,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1332]},{"teal":1402,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1333,1334]},{"teal":1403,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1335]},{"teal":1404,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1336]},{"teal":1405,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1337]},{"teal":1406,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1338]},{"teal":1407,"source":"contracts/BalancedPoolV2.algo.ts:295","pc":[1339]},{"teal":1412,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1340,1341]},{"teal":1413,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1342,1343]},{"teal":1414,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1344]},{"teal":1415,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1345]},{"teal":1416,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1346,1347]},{"teal":1417,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1348]},{"teal":1418,"source":"contracts/BalancedPoolV2.algo.ts:298","pc":[1349]},{"teal":1422,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1350]},{"teal":1423,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1351,1352]},{"teal":1424,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1353]},{"teal":1425,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1354]},{"teal":1426,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1355,1356]},{"teal":1427,"source":"contracts/BalancedPoolV2.algo.ts:299","pc":[1357]},{"teal":1428,"source":"contracts/BalancedPoolV2.algo.ts:289","pc":[1358]},{"teal":1448,"source":"contracts/BalancedPoolV2.algo.ts:319","pc":[1359,1360,1361]},{"teal":1453,"source":"contracts/BalancedPoolV2.algo.ts:320","pc":[1362,1363]},{"teal":1454,"source":"contracts/BalancedPoolV2.algo.ts:320","pc":[1364]},{"teal":1455,"source":"contracts/BalancedPoolV2.algo.ts:320","pc":[1365]},{"teal":1456,"source":"contracts/BalancedPoolV2.algo.ts:320","pc":[1366]},{"teal":1457,"source":"contracts/BalancedPoolV2.algo.ts:320","pc":[1367,1368,1369]},{"teal":1472,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1370,1371]},{"teal":1473,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1372]},{"teal":1474,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1373,1374]},{"teal":1475,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1375,1376]},{"teal":1479,"source":"contracts/BalancedPoolV2.algo.ts:3","pc":[1377,1378]},{"teal":1480,"source":"contracts/BalancedPoolV2.algo.ts:3","pc":[1379,1380]},{"teal":1481,"source":"contracts/BalancedPoolV2.algo.ts:3","pc":[1381]},{"teal":1482,"source":"contracts/BalancedPoolV2.algo.ts:322","pc":[1382,1383]},{"teal":1486,"source":"contracts/BalancedPoolV2.algo.ts:323","pc":[1384,1385]},{"teal":1487,"source":"contracts/BalancedPoolV2.algo.ts:323","pc":[1386,1387]},{"teal":1491,"source":"contracts/BalancedPoolV2.algo.ts:324","pc":[1388,1389]},{"teal":1492,"source":"contracts/BalancedPoolV2.algo.ts:324","pc":[1390,1391]},{"teal":1496,"source":"contracts/BalancedPoolV2.algo.ts:325","pc":[1392,1393]},{"teal":1497,"source":"contracts/BalancedPoolV2.algo.ts:325","pc":[1394,1395]},{"teal":1501,"source":"contracts/BalancedPoolV2.algo.ts:326","pc":[1396,1397]},{"teal":1502,"source":"contracts/BalancedPoolV2.algo.ts:326","pc":[1398,1399]},{"teal":1506,"source":"contracts/BalancedPoolV2.algo.ts:327","pc":[1400,1401]},{"teal":1507,"source":"contracts/BalancedPoolV2.algo.ts:327","pc":[1402,1403]},{"teal":1511,"source":"contracts/BalancedPoolV2.algo.ts:328","pc":[1404]},{"teal":1512,"source":"contracts/BalancedPoolV2.algo.ts:328","pc":[1405,1406]},{"teal":1516,"source":"contracts/BalancedPoolV2.algo.ts:329","pc":[1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421]},{"teal":1517,"source":"contracts/BalancedPoolV2.algo.ts:329","pc":[1422,1423,1424]},{"teal":1518,"source":"contracts/BalancedPoolV2.algo.ts:329","pc":[1425,1426,1427]},{"teal":1519,"source":"contracts/BalancedPoolV2.algo.ts:329","pc":[1428]},{"teal":1520,"source":"contracts/BalancedPoolV2.algo.ts:329","pc":[1429,1430]},{"teal":1524,"source":"contracts/BalancedPoolV2.algo.ts:330","pc":[1431,1432,1433,1434]},{"teal":1525,"source":"contracts/BalancedPoolV2.algo.ts:330","pc":[1435,1436]},{"teal":1528,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1437]},{"teal":1529,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1438,1439]},{"teal":1532,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1440]},{"teal":1533,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1441,1442]},{"teal":1534,"source":"contracts/BalancedPoolV2.algo.ts:321","pc":[1443]},{"teal":1537,"source":"contracts/BalancedPoolV2.algo.ts:319","pc":[1444]},{"teal":1543,"source":"contracts/BalancedPoolV2.algo.ts:338","pc":[1445,1446,1447]},{"teal":1547,"source":"contracts/BalancedPoolV2.algo.ts:339","pc":[1448,1449]},{"teal":1548,"source":"contracts/BalancedPoolV2.algo.ts:339","pc":[1450,1451]},{"teal":1549,"source":"contracts/BalancedPoolV2.algo.ts:339","pc":[1452]},{"teal":1550,"source":"contracts/BalancedPoolV2.algo.ts:339","pc":[1453]},{"teal":1553,"source":"contracts/BalancedPoolV2.algo.ts:339","errorMessage":"only the manager can call this method","pc":[1454]},{"teal":1554,"source":"contracts/BalancedPoolV2.algo.ts:338","pc":[1455]},{"teal":1558,"source":"contracts/BalancedPoolV2.algo.ts:342","pc":[1456,1457,1458]},{"teal":1562,"source":"contracts/BalancedPoolV2.algo.ts:343","pc":[1459,1460]},{"teal":1563,"source":"contracts/BalancedPoolV2.algo.ts:343","pc":[1461]},{"teal":1564,"source":"contracts/BalancedPoolV2.algo.ts:343","pc":[1462]},{"teal":1565,"source":"contracts/BalancedPoolV2.algo.ts:343","pc":[1463]},{"teal":1568,"source":"contracts/BalancedPoolV2.algo.ts:343","errorMessage":"pool not bootstrapped","pc":[1464]},{"teal":1569,"source":"contracts/BalancedPoolV2.algo.ts:342","pc":[1465]},{"teal":1584,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1466,1467,1468]},{"teal":1587,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1469]},{"teal":1588,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1470,1471]},{"teal":1592,"source":"contracts/BalancedPoolV2.algo.ts:359","pc":[1472,1473]},{"teal":1593,"source":"contracts/BalancedPoolV2.algo.ts:359","pc":[1474]},{"teal":1594,"source":"contracts/BalancedPoolV2.algo.ts:359","pc":[1475]},{"teal":1597,"source":"contracts/BalancedPoolV2.algo.ts:359","errorMessage":"log undefined for x ≤ 0","pc":[1476]},{"teal":1601,"source":"contracts/BalancedPoolV2.algo.ts:361","pc":[1477]},{"teal":1602,"source":"contracts/BalancedPoolV2.algo.ts:361","pc":[1478,1479]},{"teal":1607,"source":"contracts/BalancedPoolV2.algo.ts:364","pc":[1480,1481]},{"teal":1608,"source":"contracts/BalancedPoolV2.algo.ts:364","pc":[1482]},{"teal":1609,"source":"contracts/BalancedPoolV2.algo.ts:364","pc":[1483]},{"teal":1610,"source":"contracts/BalancedPoolV2.algo.ts:364","pc":[1484,1485,1486]},{"teal":1615,"source":"contracts/BalancedPoolV2.algo.ts:365","pc":[1487]},{"teal":1616,"source":"contracts/BalancedPoolV2.algo.ts:365","pc":[1488,1489]},{"teal":1620,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1490]},{"teal":1621,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1491]},{"teal":1622,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1492]},{"teal":1623,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1493]},{"teal":1624,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1494,1495]},{"teal":1625,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1496]},{"teal":1626,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1497]},{"teal":1627,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1498]},{"teal":1628,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1499]},{"teal":1629,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1500]},{"teal":1632,"source":"contracts/BalancedPoolV2.algo.ts:366","errorMessage":"wideRatio failed","pc":[1501]},{"teal":1633,"source":"contracts/BalancedPoolV2.algo.ts:366","pc":[1502,1503]},{"teal":1637,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1504,1505]},{"teal":1638,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1506]},{"teal":1639,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1507]},{"teal":1640,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1508]},{"teal":1641,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1509]},{"teal":1642,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1510]},{"teal":1643,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1511,1512]},{"teal":1644,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1513]},{"teal":1645,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1514]},{"teal":1646,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1515]},{"teal":1647,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1516]},{"teal":1648,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1517]},{"teal":1651,"source":"contracts/BalancedPoolV2.algo.ts:367","errorMessage":"wideRatio failed","pc":[1518]},{"teal":1652,"source":"contracts/BalancedPoolV2.algo.ts:367","pc":[1519,1520]},{"teal":1653,"source":"contracts/BalancedPoolV2.algo.ts:364","pc":[1521,1522,1523]},{"teal":1658,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1524,1525]},{"teal":1659,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1526]},{"teal":1660,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1527]},{"teal":1661,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1528]},{"teal":1662,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1529]},{"teal":1663,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1530]},{"teal":1664,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1531,1532]},{"teal":1665,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1533]},{"teal":1666,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1534]},{"teal":1667,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1535]},{"teal":1668,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1536]},{"teal":1669,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1537]},{"teal":1672,"source":"contracts/BalancedPoolV2.algo.ts:369","errorMessage":"wideRatio failed","pc":[1538]},{"teal":1673,"source":"contracts/BalancedPoolV2.algo.ts:369","pc":[1539,1540]},{"teal":1678,"source":"contracts/BalancedPoolV2.algo.ts:372","pc":[1541,1542]},{"teal":1679,"source":"contracts/BalancedPoolV2.algo.ts:372","pc":[1543,1544]},{"teal":1683,"source":"contracts/BalancedPoolV2.algo.ts:373","pc":[1545,1546]},{"teal":1684,"source":"contracts/BalancedPoolV2.algo.ts:373","pc":[1547,1548]},{"teal":1688,"source":"contracts/BalancedPoolV2.algo.ts:374","pc":[1549]},{"teal":1689,"source":"contracts/BalancedPoolV2.algo.ts:374","pc":[1550,1551]},{"teal":1693,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1552]},{"teal":1694,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1553,1554]},{"teal":1695,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1555,1556]},{"teal":1696,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1557]},{"teal":1697,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1558,1559]},{"teal":1698,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1560,1561]},{"teal":1699,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1562]},{"teal":1700,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1563,1564]},{"teal":1701,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1565,1566]},{"teal":1702,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1567,1568]},{"teal":1703,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1569,1570]},{"teal":1704,"source":"contracts/BalancedPoolV2.algo.ts:376","pc":[1571]},{"teal":1708,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1572,1573]},{"teal":1709,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1574,1575]},{"teal":1714,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1576,1577]},{"teal":1715,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1578,1579]},{"teal":1716,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1580]},{"teal":1717,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1581,1582,1583]},{"teal":1721,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1584,1585]},{"teal":1722,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1586,1587]},{"teal":1723,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1588]},{"teal":1724,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1589]},{"teal":1725,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1590]},{"teal":1726,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1591]},{"teal":1727,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1592]},{"teal":1728,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1593]},{"teal":1729,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1594]},{"teal":1730,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1595]},{"teal":1733,"source":"contracts/BalancedPoolV2.algo.ts:379","errorMessage":"wideRatio failed","pc":[1596]},{"teal":1734,"source":"contracts/BalancedPoolV2.algo.ts:379","pc":[1597,1598]},{"teal":1738,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1599]},{"teal":1739,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1600,1601]},{"teal":1740,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1602]},{"teal":1741,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1603,1604]},{"teal":1742,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1605]},{"teal":1743,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1606]},{"teal":1744,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1607]},{"teal":1745,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1608]},{"teal":1746,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1609]},{"teal":1749,"source":"contracts/BalancedPoolV2.algo.ts:380","errorMessage":"wideRatio failed","pc":[1610]},{"teal":1750,"source":"contracts/BalancedPoolV2.algo.ts:380","pc":[1611,1612]},{"teal":1754,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1613,1614]},{"teal":1755,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1615,1616,1617]},{"teal":1756,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1618,1619]},{"teal":1757,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1620,1621]},{"teal":1758,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1622]},{"teal":1759,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1623,1624,1625]},{"teal":1762,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1626,1627]},{"teal":1763,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1628,1629]},{"teal":1764,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1630]},{"teal":1767,"source":"contracts/BalancedPoolV2.algo.ts:381","pc":[1631,1632]},{"teal":1771,"source":"contracts/BalancedPoolV2.algo.ts:382","pc":[1633,1634]},{"teal":1772,"source":"contracts/BalancedPoolV2.algo.ts:382","pc":[1635]},{"teal":1773,"source":"contracts/BalancedPoolV2.algo.ts:382","pc":[1636,1637]},{"teal":1778,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1638,1639]},{"teal":1779,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1640]},{"teal":1780,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1641]},{"teal":1781,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1642,1643]},{"teal":1782,"source":"contracts/BalancedPoolV2.algo.ts:378","pc":[1644,1645,1646]},{"teal":1787,"source":"contracts/BalancedPoolV2.algo.ts:385","pc":[1647,1648]},{"teal":1788,"source":"contracts/BalancedPoolV2.algo.ts:385","pc":[1649]},{"teal":1789,"source":"contracts/BalancedPoolV2.algo.ts:385","pc":[1650,1651]},{"teal":1790,"source":"contracts/BalancedPoolV2.algo.ts:385","pc":[1652]},{"teal":1791,"source":"contracts/BalancedPoolV2.algo.ts:385","pc":[1653]},{"teal":1794,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1654,1655]},{"teal":1797,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1656,1657]},{"teal":1798,"source":"contracts/BalancedPoolV2.algo.ts:358","pc":[1658]},{"teal":1810,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1659,1660,1661]},{"teal":1813,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1662]},{"teal":1814,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1663,1664]},{"teal":1818,"source":"contracts/BalancedPoolV2.algo.ts:398","pc":[1665]},{"teal":1819,"source":"contracts/BalancedPoolV2.algo.ts:398","pc":[1666,1667]},{"teal":1823,"source":"contracts/BalancedPoolV2.algo.ts:399","pc":[1668]},{"teal":1824,"source":"contracts/BalancedPoolV2.algo.ts:399","pc":[1669,1670]},{"teal":1828,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1671]},{"teal":1829,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1672,1673]},{"teal":1834,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1674,1675]},{"teal":1835,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1676,1677]},{"teal":1836,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1678]},{"teal":1837,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1679,1680,1681]},{"teal":1841,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1682,1683]},{"teal":1842,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1684,1685]},{"teal":1843,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1686]},{"teal":1844,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1687]},{"teal":1845,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1688,1689]},{"teal":1846,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1690]},{"teal":1847,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1691]},{"teal":1848,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1692]},{"teal":1849,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1693]},{"teal":1850,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1694]},{"teal":1851,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1695]},{"teal":1852,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1696]},{"teal":1855,"source":"contracts/BalancedPoolV2.algo.ts:402","errorMessage":"wideRatio failed","pc":[1697]},{"teal":1856,"source":"contracts/BalancedPoolV2.algo.ts:402","pc":[1698,1699]},{"teal":1860,"source":"contracts/BalancedPoolV2.algo.ts:403","pc":[1700,1701]},{"teal":1861,"source":"contracts/BalancedPoolV2.algo.ts:403","pc":[1702,1703]},{"teal":1862,"source":"contracts/BalancedPoolV2.algo.ts:403","pc":[1704]},{"teal":1863,"source":"contracts/BalancedPoolV2.algo.ts:403","pc":[1705,1706]},{"teal":1868,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1707,1708]},{"teal":1869,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1709]},{"teal":1870,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1710]},{"teal":1871,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1711,1712]},{"teal":1872,"source":"contracts/BalancedPoolV2.algo.ts:401","pc":[1713,1714,1715]},{"teal":1877,"source":"contracts/BalancedPoolV2.algo.ts:406","pc":[1716,1717]},{"teal":1880,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1718,1719]},{"teal":1883,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1720,1721]},{"teal":1884,"source":"contracts/BalancedPoolV2.algo.ts:397","pc":[1722]},{"teal":1898,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1723,1724,1725]},{"teal":1901,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1726]},{"teal":1902,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1727,1728]},{"teal":1907,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1729,1730]},{"teal":1908,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1731]},{"teal":1909,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1732]},{"teal":1910,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1733,1734,1735]},{"teal":1915,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1736]},{"teal":1916,"source":"contracts/BalancedPoolV2.algo.ts:421","pc":[1737,1738,1739]},{"teal":1921,"source":"contracts/BalancedPoolV2.algo.ts:423","pc":[1740,1741]},{"teal":1922,"source":"contracts/BalancedPoolV2.algo.ts:423","pc":[1742,1743,1744]},{"teal":1923,"source":"contracts/BalancedPoolV2.algo.ts:423","pc":[1745,1746]},{"teal":1927,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1747,1748]},{"teal":1928,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1749,1750]},{"teal":1929,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1751,1752]},{"teal":1930,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1753,1754,1755]},{"teal":1931,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1756]},{"teal":1932,"source":"contracts/BalancedPoolV2.algo.ts:424","pc":[1757,1758]},{"teal":1936,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1759,1760]},{"teal":1937,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1761,1762]},{"teal":1938,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1763,1764]},{"teal":1939,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1765,1766,1767]},{"teal":1940,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1768]},{"teal":1941,"source":"contracts/BalancedPoolV2.algo.ts:425","pc":[1769,1770]},{"teal":1945,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1771,1772]},{"teal":1946,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1773,1774]},{"teal":1947,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1775]},{"teal":1948,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1776]},{"teal":1949,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1777]},{"teal":1950,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1778]},{"teal":1951,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1779]},{"teal":1952,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1780]},{"teal":1953,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1781]},{"teal":1954,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1782]},{"teal":1957,"source":"contracts/BalancedPoolV2.algo.ts:427","errorMessage":"wideRatio failed","pc":[1783]},{"teal":1958,"source":"contracts/BalancedPoolV2.algo.ts:427","pc":[1784,1785]},{"teal":1962,"source":"contracts/BalancedPoolV2.algo.ts:429","pc":[1786,1787]},{"teal":1963,"source":"contracts/BalancedPoolV2.algo.ts:429","pc":[1788,1789,1790]},{"teal":1964,"source":"contracts/BalancedPoolV2.algo.ts:429","pc":[1791,1792]},{"teal":1969,"source":"contracts/BalancedPoolV2.algo.ts:431","pc":[1793,1794]},{"teal":1970,"source":"contracts/BalancedPoolV2.algo.ts:431","pc":[1795]},{"teal":1971,"source":"contracts/BalancedPoolV2.algo.ts:431","pc":[1796]},{"teal":1972,"source":"contracts/BalancedPoolV2.algo.ts:431","pc":[1797,1798,1799]},{"teal":1977,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1800]},{"teal":1978,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1801]},{"teal":1979,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1802]},{"teal":1980,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1803]},{"teal":1981,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1804,1805]},{"teal":1982,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1806]},{"teal":1983,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1807]},{"teal":1984,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1808]},{"teal":1985,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1809]},{"teal":1986,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1810]},{"teal":1989,"source":"contracts/BalancedPoolV2.algo.ts:432","errorMessage":"wideRatio failed","pc":[1811]},{"teal":1990,"source":"contracts/BalancedPoolV2.algo.ts:432","pc":[1812,1813,1814]},{"teal":1995,"source":"contracts/BalancedPoolV2.algo.ts:435","pc":[1815,1816]},{"teal":1999,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1817,1818]},{"teal":2002,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1819,1820]},{"teal":2003,"source":"contracts/BalancedPoolV2.algo.ts:420","pc":[1821]},{"teal":2024,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1822,1823,1824]},{"teal":2027,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1825]},{"teal":2028,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1826,1827]},{"teal":2032,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1828,1829]},{"teal":2033,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1830,1831,1832,1833]},{"teal":2034,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1834]},{"teal":2035,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1835]},{"teal":2036,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1836]},{"teal":2037,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1837]},{"teal":2038,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1838]},{"teal":2039,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1839]},{"teal":2040,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1840]},{"teal":2041,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1841]},{"teal":2044,"source":"contracts/BalancedPoolV2.algo.ts:465","errorMessage":"wideRatio failed","pc":[1842]},{"teal":2045,"source":"contracts/BalancedPoolV2.algo.ts:465","pc":[1843,1844]},{"teal":2049,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1845,1846]},{"teal":2050,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1847]},{"teal":2051,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1848]},{"teal":2052,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1849]},{"teal":2053,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1850,1851]},{"teal":2054,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1852,1853]},{"teal":2055,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1854]},{"teal":2056,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1855]},{"teal":2057,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1856]},{"teal":2058,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1857]},{"teal":2059,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1858]},{"teal":2060,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1859]},{"teal":2063,"source":"contracts/BalancedPoolV2.algo.ts:468","errorMessage":"wideRatio failed","pc":[1860]},{"teal":2064,"source":"contracts/BalancedPoolV2.algo.ts:468","pc":[1861,1862]},{"teal":2068,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1863,1864]},{"teal":2069,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1865]},{"teal":2070,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1866]},{"teal":2071,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1867]},{"teal":2072,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1868,1869]},{"teal":2073,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1870]},{"teal":2074,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1871]},{"teal":2075,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1872]},{"teal":2076,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1873]},{"teal":2077,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1874]},{"teal":2080,"source":"contracts/BalancedPoolV2.algo.ts:470","errorMessage":"wideRatio failed","pc":[1875]},{"teal":2081,"source":"contracts/BalancedPoolV2.algo.ts:470","pc":[1876,1877]},{"teal":2085,"source":"contracts/BalancedPoolV2.algo.ts:473","pc":[1878,1879]},{"teal":2086,"source":"contracts/BalancedPoolV2.algo.ts:473","pc":[1880,1881]},{"teal":2087,"source":"contracts/BalancedPoolV2.algo.ts:473","pc":[1882,1883,1884]},{"teal":2088,"source":"contracts/BalancedPoolV2.algo.ts:473","pc":[1885,1886]},{"teal":2092,"source":"contracts/BalancedPoolV2.algo.ts:475","pc":[1887,1888]},{"teal":2093,"source":"contracts/BalancedPoolV2.algo.ts:475","pc":[1889]},{"teal":2094,"source":"contracts/BalancedPoolV2.algo.ts:475","pc":[1890]},{"teal":2098,"source":"contracts/BalancedPoolV2.algo.ts:476","pc":[1891,1892]},{"teal":2099,"source":"contracts/BalancedPoolV2.algo.ts:476","pc":[1893]},{"teal":2100,"source":"contracts/BalancedPoolV2.algo.ts:476","pc":[1894]},{"teal":2104,"source":"contracts/BalancedPoolV2.algo.ts:477","pc":[1895,1896]},{"teal":2105,"source":"contracts/BalancedPoolV2.algo.ts:477","pc":[1897]},{"teal":2106,"source":"contracts/BalancedPoolV2.algo.ts:477","pc":[1898]},{"teal":2110,"source":"contracts/BalancedPoolV2.algo.ts:478","pc":[1899,1900]},{"teal":2111,"source":"contracts/BalancedPoolV2.algo.ts:478","pc":[1901]},{"teal":2112,"source":"contracts/BalancedPoolV2.algo.ts:478","pc":[1902]},{"teal":2116,"source":"contracts/BalancedPoolV2.algo.ts:479","pc":[1903,1904]},{"teal":2117,"source":"contracts/BalancedPoolV2.algo.ts:479","pc":[1905]},{"teal":2118,"source":"contracts/BalancedPoolV2.algo.ts:479","pc":[1906]},{"teal":2122,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1907,1908]},{"teal":2123,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1909]},{"teal":2124,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1910,1911]},{"teal":2125,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1912]},{"teal":2126,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1913]},{"teal":2127,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1914]},{"teal":2128,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1915]},{"teal":2129,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1916]},{"teal":2130,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1917]},{"teal":2131,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1918]},{"teal":2132,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1919]},{"teal":2133,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1920]},{"teal":2136,"source":"contracts/BalancedPoolV2.algo.ts:480","errorMessage":"wideRatio failed","pc":[1921]},{"teal":2137,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1922]},{"teal":2138,"source":"contracts/BalancedPoolV2.algo.ts:480","pc":[1923]},{"teal":2142,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1924,1925]},{"teal":2143,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1926]},{"teal":2144,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1927,1928]},{"teal":2145,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1929]},{"teal":2146,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1930]},{"teal":2147,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1931]},{"teal":2148,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1932]},{"teal":2149,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1933]},{"teal":2150,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1934]},{"teal":2151,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1935]},{"teal":2152,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1936]},{"teal":2153,"source":"contracts/BalancedPoolV2.algo.ts:482","pc":[1937]},{"teal":2156,"source":"contracts/BalancedPoolV2.algo.ts:482","errorMessage":"wideRatio failed","pc":[1938]},{"teal":2159,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1939,1940]},{"teal":2162,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1941,1942]},{"teal":2163,"source":"contracts/BalancedPoolV2.algo.ts:456","pc":[1943]},{"teal":2185,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[1944,1945,1946]},{"teal":2188,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[1947]},{"teal":2189,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[1948,1949]},{"teal":2193,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1950]},{"teal":2194,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1951]},{"teal":2195,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1952,1953,1954]},{"teal":2196,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1955]},{"teal":2197,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1956]},{"teal":2198,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1957]},{"teal":2199,"source":"contracts/BalancedPoolV2.algo.ts:505","pc":[1958,1959]},{"teal":2203,"source":"contracts/BalancedPoolV2.algo.ts:506","pc":[1960,1961]},{"teal":2204,"source":"contracts/BalancedPoolV2.algo.ts:506","pc":[1962]},{"teal":2205,"source":"contracts/BalancedPoolV2.algo.ts:506","pc":[1963]},{"teal":2208,"source":"contracts/BalancedPoolV2.algo.ts:506","errorMessage":"Please provide at least one asset","pc":[1964]},{"teal":2212,"source":"contracts/BalancedPoolV2.algo.ts:508","pc":[1965]},{"teal":2213,"source":"contracts/BalancedPoolV2.algo.ts:508","pc":[1966,1967]},{"teal":2217,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1968]},{"teal":2218,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1969,1970]},{"teal":2223,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1971,1972]},{"teal":2224,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1973,1974]},{"teal":2225,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1975]},{"teal":2226,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1976]},{"teal":2227,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1977]},{"teal":2228,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[1978,1979,1980]},{"teal":2232,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1981]},{"teal":2233,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1982,1983]},{"teal":2234,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1984,1985]},{"teal":2235,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1986]},{"teal":2236,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1987,1988]},{"teal":2237,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1989,1990]},{"teal":2238,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1991]},{"teal":2239,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1992,1993]},{"teal":2240,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1994,1995]},{"teal":2241,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1996,1997]},{"teal":2242,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[1998,1999]},{"teal":2243,"source":"contracts/BalancedPoolV2.algo.ts:511","pc":[2000]},{"teal":2248,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[2001,2002]},{"teal":2249,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[2003]},{"teal":2250,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[2004]},{"teal":2251,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[2005,2006]},{"teal":2252,"source":"contracts/BalancedPoolV2.algo.ts:510","pc":[2007,2008,2009]},{"teal":2257,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2010]},{"teal":2258,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2011,2012]},{"teal":2263,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2013,2014]},{"teal":2264,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2015,2016]},{"teal":2265,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2017]},{"teal":2266,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2018,2019,2020]},{"teal":2270,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2021]},{"teal":2271,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2022]},{"teal":2272,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2023,2024,2025]},{"teal":2273,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2026,2027]},{"teal":2274,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2028]},{"teal":2275,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2029,2030]},{"teal":2276,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2031]},{"teal":2277,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2032]},{"teal":2278,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2033]},{"teal":2279,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2034,2035]},{"teal":2280,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2036]},{"teal":2281,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2037]},{"teal":2282,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2038]},{"teal":2283,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2039]},{"teal":2284,"source":"contracts/BalancedPoolV2.algo.ts:515","pc":[2040,2041]},{"teal":2288,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2042]},{"teal":2289,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2043,2044]},{"teal":2290,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2045]},{"teal":2291,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2046]},{"teal":2292,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2047]},{"teal":2295,"source":"contracts/BalancedPoolV2.algo.ts:516","errorMessage":"box value does not exist: this.balances(assetId).value","pc":[2048]},{"teal":2296,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2049]},{"teal":2297,"source":"contracts/BalancedPoolV2.algo.ts:516","pc":[2050,2051]},{"teal":2301,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2052]},{"teal":2302,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2053,2054]},{"teal":2303,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2055]},{"teal":2304,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2056]},{"teal":2307,"source":"contracts/BalancedPoolV2.algo.ts:517","errorMessage":"box value does not exist: this.provided(sender).value","pc":[2057]},{"teal":2308,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2058,2059,2060]},{"teal":2309,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2061,2062]},{"teal":2310,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2063]},{"teal":2311,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2064,2065]},{"teal":2312,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2066]},{"teal":2313,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2067]},{"teal":2314,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2068]},{"teal":2315,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2069,2070]},{"teal":2316,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2071]},{"teal":2317,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2072]},{"teal":2318,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2073]},{"teal":2319,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2074]},{"teal":2320,"source":"contracts/BalancedPoolV2.algo.ts:517","pc":[2075,2076]},{"teal":2324,"source":"contracts/BalancedPoolV2.algo.ts:518","pc":[2077,2078]},{"teal":2325,"source":"contracts/BalancedPoolV2.algo.ts:518","pc":[2079,2080,2081]},{"teal":2326,"source":"contracts/BalancedPoolV2.algo.ts:518","pc":[2082,2083]},{"teal":2330,"source":"contracts/BalancedPoolV2.algo.ts:520","pc":[2084,2085]},{"teal":2331,"source":"contracts/BalancedPoolV2.algo.ts:520","pc":[2086]},{"teal":2332,"source":"contracts/BalancedPoolV2.algo.ts:520","pc":[2087]},{"teal":2335,"source":"contracts/BalancedPoolV2.algo.ts:520","errorMessage":"Pool balance must be > 0","pc":[2088]},{"teal":2339,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2089,2090]},{"teal":2340,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2091]},{"teal":2341,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2092]},{"teal":2342,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2093]},{"teal":2343,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2094,2095]},{"teal":2344,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2096,2097]},{"teal":2345,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2098]},{"teal":2346,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2099]},{"teal":2347,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2100]},{"teal":2348,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2101]},{"teal":2349,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2102]},{"teal":2350,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2103]},{"teal":2353,"source":"contracts/BalancedPoolV2.algo.ts:522","errorMessage":"wideRatio failed","pc":[2104]},{"teal":2354,"source":"contracts/BalancedPoolV2.algo.ts:522","pc":[2105,2106]},{"teal":2358,"source":"contracts/BalancedPoolV2.algo.ts:523","pc":[2107,2108]},{"teal":2359,"source":"contracts/BalancedPoolV2.algo.ts:523","pc":[2109,2110]},{"teal":2360,"source":"contracts/BalancedPoolV2.algo.ts:523","pc":[2111,2112,2113]},{"teal":2361,"source":"contracts/BalancedPoolV2.algo.ts:523","pc":[2114,2115]},{"teal":2365,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2116,2117]},{"teal":2366,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2118,2119]},{"teal":2367,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2120]},{"teal":2368,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2121]},{"teal":2369,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2122]},{"teal":2370,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2123]},{"teal":2371,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2124]},{"teal":2372,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2125]},{"teal":2373,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2126]},{"teal":2374,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2127]},{"teal":2377,"source":"contracts/BalancedPoolV2.algo.ts:524","errorMessage":"wideRatio failed","pc":[2128]},{"teal":2378,"source":"contracts/BalancedPoolV2.algo.ts:524","pc":[2129,2130]},{"teal":2382,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2131]},{"teal":2383,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2132,2133]},{"teal":2384,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2134]},{"teal":2385,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2135]},{"teal":2388,"source":"contracts/BalancedPoolV2.algo.ts:526","errorMessage":"box value does not exist: this.provided(sender).value","pc":[2136]},{"teal":2389,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2137,2138,2139]},{"teal":2390,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2140,2141]},{"teal":2391,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2142]},{"teal":2392,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2143,2144]},{"teal":2393,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2145]},{"teal":2394,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2146]},{"teal":2395,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2147]},{"teal":2396,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2148,2149]},{"teal":2397,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2150]},{"teal":2398,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2151,2152]},{"teal":2399,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2153]},{"teal":2400,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2154]},{"teal":2401,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2155,2156]},{"teal":2402,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2157]},{"teal":2403,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2158]},{"teal":2404,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2159]},{"teal":2405,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2160]},{"teal":2406,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2161]},{"teal":2407,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2162]},{"teal":2408,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2163]},{"teal":2409,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2164]},{"teal":2410,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2165]},{"teal":2411,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2166]},{"teal":2412,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2167,2168,2169]},{"teal":2413,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2170]},{"teal":2414,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2171]},{"teal":2415,"source":"contracts/BalancedPoolV2.algo.ts:526","pc":[2172]},{"teal":2420,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2173,2174]},{"teal":2421,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2175]},{"teal":2422,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2176]},{"teal":2423,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2177,2178]},{"teal":2424,"source":"contracts/BalancedPoolV2.algo.ts:514","pc":[2179,2180,2181]},{"teal":2429,"source":"contracts/BalancedPoolV2.algo.ts:529","pc":[2182,2183,2184]},{"teal":2430,"source":"contracts/BalancedPoolV2.algo.ts:529","pc":[2185,2186]},{"teal":2434,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2187,2188]},{"teal":2435,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2189,2190]},{"teal":2436,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2191]},{"teal":2437,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2192]},{"teal":2438,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2193]},{"teal":2439,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2194]},{"teal":2440,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2195]},{"teal":2441,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2196]},{"teal":2442,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2197]},{"teal":2443,"source":"contracts/BalancedPoolV2.algo.ts:530","pc":[2198]},{"teal":2446,"source":"contracts/BalancedPoolV2.algo.ts:530","errorMessage":"wideRatio failed","pc":[2199]},{"teal":2449,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[2200,2201]},{"teal":2452,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[2202,2203]},{"teal":2453,"source":"contracts/BalancedPoolV2.algo.ts:504","pc":[2204]},{"teal":2470,"source":"contracts/BalancedPoolV2.algo.ts:547","pc":[2205,2206,2207]},{"teal":2474,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2208,2209]},{"teal":2475,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2210]},{"teal":2476,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2211,2212]},{"teal":2477,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2213]},{"teal":2478,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2214,2215]},{"teal":2479,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2216]},{"teal":2480,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2217,2218]},{"teal":2481,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2219]},{"teal":2482,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2220,2221]},{"teal":2483,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2222]},{"teal":2484,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2223,2224]},{"teal":2485,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2225]},{"teal":2486,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2226]},{"teal":2487,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2227,2228]},{"teal":2488,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2229]},{"teal":2489,"source":"contracts/BalancedPoolV2.algo.ts:548","pc":[2230]},{"teal":2490,"source":"contracts/BalancedPoolV2.algo.ts:547","pc":[2231]},{"teal":2506,"source":"contracts/BalancedPoolV2.algo.ts:564","pc":[2232,2233,2234]},{"teal":2510,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2235,2236]},{"teal":2511,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2237,2238]},{"teal":2512,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2239]},{"teal":2513,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2240,2241,2242]},{"teal":2514,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2243,2244]},{"teal":2515,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2245,2246]},{"teal":2516,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2247]},{"teal":2517,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2248,2249,2250]},{"teal":2520,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2251,2252]},{"teal":2521,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2253,2254]},{"teal":2522,"source":"contracts/BalancedPoolV2.algo.ts:565","pc":[2255]},{"teal":2525,"source":"contracts/BalancedPoolV2.algo.ts:564","pc":[2256]},{"teal":2530,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2257,2258]},{"teal":2533,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2259,2260,2261]},{"teal":2534,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2262]},{"teal":2535,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2263]},{"teal":2536,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2264]},{"teal":2537,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2265]},{"teal":2538,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2266]},{"teal":2542,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2267,2268,2269]},{"teal":2546,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2270]},{"teal":2547,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2271]},{"teal":2548,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2272,2273,2274]},{"teal":2549,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2275]},{"teal":2550,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2276]},{"teal":2551,"source":"contracts/BalancedPoolV2.algo.ts:570","pc":[2277]},{"teal":2552,"source":"contracts/BalancedPoolV2.algo.ts:568","pc":[2278]},{"teal":2557,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2279,2280]},{"teal":2560,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2281,2282,2283]},{"teal":2561,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2284]},{"teal":2562,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2285]},{"teal":2563,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2286]},{"teal":2564,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2287]},{"teal":2565,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2288]},{"teal":2569,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2289,2290,2291]},{"teal":2573,"source":"contracts/BalancedPoolV2.algo.ts:575","pc":[2292,2293]},{"teal":2574,"source":"contracts/BalancedPoolV2.algo.ts:575","pc":[2294]},{"teal":2575,"source":"contracts/BalancedPoolV2.algo.ts:573","pc":[2295]},{"teal":2580,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2296,2297]},{"teal":2583,"source":"contracts/BalancedPoolV2.algo.ts:579","pc":[2298,2299,2300]},{"teal":2584,"source":"contracts/BalancedPoolV2.algo.ts:579","pc":[2301]},{"teal":2587,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2302,2303,2304]},{"teal":2588,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2305]},{"teal":2589,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2306]},{"teal":2590,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2307]},{"teal":2591,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2308]},{"teal":2592,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2309]},{"teal":2596,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2310,2311,2312]},{"teal":2599,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2313]},{"teal":2603,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2314]},{"teal":2604,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2315]},{"teal":2605,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2316,2317,2318]},{"teal":2606,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2319,2320]},{"teal":2607,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2321]},{"teal":2608,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2322,2323]},{"teal":2609,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2324]},{"teal":2610,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2325]},{"teal":2611,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2326]},{"teal":2612,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2327,2328]},{"teal":2613,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2329]},{"teal":2614,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2330]},{"teal":2615,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2331]},{"teal":2616,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2332]},{"teal":2617,"source":"contracts/BalancedPoolV2.algo.ts:580","pc":[2333,2334]},{"teal":2621,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2335]},{"teal":2622,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2336,2337]},{"teal":2623,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2338]},{"teal":2624,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2339]},{"teal":2625,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2340]},{"teal":2628,"source":"contracts/BalancedPoolV2.algo.ts:581","errorMessage":"box value does not exist: this.balances(asset).value","pc":[2341]},{"teal":2629,"source":"contracts/BalancedPoolV2.algo.ts:581","pc":[2342]},{"teal":2632,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2343,2344]},{"teal":2633,"source":"contracts/BalancedPoolV2.algo.ts:578","pc":[2345]},{"teal":2638,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2346,2347]},{"teal":2641,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2348,2349,2350]},{"teal":2642,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2351]},{"teal":2645,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2352,2353,2354]},{"teal":2646,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2355]},{"teal":2649,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2356,2357,2358]},{"teal":2650,"source":"contracts/BalancedPoolV2.algo.ts:585","pc":[2359]},{"teal":2653,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2360,2361,2362]},{"teal":2654,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2363]},{"teal":2655,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2364]},{"teal":2656,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2365]},{"teal":2657,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2366]},{"teal":2658,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2367]},{"teal":2662,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2368,2369,2370]},{"teal":2665,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2371]},{"teal":2666,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2372,2373]},{"teal":2670,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2374]},{"teal":2671,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2375]},{"teal":2672,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2376,2377,2378]},{"teal":2673,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2379,2380]},{"teal":2674,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2381]},{"teal":2675,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2382,2383]},{"teal":2676,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2384]},{"teal":2677,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2385]},{"teal":2678,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2386]},{"teal":2679,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2387,2388]},{"teal":2680,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2389]},{"teal":2681,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2390]},{"teal":2682,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2391]},{"teal":2683,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2392]},{"teal":2684,"source":"contracts/BalancedPoolV2.algo.ts:586","pc":[2393,2394]},{"teal":2688,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2395]},{"teal":2689,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2396]},{"teal":2690,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2397,2398,2399]},{"teal":2691,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2400,2401]},{"teal":2692,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2402]},{"teal":2693,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2403,2404]},{"teal":2694,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2405]},{"teal":2695,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2406]},{"teal":2696,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2407]},{"teal":2697,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2408,2409]},{"teal":2698,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2410]},{"teal":2699,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2411]},{"teal":2700,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2412]},{"teal":2701,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2413]},{"teal":2702,"source":"contracts/BalancedPoolV2.algo.ts:587","pc":[2414,2415]},{"teal":2706,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2416]},{"teal":2707,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2417,2418]},{"teal":2708,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2419]},{"teal":2709,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2420]},{"teal":2710,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2421]},{"teal":2713,"source":"contracts/BalancedPoolV2.algo.ts:589","errorMessage":"box value does not exist: this.balances(assetIn).value","pc":[2422]},{"teal":2714,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2423]},{"teal":2715,"source":"contracts/BalancedPoolV2.algo.ts:589","pc":[2424,2425]},{"teal":2719,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2426]},{"teal":2720,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2427,2428]},{"teal":2721,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2429]},{"teal":2722,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2430]},{"teal":2723,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2431]},{"teal":2726,"source":"contracts/BalancedPoolV2.algo.ts:590","errorMessage":"box value does not exist: this.balances(assetOut).value","pc":[2432]},{"teal":2727,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2433]},{"teal":2728,"source":"contracts/BalancedPoolV2.algo.ts:590","pc":[2434,2435]},{"teal":2732,"source":"contracts/BalancedPoolV2.algo.ts:592","pc":[2436,2437]},{"teal":2733,"source":"contracts/BalancedPoolV2.algo.ts:592","pc":[2438,2439,2440]},{"teal":2734,"source":"contracts/BalancedPoolV2.algo.ts:592","pc":[2441,2442]},{"teal":2738,"source":"contracts/BalancedPoolV2.algo.ts:593","pc":[2443,2444]},{"teal":2739,"source":"contracts/BalancedPoolV2.algo.ts:593","pc":[2445,2446,2447]},{"teal":2740,"source":"contracts/BalancedPoolV2.algo.ts:593","pc":[2448,2449]},{"teal":2744,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2450,2451]},{"teal":2745,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2452,2453]},{"teal":2746,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2454,2455]},{"teal":2747,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2456,2457]},{"teal":2748,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2458,2459]},{"teal":2749,"source":"contracts/BalancedPoolV2.algo.ts:595","pc":[2460,2461,2462]},{"teal":2752,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2463,2464]},{"teal":2755,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2465,2466]},{"teal":2756,"source":"contracts/BalancedPoolV2.algo.ts:584","pc":[2467]},{"teal":2761,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2468,2469]},{"teal":2764,"source":"contracts/BalancedPoolV2.algo.ts:599","pc":[2470,2471,2472]},{"teal":2765,"source":"contracts/BalancedPoolV2.algo.ts:599","pc":[2473]},{"teal":2768,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2474,2475,2476]},{"teal":2769,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2477]},{"teal":2770,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2478]},{"teal":2771,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2479]},{"teal":2772,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2480]},{"teal":2773,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2481]},{"teal":2777,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2482,2483,2484]},{"teal":2780,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2485]},{"teal":2781,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2486,2487]},{"teal":2785,"source":"contracts/BalancedPoolV2.algo.ts:600","pc":[2488,2489]},{"teal":2786,"source":"contracts/BalancedPoolV2.algo.ts:600","pc":[2490,2491]},{"teal":2790,"source":"contracts/BalancedPoolV2.algo.ts:601","pc":[2492,2493]},{"teal":2791,"source":"contracts/BalancedPoolV2.algo.ts:601","pc":[2494]},{"teal":2792,"source":"contracts/BalancedPoolV2.algo.ts:601","pc":[2495,2496]},{"teal":2796,"source":"contracts/BalancedPoolV2.algo.ts:602","pc":[2497,2498]},{"teal":2797,"source":"contracts/BalancedPoolV2.algo.ts:602","pc":[2499]},{"teal":2798,"source":"contracts/BalancedPoolV2.algo.ts:602","pc":[2500,2501]},{"teal":2803,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2502,2503]},{"teal":2804,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2504,2505]},{"teal":2805,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2506]},{"teal":2806,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2507]},{"teal":2807,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2508,2509,2510]},{"teal":2808,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2511,2512]},{"teal":2809,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2513]},{"teal":2810,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2514]},{"teal":2811,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2515]},{"teal":2814,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2516]},{"teal":2815,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2517,2518,2519]},{"teal":2816,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2520,2521]},{"teal":2817,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2522]},{"teal":2818,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2523]},{"teal":2819,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2524]},{"teal":2822,"source":"contracts/BalancedPoolV2.algo.ts:604","pc":[2525,2526,2527]},{"teal":2827,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2528,2529]},{"teal":2828,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2530,2531]},{"teal":2829,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2532]},{"teal":2830,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2533]},{"teal":2831,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2534]},{"teal":2834,"source":"contracts/BalancedPoolV2.algo.ts:605","errorMessage":"box value does not exist: this.weights(index).value","pc":[2535]},{"teal":2835,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2536]},{"teal":2836,"source":"contracts/BalancedPoolV2.algo.ts:605","pc":[2537,2538,2539]},{"teal":2842,"source":"contracts/BalancedPoolV2.algo.ts:608","pc":[2540,2541]},{"teal":2843,"source":"contracts/BalancedPoolV2.algo.ts:608","pc":[2542,2543]},{"teal":2844,"source":"contracts/BalancedPoolV2.algo.ts:608","pc":[2544]},{"teal":2845,"source":"contracts/BalancedPoolV2.algo.ts:608","pc":[2545,2546,2547]},{"teal":2850,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2548,2549]},{"teal":2851,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2550,2551]},{"teal":2852,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2552]},{"teal":2853,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2553]},{"teal":2854,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2554]},{"teal":2857,"source":"contracts/BalancedPoolV2.algo.ts:609","errorMessage":"box value does not exist: this.targetWeights(index).value","pc":[2555]},{"teal":2858,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2556]},{"teal":2859,"source":"contracts/BalancedPoolV2.algo.ts:609","pc":[2557,2558,2559]},{"teal":2864,"source":"contracts/BalancedPoolV2.algo.ts:612","pc":[2560,2561]},{"teal":2865,"source":"contracts/BalancedPoolV2.algo.ts:612","pc":[2562,2563]},{"teal":2866,"source":"contracts/BalancedPoolV2.algo.ts:612","pc":[2564]},{"teal":2867,"source":"contracts/BalancedPoolV2.algo.ts:612","pc":[2565,2566]},{"teal":2871,"source":"contracts/BalancedPoolV2.algo.ts:613","pc":[2567,2568]},{"teal":2872,"source":"contracts/BalancedPoolV2.algo.ts:613","pc":[2569,2570]},{"teal":2873,"source":"contracts/BalancedPoolV2.algo.ts:613","pc":[2571]},{"teal":2874,"source":"contracts/BalancedPoolV2.algo.ts:613","pc":[2572,2573]},{"teal":2878,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2574,2575]},{"teal":2879,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2576,2577]},{"teal":2880,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2578]},{"teal":2881,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2579]},{"teal":2882,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2580]},{"teal":2885,"source":"contracts/BalancedPoolV2.algo.ts:615","errorMessage":"box value does not exist: this.weights(index).value","pc":[2581]},{"teal":2886,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2582]},{"teal":2887,"source":"contracts/BalancedPoolV2.algo.ts:615","pc":[2583,2584]},{"teal":2891,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2585,2586]},{"teal":2892,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2587,2588]},{"teal":2893,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2589]},{"teal":2894,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2590]},{"teal":2895,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2591]},{"teal":2898,"source":"contracts/BalancedPoolV2.algo.ts:616","errorMessage":"box value does not exist: this.targetWeights(index).value","pc":[2592]},{"teal":2899,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2593]},{"teal":2900,"source":"contracts/BalancedPoolV2.algo.ts:616","pc":[2594,2595]},{"teal":2904,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2596,2597]},{"teal":2905,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2598,2599]},{"teal":2906,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2600]},{"teal":2907,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2601,2602,2603]},{"teal":2908,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2604,2605]},{"teal":2909,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2606,2607]},{"teal":2910,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2608]},{"teal":2911,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2609,2610,2611]},{"teal":2914,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2612,2613]},{"teal":2915,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2614,2615]},{"teal":2916,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2616]},{"teal":2919,"source":"contracts/BalancedPoolV2.algo.ts:618","pc":[2617,2618]},{"teal":2923,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2619,2620]},{"teal":2924,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2621,2622]},{"teal":2925,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2623]},{"teal":2926,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2624]},{"teal":2927,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2625,2626]},{"teal":2928,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2627]},{"teal":2929,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2628]},{"teal":2930,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2629]},{"teal":2931,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2630]},{"teal":2932,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2631]},{"teal":2935,"source":"contracts/BalancedPoolV2.algo.ts:619","errorMessage":"wideRatio failed","pc":[2632]},{"teal":2936,"source":"contracts/BalancedPoolV2.algo.ts:619","pc":[2633,2634]},{"teal":2940,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2635,2636]},{"teal":2941,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2637,2638]},{"teal":2942,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2639]},{"teal":2943,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2640,2641,2642]},{"teal":2944,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2643,2644]},{"teal":2945,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2645,2646]},{"teal":2946,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2647]},{"teal":2947,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2648,2649,2650]},{"teal":2950,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2651,2652]},{"teal":2951,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2653,2654]},{"teal":2952,"source":"contracts/BalancedPoolV2.algo.ts:621","pc":[2655]},{"teal":2958,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2656,2657]},{"teal":2961,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2658,2659]},{"teal":2962,"source":"contracts/BalancedPoolV2.algo.ts:598","pc":[2660]},{"teal":2967,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2661,2662]},{"teal":2970,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2663,2664,2665]},{"teal":2971,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2666]},{"teal":2972,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2667]},{"teal":2973,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2668]},{"teal":2974,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2669]},{"teal":2975,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2670]},{"teal":2976,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2671,2672,2673]},{"teal":2977,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2674]},{"teal":2978,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2675]},{"teal":2979,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2676]},{"teal":2980,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2677]},{"teal":2981,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2678]},{"teal":2982,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2679]},{"teal":2986,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2680,2681,2682]},{"teal":2990,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2683,2684]},{"teal":2991,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2685]},{"teal":2992,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2686]},{"teal":2993,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2687,2688]},{"teal":2994,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2689]},{"teal":2995,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2690]},{"teal":2996,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2691]},{"teal":2997,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2692,2693]},{"teal":2998,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2694]},{"teal":2999,"source":"contracts/BalancedPoolV2.algo.ts:626","pc":[2695]},{"teal":3000,"source":"contracts/BalancedPoolV2.algo.ts:624","pc":[2696]},{"teal":3003,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2697,2698]},{"teal":3004,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2699,2700,2701]},{"teal":3005,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2702,2703,2704,2705,2706,2707]},{"teal":3006,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2708,2709,2710]},{"teal":3007,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2711,2712,2713,2714]},{"teal":3010,"source":"contracts/BalancedPoolV2.algo.ts:7","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[2715]},{"teal":3013,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2716,2717,2718,2719,2720,2721]},{"teal":3014,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2722,2723,2724,2725,2726,2727]},{"teal":3015,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2728,2729,2730,2731,2732,2733]},{"teal":3016,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2734,2735,2736,2737,2738,2739]},{"teal":3017,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2740,2741,2742,2743,2744,2745]},{"teal":3018,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2746,2747,2748,2749,2750,2751]},{"teal":3019,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2752,2753,2754,2755,2756,2757]},{"teal":3020,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2758,2759,2760,2761,2762,2763]},{"teal":3021,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2764,2765,2766,2767,2768,2769]},{"teal":3022,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2770,2771,2772,2773,2774,2775]},{"teal":3023,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2776,2777,2778,2779,2780,2781]},{"teal":3024,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2782,2783,2784,2785,2786,2787]},{"teal":3025,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2788,2789,2790]},{"teal":3026,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816]},{"teal":3029,"source":"contracts/BalancedPoolV2.algo.ts:7","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[2817]},{"teal":3032,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2818,2819,2820]},{"teal":3033,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832]},{"teal":3034,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2833,2834]},{"teal":3035,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2835]},{"teal":3036,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2836]},{"teal":3037,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2837]},{"teal":3041,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2838,2839,2840]},{"teal":3042,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2841,2842]},{"teal":3043,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2843]},{"teal":3044,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2844]},{"teal":3045,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2845,2846,2847]},{"teal":3046,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2848,2849,2850]},{"teal":3047,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2851]},{"teal":3050,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2852,2853]},{"teal":3051,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2854,2855]},{"teal":3052,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2856]},{"teal":3053,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2857]},{"teal":3054,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2858]},{"teal":3055,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2859,2860,2861]},{"teal":3056,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2862,2863]},{"teal":3057,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2864,2865]},{"teal":3058,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2866]},{"teal":3059,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2867,2868,2869]},{"teal":3060,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2870,2871,2872]},{"teal":3063,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2873]},{"teal":3066,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2874,2875]},{"teal":3067,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2876,2877]},{"teal":3068,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2878]},{"teal":3069,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2879,2880,2881]},{"teal":3070,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2882]},{"teal":3071,"source":"contracts/BalancedPoolV2.algo.ts:7","pc":[2883]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAKAAgBwIQ9CgYEIAIFJg4ACWJhbGFuY2VzXwZhc3NldHMJcHJvdmlkZWRfBBUffHUFdG9rZW4IZW5kX3RpbWUId2VpZ2h0c18Kc3RhcnRfdGltZQ90YXJnZXRfd2VpZ2h0c18GYnVybmVkAwqBAQgAAAAAAAAAAAdtYW5hZ2VyMRgUIQULMRkIjQwJ+AAAAAAAAAAAAAAJ5QAAAAAAAAAAAAAAiAACJEOKAAAnDTYyAHIHSGcnCCJnJwYiZ4knBDYaAlcCADYaAVcCAIgABRZQsCRDigIBKEmIBMiL/xUjCiEID0SL/xUjCov+FSMKEkQijAAijAGLAYv/FSMKDEEAVov/Nf8iiwEjCwg0/0wjWBeIA9WL/jX/IosBIwsINP9MI1gXi/81/yKLASMLCDT/TCNYF4sBiAPUiwCL/jX/IosBIwsINP9MI1gXCIwAiwEkCIwBQv+fJwoiZyqL/0kVIwoWVwYCTFBnJYsAiAdHJA5EiAPYJwVkjABGAYk2GgNJFSEHEkQ2GgIXNhoBF4gAAiRDigMAKIgECYgEESpkVwIANf8ii/8jCwg0/0wjWBeMAIAMQXNzZXQgSUQgPT4giwAWULCLAIgDHymLABZQvkQXi/4IKYsAFlBMFr8ri/1QvUxIFEEAEiuL/VAqZFcCABUjCiQIIwu5SCuL/VC+RFcCADX/Iov/IwsINP9MK4v9UL5EVwIANf8ii/8jCwg0/0wjWBeL/ggWXSuL/VBJvEhMSRUjChZXBgJMUL+JJwQ2GgFJFSEHEkSIAAUWULAkQ4oBAShJiANKiANSIowAiAY5IhJBAA+BwIQ9IQQhBZQLjABCAAeL/4gFG4wAIowBiwEri/9QvkRXAgAVIwoMQQAzK4v/UL5EVwIANf8iiwEjCwg0/0wnDF0ri/9QSbxITEkVIwoWVwYCTFC/iwEkCIwBQv+7sSEGshCL/7IUiwCyEicFZLIRIrIBs4sAjABGAYk2GgIXNhoBSRUhBxJEiAACJEOKAgAoRwWIAqaIAq6L/iINRIgFk4wAKmRXAgAVIwqMASKMAosCiwEMQQBZKmRXAgA1/yKLAiMLCDT/TCNYF4wDKYsDFlC+RBeMBIv+iwQdIosAH0hITBREjAUpiwMWUIsEiwUJFr+xIQayEIv/shSLBbISiwOyESKyAbOLAiQIjAJC/58nCmSL/ggnCkxniScENhoEFzYaAxc2GgIXNhoBSRUhBxJEiAAFFlCwJEOKBAEoRwaIAfiIAgAqZFcCADX/Iov+IwsINP9MI1gXjAAqZFcCADX/Iov9IwsINP9MI1gXjAEpiwAWUL5EF4wCKYsBFlC+RBeMA4v+iAW/jASL/YgFuIwFi/yLBYsDiwSLAogDFYwGiwYWsCmLABZQiwKL/AgWvymLARZQiwOLBgkWv7EhBrIQi/+yFIsGshKLAbIRIrIBs4sGjABGBoknBDYaAlcCADYaAReIAAUWULAkQ4oCAShJiAFGiAFOMgeMACcIiwBnJwaLAIv/CGcijAGLAYv+FSMKDEEAIScJiwEWUIv+Nf8iiwEjCwg0/0wjWBcWv4sBJAiMAUL/1CcGZIwARgGJigAAKDIHJwZkD0EAMyKMAIsAKmRXAgAVIwoMQQAaJweLABZQJwmLABZQvkQXFr+LACQIjABC/9gnCCJnJwYiZ4mKAQAyCov/cABMSEEAAYmxIQayEDIKshSL/7IRIrISIrIBs4mKAwAnB4v/FlC9TEgUQQAJJweL/xZQI7lIKYv+FlC9TEgUQQAIKYv+FlAjuUgnB4v/FlCL/Ra/KYv+FlAnDL+JigAAJwVkIhJBAEonBbGBA7IQIQSBEJSyIiEFsiMyCrIqMgqyKTIDsiwyA7IrIrIkgA1CYWxhbmNlZFBvb2wtNjIAiAWCULImgAJMULIlIrIBs7Q8Z4mKAAAxACcNZBJEiYoAACcFZCITRImKAQEoRweL/yINRCKMAIv/JQxBACUkjAAlSR0ii/8fSEhMFESMAosCJQklHSKLAh9ISEwURIwBQgARi/8lCSUdIov/H0hITBREjAGLAYwDiwGMBCKMBbEhBbIQIrIBJwtJsh6yHyEJshmzIQiMBosGIQQOQQA/iwSLAR0iJR9ISEwURIwEIosEIosGH0hITBREjAeLBUEACIsDiwcJQgAFiwOLBwiMA4sFFIwFiwYkCIwGQv+5iwAWiwMWUIwARgeJigEBKEcCJYwAJYwBJIwCiwIhBA5BACKLAYv/HSKLAiULH0hITBREjAGLAIsBCIwAiwIkCIwCQv/WiwCMAEYCiYoCAShHBIv/IhJBAAQiQgBNi/+I/umMAIsANf80/1cACBeMAYsANf80/1cICBeMAov+iwIdIiUfSEhMFESMA4sDiP98jASLASQSQQAPJUkdIosEH0hITBREQgACiwSMAEYEiYoFAShHA4v7gdj8PB0iJR9ISEwURIwAi/8lHSKL/4sACB9ISEwURIwBi/4lHSKL/B9ISEwURIwCiwKLAYj/XowDi/8WsIsAFrCLARawiwIWsIsDFrCL/SWLAwkdIiUfSEhMFEQWsIv9JYsDCR0iJR9ISEwURIwARgOJigEBKEcKKmRXAgAVIwqMAIsAJA9EJYwBIowCiwKLACQJDEEAHbEhBbIQIrIBJwtJsh6yHyEJshmziwIkCIwCQv/ZIowDiwOLAAxBAKEqZFcCADX/IosDIwsINP9MI1gXjAQpiwQWUL5EF4wFK4v/UL5EVwIANf8iiwMjCwg0/0wjWBeMBosDiAGQjAeLBSINRIsGJR0iiwWLBgkfSEhMFESMCIsHiwiI/nmMCYsBiwkdIiUfSEhMFESMASuL/1C+RFcCADX/IosDIwsINP9MJwxdK4v/UEm8SExJFSMKFlcGAkxQv4sDJAiMA0L/V4gAFIwKiwqLAR0iJR9ISEwURIwARgqJigABJwVkcQBIJwVkcQhIJwVkcABICScKZAmJigIBi/+L/g1BAAiL/4v+CUIABYv+i/8JiScEiAAFFlCwJEOKAAEqZFcCABUjCoknBIgABRZQsCRDigABJwVkiScENhoBF4gABRZQsCRDigEBKCpkVwIANf8ii/8jCwg0/0wjWBeMACmLABZQvkQXjACJJwQ2GgMXNhoCFzYaAReIAAUWULAkQ4oDAShHBSpkVwIANf8ii/8jCwg0/0wjWBeMACpkVwIANf8ii/4jCwg0/0wjWBeMASmLABZQvkQXjAIpiwEWUL5EF4wDi/+IACmMBIv+iAAijAWL/YsFiwOLBIsCiP1/jABGBYknBDYaAReIAAUWULAkQ4oBAShHCDIHjAAnCGSMAScGZIwCiwCLAQ5JQAAFiwEiEhFJQAAFiwIiEhFBAAwnB4v/FlC+RBdCAHSLAIsCD0EADCcJi/8WUL5EF0IAYIsAiwEJjAOLAosBCYwEJweL/xZQvkQXjAUnCYv/FlC+RBeMBosGiwUNQQAIiwaLBQlCAAWLBYsGCYwHiweLAx0iiwQfSEhMFESMCIsGiwUNQQAIiwWLCAhCAAWLBYsICYwARgiJJwSIAA5JFSMKFlcGAkxQULAkQ4oAAScIZBYnBmQWUDIHFlCJMRtB9heABLhEezY2GgCOAfYKAIAE5jX9tYAEq99+FYAEKnQAT4AEP7HQm4AEjTJeKYAE9Hul6oAEcZQlnoAEIOtTlIAEQTEK7oAEKSAFg4AEKHiJ4oAEiZFb4jYaAI4M9b72fvc/9+P4hPlC/dD95v33/in+o/9kAIoBAYAKMDEyMzQ1Njc4OYv/JFiJigEBi/8iEkEABIABMImL/yEECiINQQALi/8hBAqI/+BCAAEoi/8hBBiI/8BQiQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BalancedPoolV2 contract
 */
export type BalancedPoolV2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64[],uint64[])uint64': {
      /**
       * assets of the pool
       */
      assetIds: bigint[] | number[]
      /**
      * weights of the pool
      uint64 - LP Token created ID

       */
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,address)void': {
      /**
       * index of the token in the pool
       */
      index: bigint | number
      /**
       * amount of token sent
       */
      amount: bigint | number
      /**
       * the sender
       */
      sender: string
    }
    'getLiquidity(address)uint64': {
      /**
       * The address receiving the LP tokens
       */
      sender: string
    }
    'burnLiquidity(address,uint64)void': {
      /**
       * The address burning LP tokens
       */
      sender: string
      /**
       * The amount of LP tokens to burn
       */
      amountLp: bigint | number
    }
    'swap(address,uint64,uint64,uint64)uint64': {
      /**
       * The address initiating the swap.
       */
      sender: string
      /**
       * Index of the input asset in the pool.
       */
      from: bigint | number
      /**
       * Index of the output asset in the pool.
       */
      to: bigint | number
      /**
       * Amount of input asset to swap.
       */
      amount: bigint | number
    }
    'changeWeights(uint64,uint64[])uint64': {
      /**
       * Duration of the interpolation. If 0, the weights are updated instantly.
       */
      duration: bigint | number
      /**
       * Array of new target weights for each asset in the pool.
       */
      newWeights: bigint[] | number[]
    }
    'getTotalAssets()uint64': Record<string, never>
    'getToken()uint64': Record<string, never>
    'getBalance(uint64)uint64': {
      index: bigint | number
    }
    'estimateSwap(uint64,uint64,uint64)uint64': {
      from: bigint | number
      to: bigint | number
      amount: bigint | number
    }
    'getCurrentWeight(uint64)uint64': {
      index: bigint | number
    }
    'getTimes()uint64[]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64[],uint64[])uint64': [assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,address)void': [index: bigint | number, amount: bigint | number, sender: string]
    'getLiquidity(address)uint64': [sender: string]
    'burnLiquidity(address,uint64)void': [sender: string, amountLp: bigint | number]
    'swap(address,uint64,uint64,uint64)uint64': [sender: string, from: bigint | number, to: bigint | number, amount: bigint | number]
    'changeWeights(uint64,uint64[])uint64': [duration: bigint | number, newWeights: bigint[] | number[]]
    'getTotalAssets()uint64': []
    'getToken()uint64': []
    'getBalance(uint64)uint64': [index: bigint | number]
    'estimateSwap(uint64,uint64,uint64)uint64': [from: bigint | number, to: bigint | number, amount: bigint | number]
    'getCurrentWeight(uint64)uint64': [index: bigint | number]
    'getTimes()uint64[]': []
  }
}

/**
 * The return type for each method
 */
export type BalancedPoolV2Returns = {
  'createApplication()void': void
  'bootstrap(uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,address)void': void
  'getLiquidity(address)uint64': bigint
  'burnLiquidity(address,uint64)void': void
  'swap(address,uint64,uint64,uint64)uint64': bigint
  'changeWeights(uint64,uint64[])uint64': bigint
  'getTotalAssets()uint64': bigint
  'getToken()uint64': bigint
  'getBalance(uint64)uint64': bigint
  'estimateSwap(uint64,uint64,uint64)uint64': bigint
  'getCurrentWeight(uint64)uint64': bigint
  'getTimes()uint64[]': bigint[]
}

/**
 * Defines the types of available calls and state of the BalancedPoolV2 smart contract.
 */
export type BalancedPoolV2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BalancedPoolV2Args['obj']['createApplication()void']
      argsTuple: BalancedPoolV2Args['tuple']['createApplication()void']
      returns: BalancedPoolV2Returns['createApplication()void']
    }>
    & Record<'bootstrap(uint64[],uint64[])uint64' | 'bootstrap', {
      argsObj: BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64']
      argsTuple: BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']
      returns: BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,address)void' | 'addLiquidity', {
      argsObj: BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void']
      argsTuple: BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']
      returns: BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void']
    }>
    & Record<'getLiquidity(address)uint64' | 'getLiquidity', {
      argsObj: BalancedPoolV2Args['obj']['getLiquidity(address)uint64']
      argsTuple: BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']
      /**
       * The amount of LP tokens minted
       */
      returns: BalancedPoolV2Returns['getLiquidity(address)uint64']
    }>
    & Record<'burnLiquidity(address,uint64)void' | 'burnLiquidity', {
      argsObj: BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void']
      argsTuple: BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']
      returns: BalancedPoolV2Returns['burnLiquidity(address,uint64)void']
    }>
    & Record<'swap(address,uint64,uint64,uint64)uint64' | 'swap', {
      argsObj: BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64']
      argsTuple: BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']
      /**
       * The amount of output asset received.
       */
      returns: BalancedPoolV2Returns['swap(address,uint64,uint64,uint64)uint64']
    }>
    & Record<'changeWeights(uint64,uint64[])uint64' | 'changeWeights', {
      argsObj: BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64']
      argsTuple: BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']
      returns: BalancedPoolV2Returns['changeWeights(uint64,uint64[])uint64']
    }>
    & Record<'getTotalAssets()uint64' | 'getTotalAssets', {
      argsObj: BalancedPoolV2Args['obj']['getTotalAssets()uint64']
      argsTuple: BalancedPoolV2Args['tuple']['getTotalAssets()uint64']
      returns: BalancedPoolV2Returns['getTotalAssets()uint64']
    }>
    & Record<'getToken()uint64' | 'getToken', {
      argsObj: BalancedPoolV2Args['obj']['getToken()uint64']
      argsTuple: BalancedPoolV2Args['tuple']['getToken()uint64']
      returns: BalancedPoolV2Returns['getToken()uint64']
    }>
    & Record<'getBalance(uint64)uint64' | 'getBalance', {
      argsObj: BalancedPoolV2Args['obj']['getBalance(uint64)uint64']
      argsTuple: BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']
      returns: BalancedPoolV2Returns['getBalance(uint64)uint64']
    }>
    & Record<'estimateSwap(uint64,uint64,uint64)uint64' | 'estimateSwap', {
      argsObj: BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64']
      argsTuple: BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']
      returns: BalancedPoolV2Returns['estimateSwap(uint64,uint64,uint64)uint64']
    }>
    & Record<'getCurrentWeight(uint64)uint64' | 'getCurrentWeight', {
      argsObj: BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64']
      argsTuple: BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']
      returns: BalancedPoolV2Returns['getCurrentWeight(uint64)uint64']
    }>
    & Record<'getTimes()uint64[]' | 'getTimes', {
      argsObj: BalancedPoolV2Args['obj']['getTimes()uint64[]']
      argsTuple: BalancedPoolV2Args['tuple']['getTimes()uint64[]']
      returns: BalancedPoolV2Returns['getTimes()uint64[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
        token: bigint
        burned: bigint
        assets: bigint[]
        startTime: bigint
        endTime: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        weights: Map<bigint | number, bigint>
        targetWeights: Map<bigint | number, bigint>
        balances: Map<bigint | number, bigint>
        provided: Map<string, bigint[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BalancedPoolV2Signatures = keyof BalancedPoolV2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BalancedPoolV2NonVoidMethodSignatures = keyof BalancedPoolV2Types['methods'] extends infer T ? T extends keyof BalancedPoolV2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BalancedPoolV2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BalancedPoolV2Signatures> = BalancedPoolV2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BalancedPoolV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BalancedPoolV2Signatures> = BalancedPoolV2Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BalancedPoolV2Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BalancedPoolV2Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BalancedPoolV2CreateCallParams =
  | Expand<CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BalancedPoolV2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BalancedPoolV2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BalancedPoolV2 smart contract
 */
export abstract class BalancedPoolV2ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BalancedPoolV2CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BalancedPoolV2ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BalancedPoolV2 smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64[],uint64[])uint64 ABI method
   *
   * Bootstrap the pool by assigning assets and weights, create the LP tokens.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,address)void ABI method
   *
   * Provide one token liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index, params.args.amount, params.args.sender],
    }
  }
  /**
   * Constructs a no op call for the getLiquidity(address)uint64 ABI method
   *
  * Mints LP tokens to the given sender based on the liquidity they provided.
  
  
  If this is the first liquidity provision (i.e., total LP supply is 0),
  a fixed initial amount is minted to the sender. Otherwise, the amount
  is calculated proportionally using .
  
  
  After minting, the sender's "provided" state is reset.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLiquidity(params: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLiquidity(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender],
    }
  }
  /**
   * Constructs a no op call for the burnLiquidity(address,uint64)void ABI method
   *
  * Burns a given amount of LP tokens from the sender and returns
  their proportional share of each asset in the pool.
  
  
  The withdrawn amount for each asset is calculated based on the
  ratio of  to the total LP supply.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnLiquidity(params: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnLiquidity(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.amountLp],
    }
  }
  /**
   * Constructs a no op call for the swap(address,uint64,uint64,uint64)uint64 ABI method
   *
  * Executes a weighted swap between two tokens in the pool based on the constant mean formula.
  
  
  The input token () is sent into the pool, and the output token () is sent back
  to the sender, following the AMM's pricing curve determined by current balances and weights.
  
  
  This function performs the following steps:
  - Retrieves the current weights and balances for the two assets.
  - Calculates the output amount using the invariant pricing function ().
  - Updates the pool's internal balances accordingly.
  - Transfers the output asset to the sender.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(address,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.from, params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the changeWeights(uint64,uint64[])uint64 ABI method
   *
  * Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
  
  
  If  is zero, the new weights are applied immediately by overwriting the current weights.
  Otherwise, a linear transition is initiated from the current weights to  over the specified
  duration (measured in seconds or microseconds (?)).
  
  
  During the transition period, weights are dynamically computed based on the elapsed time
  between  and , and stored in . The current weights must be
  retrieved using a function like  for accurate interpolated values.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeWeights(params: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeWeights(uint64,uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.duration, params.args.newWeights],
    }
  }
  /**
   * Constructs a no op call for the getTotalAssets()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalAssets(params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalAssets()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getToken()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getToken(params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getToken()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBalance(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBalance(params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBalance(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index],
    }
  }
  /**
   * Constructs a no op call for the estimateSwap(uint64,uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static estimateSwap(params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'estimateSwap(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getCurrentWeight(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentWeight(params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentWeight(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index],
    }
  }
  /**
   * Constructs a no op call for the getTimes()uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTimes(params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTimes()uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BalancedPoolV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BalancedPoolV2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BalancedPoolV2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BalancedPoolV2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BalancedPoolV2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BalancedPoolV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BalancedPoolV2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BalancedPoolV2ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BalancedPoolV2CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BalancedPoolV2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using the createApplication()void ABI method.
       *
      * Initializes global state variables when the application is first created.
      
      
      This method is automatically invoked during the application's creation call ( with bare create).
      It sets the initial manager to the app creator.
      
      
      This function should only be called once at contract deployment.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using the createApplication()void ABI method.
       *
      * Initializes global state variables when the application is first created.
      
      
      This method is automatically invoked during the application's creation call ( with bare create).
      It sets the initial manager to the app creator.
      
      
      This function should only be called once at contract deployment.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BalancedPoolV2 smart contract using an ABI method call using the createApplication()void ABI method.
       *
      * Initializes global state variables when the application is first created.
      
      
      This method is automatically invoked during the application's creation call ( with bare create).
      It sets the initial manager to the app creator.
      
      
      This function should only be called once at contract deployment.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BalancedPoolV2Args['obj']['createApplication()void'] | BalancedPoolV2Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BalancedPoolV2ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BalancedPoolV2Returns['createApplication()void']) }, appClient: new BalancedPoolV2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BalancedPoolV2 smart contract
 */
export class BalancedPoolV2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BalancedPoolV2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the BalancedPoolV2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BalancedPoolV2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BalancedPoolV2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BalancedPoolV2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BalancedPoolV2Client> {
    return new BalancedPoolV2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BalancedPoolV2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BalancedPoolV2Client> {
    return new BalancedPoolV2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * Bootstrap the pool by assigning assets and weights, create the LP tokens.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide one token liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getLiquidity(address)uint64` ABI method.
     *
    * Mints LP tokens to the given sender based on the liquidity they provided.
    
    
    If this is the first liquidity provision (i.e., total LP supply is 0),
    a fixed initial amount is minted to the sender. Otherwise, the amount
    is calculated proportionally using .
    
    
    After minting, the sender's "provided" state is reset.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The amount of LP tokens minted
     */
    getLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `burnLiquidity(address,uint64)void` ABI method.
     *
    * Burns a given amount of LP tokens from the sender and returns
    their proportional share of each asset in the pool.
    
    
    The withdrawn amount for each asset is calculated based on the
    ratio of  to the total LP supply.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `swap(address,uint64,uint64,uint64)uint64` ABI method.
     *
    * Executes a weighted swap between two tokens in the pool based on the constant mean formula.
    
    
    The input token () is sent into the pool, and the output token () is sent back
    to the sender, following the AMM's pricing curve determined by current balances and weights.
    
    
    This function performs the following steps:
    - Retrieves the current weights and balances for the two assets.
    - Calculates the output amount using the invariant pricing function ().
    - Updates the pool's internal balances accordingly.
    - Transfers the output asset to the sender.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The amount of output asset received.
     */
    swap: (params: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.swap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `changeWeights(uint64,uint64[])uint64` ABI method.
     *
    * Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
    
    
    If  is zero, the new weights are applied immediately by overwriting the current weights.
    Otherwise, a linear transition is initiated from the current weights to  over the specified
    duration (measured in seconds or microseconds (?)).
    
    
    During the transition period, weights are dynamically computed based on the elapsed time
    between  and , and stored in . The current weights must be
    retrieved using a function like  for accurate interpolated values.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeWeights: (params: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.changeWeights(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTotalAssets()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalAssets: (params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getTotalAssets(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getToken()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getToken: (params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getToken(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getBalance(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBalance: (params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getBalance(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `estimateSwap(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    estimateSwap: (params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.estimateSwap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getCurrentWeight(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentWeight: (params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getCurrentWeight(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTimes()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTimes: (params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BalancedPoolV2ParamsFactory.getTimes(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * Bootstrap the pool by assigning assets and weights, create the LP tokens.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide one token liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getLiquidity(address)uint64` ABI method.
     *
    * Mints LP tokens to the given sender based on the liquidity they provided.
    
    
    If this is the first liquidity provision (i.e., total LP supply is 0),
    a fixed initial amount is minted to the sender. Otherwise, the amount
    is calculated proportionally using .
    
    
    After minting, the sender's "provided" state is reset.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The amount of LP tokens minted
     */
    getLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `burnLiquidity(address,uint64)void` ABI method.
     *
    * Burns a given amount of LP tokens from the sender and returns
    their proportional share of each asset in the pool.
    
    
    The withdrawn amount for each asset is calculated based on the
    ratio of  to the total LP supply.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnLiquidity: (params: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `swap(address,uint64,uint64,uint64)uint64` ABI method.
     *
    * Executes a weighted swap between two tokens in the pool based on the constant mean formula.
    
    
    The input token () is sent into the pool, and the output token () is sent back
    to the sender, following the AMM's pricing curve determined by current balances and weights.
    
    
    This function performs the following steps:
    - Retrieves the current weights and balances for the two assets.
    - Calculates the output amount using the invariant pricing function ().
    - Updates the pool's internal balances accordingly.
    - Transfers the output asset to the sender.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The amount of output asset received.
     */
    swap: (params: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.swap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `changeWeights(uint64,uint64[])uint64` ABI method.
     *
    * Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
    
    
    If  is zero, the new weights are applied immediately by overwriting the current weights.
    Otherwise, a linear transition is initiated from the current weights to  over the specified
    duration (measured in seconds or microseconds (?)).
    
    
    During the transition period, weights are dynamically computed based on the elapsed time
    between  and , and stored in . The current weights must be
    retrieved using a function like  for accurate interpolated values.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeWeights: (params: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.changeWeights(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTotalAssets()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalAssets: (params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getTotalAssets(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getToken()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getToken: (params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getToken(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getBalance(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBalance: (params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getBalance(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `estimateSwap(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    estimateSwap: (params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.estimateSwap(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getCurrentWeight(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentWeight: (params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getCurrentWeight(params))
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTimes()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTimes: (params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BalancedPoolV2ParamsFactory.getTimes(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `bootstrap(uint64[],uint64[])uint64` ABI method.
     *
     * Bootstrap the pool by assigning assets and weights, create the LP tokens.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `addLiquidity(uint64,uint64,address)void` ABI method.
     *
     * Provide one token liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getLiquidity(address)uint64` ABI method.
     *
    * Mints LP tokens to the given sender based on the liquidity they provided.
    
    
    If this is the first liquidity provision (i.e., total LP supply is 0),
    a fixed initial amount is minted to the sender. Otherwise, the amount
    is calculated proportionally using .
    
    
    After minting, the sender's "provided" state is reset.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The amount of LP tokens minted
     */
    getLiquidity: async (params: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getLiquidity(address)uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `burnLiquidity(address,uint64)void` ABI method.
     *
    * Burns a given amount of LP tokens from the sender and returns
    their proportional share of each asset in the pool.
    
    
    The withdrawn amount for each asset is calculated based on the
    ratio of  to the total LP supply.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnLiquidity: async (params: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.burnLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['burnLiquidity(address,uint64)void'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `swap(address,uint64,uint64,uint64)uint64` ABI method.
     *
    * Executes a weighted swap between two tokens in the pool based on the constant mean formula.
    
    
    The input token () is sent into the pool, and the output token () is sent back
    to the sender, following the AMM's pricing curve determined by current balances and weights.
    
    
    This function performs the following steps:
    - Retrieves the current weights and balances for the two assets.
    - Calculates the output amount using the invariant pricing function ().
    - Updates the pool's internal balances accordingly.
    - Transfers the output asset to the sender.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The amount of output asset received.
     */
    swap: async (params: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['swap(address,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `changeWeights(uint64,uint64[])uint64` ABI method.
     *
    * Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
    
    
    If  is zero, the new weights are applied immediately by overwriting the current weights.
    Otherwise, a linear transition is initiated from the current weights to  over the specified
    duration (measured in seconds or microseconds (?)).
    
    
    During the transition period, weights are dynamically computed based on the elapsed time
    between  and , and stored in . The current weights must be
    retrieved using a function like  for accurate interpolated values.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeWeights: async (params: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.changeWeights(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['changeWeights(uint64,uint64[])uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTotalAssets()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalAssets: async (params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getTotalAssets(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getTotalAssets()uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getToken()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getToken: async (params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getToken(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getToken()uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getBalance(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBalance: async (params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getBalance(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getBalance(uint64)uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `estimateSwap(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    estimateSwap: async (params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.estimateSwap(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['estimateSwap(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getCurrentWeight(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentWeight: async (params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getCurrentWeight(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getCurrentWeight(uint64)uint64'])}
    },

    /**
     * Makes a call to the BalancedPoolV2 smart contract using the `getTimes()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTimes: async (params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getTimes(params))
      return {...result, return: result.return as unknown as (undefined | BalancedPoolV2Returns['getTimes()uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BalancedPoolV2Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `getTotalAssets()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalAssets(params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getTotalAssets(params))
    return result.return as unknown as BalancedPoolV2Returns['getTotalAssets()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `getToken()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getToken(params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getToken(params))
    return result.return as unknown as BalancedPoolV2Returns['getToken()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `getBalance(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBalance(params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']>) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getBalance(params))
    return result.return as unknown as BalancedPoolV2Returns['getBalance(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `estimateSwap(uint64,uint64,uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async estimateSwap(params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']>) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.estimateSwap(params))
    return result.return as unknown as BalancedPoolV2Returns['estimateSwap(uint64,uint64,uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `getCurrentWeight(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentWeight(params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']>) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getCurrentWeight(params))
    return result.return as unknown as BalancedPoolV2Returns['getCurrentWeight(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BalancedPoolV2 smart contract using the `getTimes()uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTimes(params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> = {args: []}) {
    const result = await this.appClient.send.call(BalancedPoolV2ParamsFactory.getTimes(params))
    return result.return as unknown as BalancedPoolV2Returns['getTimes()uint64[]']
  }

  /**
   * Methods to access state for the current BalancedPoolV2 app
   */
  state = {
    /**
     * Methods to access global state for the current BalancedPoolV2 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
          token: result.token,
          burned: result.burned,
          assets: result.assets,
          startTime: result.startTime,
          endTime: result.endTime,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
      /**
       * Get the current value of the token key in global state
       */
      token: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token")) as bigint | undefined },
      /**
       * Get the current value of the burned key in global state
       */
      burned: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("burned")) as bigint | undefined },
      /**
       * Get the current value of the assets key in global state
       */
      assets: async (): Promise<bigint[] | undefined> => { return (await this.appClient.state.global.getValue("assets")) as bigint[] | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the endTime key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endTime")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BalancedPoolV2 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the weights map in box state
       */
      weights: {
        /**
         * Get all current values of the weights map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("weights")) as Map<bigint, bigint> },
        /**
         * Get a current value of the weights map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("weights", key) as bigint | undefined },
      },
      /**
       * Get values from the targetWeights map in box state
       */
      targetWeights: {
        /**
         * Get all current values of the targetWeights map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("targetWeights")) as Map<bigint, bigint> },
        /**
         * Get a current value of the targetWeights map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("targetWeights", key) as bigint | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<bigint, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the provided map in box state
       */
      provided: {
        /**
         * Get all current values of the provided map in box state
         */
        getMap: async (): Promise<Map<string, bigint[]>> => { return (await this.appClient.state.box.getMap("provided")) as Map<string, bigint[]> },
        /**
         * Get a current value of the provided map by key from box state
         */
        value: async (key: string): Promise<bigint[] | undefined> => { return await this.appClient.state.box.getMapValue("provided", key) as bigint[] | undefined },
      },
    },
  }

  public newGroup(): BalancedPoolV2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64[],uint64[])uint64 method call against the BalancedPoolV2 contract
       */
      bootstrap(params: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,address)void method call against the BalancedPoolV2 contract
       */
      addLiquidity(params: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLiquidity(address)uint64 method call against the BalancedPoolV2 contract
       */
      getLiquidity(params: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLiquidity(address)uint64', v))
        return this
      },
      /**
       * Add a burnLiquidity(address,uint64)void method call against the BalancedPoolV2 contract
       */
      burnLiquidity(params: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(address,uint64,uint64,uint64)uint64 method call against the BalancedPoolV2 contract
       */
      swap(params: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(address,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a changeWeights(uint64,uint64[])uint64 method call against the BalancedPoolV2 contract
       */
      changeWeights(params: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeWeights(params)))
        resultMappers.push((v) => client.decodeReturnValue('changeWeights(uint64,uint64[])uint64', v))
        return this
      },
      /**
       * Add a getTotalAssets()uint64 method call against the BalancedPoolV2 contract
       */
      getTotalAssets(params: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalAssets()uint64', v))
        return this
      },
      /**
       * Add a getToken()uint64 method call against the BalancedPoolV2 contract
       */
      getToken(params: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('getToken()uint64', v))
        return this
      },
      /**
       * Add a getBalance(uint64)uint64 method call against the BalancedPoolV2 contract
       */
      getBalance(params: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBalance(uint64)uint64', v))
        return this
      },
      /**
       * Add a estimateSwap(uint64,uint64,uint64)uint64 method call against the BalancedPoolV2 contract
       */
      estimateSwap(params: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.estimateSwap(params)))
        resultMappers.push((v) => client.decodeReturnValue('estimateSwap(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getCurrentWeight(uint64)uint64 method call against the BalancedPoolV2 contract
       */
      getCurrentWeight(params: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentWeight(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentWeight(uint64)uint64', v))
        return this
      },
      /**
       * Add a getTimes()uint64[] method call against the BalancedPoolV2 contract
       */
      getTimes(params: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTimes(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTimes()uint64[]', v))
        return this
      },
      /**
       * Add a clear state call to the BalancedPoolV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BalancedPoolV2Composer
  }
}
export type BalancedPoolV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64[],uint64[])uint64 ABI method.
   *
   * Bootstrap the pool by assigning assets and weights, create the LP tokens.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BalancedPoolV2Args['obj']['bootstrap(uint64[],uint64[])uint64'] | BalancedPoolV2Args['tuple']['bootstrap(uint64[],uint64[])uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['bootstrap(uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,address)void ABI method.
   *
   * Provide one token liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<BalancedPoolV2Args['obj']['addLiquidity(uint64,uint64,address)void'] | BalancedPoolV2Args['tuple']['addLiquidity(uint64,uint64,address)void']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['addLiquidity(uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the getLiquidity(address)uint64 ABI method.
   *
  * Mints LP tokens to the given sender based on the liquidity they provided.
  
  
  If this is the first liquidity provision (i.e., total LP supply is 0),
  a fixed initial amount is minted to the sender. Otherwise, the amount
  is calculated proportionally using .
  
  
  After minting, the sender's "provided" state is reset.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLiquidity(params?: CallParams<BalancedPoolV2Args['obj']['getLiquidity(address)uint64'] | BalancedPoolV2Args['tuple']['getLiquidity(address)uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getLiquidity(address)uint64'] | undefined]>

  /**
   * Calls the burnLiquidity(address,uint64)void ABI method.
   *
  * Burns a given amount of LP tokens from the sender and returns
  their proportional share of each asset in the pool.
  
  
  The withdrawn amount for each asset is calculated based on the
  ratio of  to the total LP supply.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLiquidity(params?: CallParams<BalancedPoolV2Args['obj']['burnLiquidity(address,uint64)void'] | BalancedPoolV2Args['tuple']['burnLiquidity(address,uint64)void']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['burnLiquidity(address,uint64)void'] | undefined]>

  /**
   * Calls the swap(address,uint64,uint64,uint64)uint64 ABI method.
   *
  * Executes a weighted swap between two tokens in the pool based on the constant mean formula.
  
  
  The input token () is sent into the pool, and the output token () is sent back
  to the sender, following the AMM's pricing curve determined by current balances and weights.
  
  
  This function performs the following steps:
  - Retrieves the current weights and balances for the two assets.
  - Calculates the output amount using the invariant pricing function ().
  - Updates the pool's internal balances accordingly.
  - Transfers the output asset to the sender.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<BalancedPoolV2Args['obj']['swap(address,uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['swap(address,uint64,uint64,uint64)uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['swap(address,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the changeWeights(uint64,uint64[])uint64 ABI method.
   *
  * Updates the pool's asset weights, either immediately or with a time-based linear interpolation.
  
  
  If  is zero, the new weights are applied immediately by overwriting the current weights.
  Otherwise, a linear transition is initiated from the current weights to  over the specified
  duration (measured in seconds or microseconds (?)).
  
  
  During the transition period, weights are dynamically computed based on the elapsed time
  between  and , and stored in . The current weights must be
  retrieved using a function like  for accurate interpolated values.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeWeights(params?: CallParams<BalancedPoolV2Args['obj']['changeWeights(uint64,uint64[])uint64'] | BalancedPoolV2Args['tuple']['changeWeights(uint64,uint64[])uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['changeWeights(uint64,uint64[])uint64'] | undefined]>

  /**
   * Calls the getTotalAssets()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalAssets(params?: CallParams<BalancedPoolV2Args['obj']['getTotalAssets()uint64'] | BalancedPoolV2Args['tuple']['getTotalAssets()uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getTotalAssets()uint64'] | undefined]>

  /**
   * Calls the getToken()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getToken(params?: CallParams<BalancedPoolV2Args['obj']['getToken()uint64'] | BalancedPoolV2Args['tuple']['getToken()uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getToken()uint64'] | undefined]>

  /**
   * Calls the getBalance(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalance(params?: CallParams<BalancedPoolV2Args['obj']['getBalance(uint64)uint64'] | BalancedPoolV2Args['tuple']['getBalance(uint64)uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getBalance(uint64)uint64'] | undefined]>

  /**
   * Calls the estimateSwap(uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  estimateSwap(params?: CallParams<BalancedPoolV2Args['obj']['estimateSwap(uint64,uint64,uint64)uint64'] | BalancedPoolV2Args['tuple']['estimateSwap(uint64,uint64,uint64)uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['estimateSwap(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getCurrentWeight(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentWeight(params?: CallParams<BalancedPoolV2Args['obj']['getCurrentWeight(uint64)uint64'] | BalancedPoolV2Args['tuple']['getCurrentWeight(uint64)uint64']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getCurrentWeight(uint64)uint64'] | undefined]>

  /**
   * Calls the getTimes()uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTimes(params?: CallParams<BalancedPoolV2Args['obj']['getTimes()uint64[]'] | BalancedPoolV2Args['tuple']['getTimes()uint64[]']>): BalancedPoolV2Composer<[...TReturns, BalancedPoolV2Returns['getTimes()uint64[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BalancedPoolV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BalancedPoolV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BalancedPoolV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BalancedPoolV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BalancedPoolV2ComposerResults<TReturns>>
}
export type BalancedPoolV2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

