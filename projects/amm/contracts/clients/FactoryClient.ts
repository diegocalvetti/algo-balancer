/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Add one token as liquidity to the pool","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"index","type":"uint64","desc":"the index"},{"name":"transferTxn","type":"axfer","desc":"transfer tx of the token, receiver must be the pool account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getLiquidity","desc":"Compute the liquidity for the sender and send the expected LP","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"burnLiquidity","args":[{"name":"poolID","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"poolID","type":"uint64"},{"name":"from","type":"uint64"},{"name":"to","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"opUp","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"*******************","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Pool":[{"name":"id","type":"uint64"},{"name":"assets","type":"uint64[]"},{"name":"weights","type":"uint64[]"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{"pools":{"keyType":"byte[32]","valueType":"Pool","prefix":"pools_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:10","pc":[1,2,3,4,5,6,7,8]},{"teal":3,"source":"contracts/Factory.algo.ts:10","pc":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":15,"source":"contracts/Factory.algo.ts:10","pc":[59,60]},{"teal":16,"source":"contracts/Factory.algo.ts:10","pc":[61]},{"teal":17,"source":"contracts/Factory.algo.ts:10","pc":[62]},{"teal":18,"source":"contracts/Factory.algo.ts:10","pc":[63]},{"teal":19,"source":"contracts/Factory.algo.ts:10","pc":[64,65]},{"teal":20,"source":"contracts/Factory.algo.ts:10","pc":[66]},{"teal":21,"source":"contracts/Factory.algo.ts:10","pc":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92]},{"teal":25,"source":"contracts/Factory.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[93]},{"teal":30,"source":"contracts/Factory.algo.ts:20","pc":[94,95,96]},{"teal":31,"source":"contracts/Factory.algo.ts:20","pc":[97]},{"teal":32,"source":"contracts/Factory.algo.ts:20","pc":[98]},{"teal":38,"source":"contracts/Factory.algo.ts:20","pc":[99,100,101]},{"teal":42,"source":"contracts/Factory.algo.ts:22","pc":[102]},{"teal":43,"source":"contracts/Factory.algo.ts:22","pc":[103,104,105]},{"teal":44,"source":"contracts/Factory.algo.ts:22","pc":[106,107]},{"teal":45,"source":"contracts/Factory.algo.ts:22","pc":[108]},{"teal":46,"source":"contracts/Factory.algo.ts:22","pc":[109]},{"teal":47,"source":"contracts/Factory.algo.ts:20","pc":[110]},{"teal":52,"source":"contracts/Factory.algo.ts:29","pc":[111,112,113]},{"teal":53,"source":"contracts/Factory.algo.ts:29","pc":[114]},{"teal":54,"source":"contracts/Factory.algo.ts:29","pc":[115]},{"teal":61,"source":"contracts/Factory.algo.ts:29","pc":[116,117,118]},{"teal":74,"source":"contracts/Factory.algo.ts:30","pc":[119]},{"teal":75,"source":"contracts/Factory.algo.ts:30","pc":[120]},{"teal":76,"source":"contracts/Factory.algo.ts:30","pc":[121,122]},{"teal":80,"source":"contracts/Factory.algo.ts:31","pc":[123]},{"teal":81,"source":"contracts/Factory.algo.ts:31","pc":[124,125]},{"teal":85,"source":"contracts/Factory.algo.ts:32","pc":[126]},{"teal":86,"source":"contracts/Factory.algo.ts:32","pc":[127]},{"teal":89,"source":"contracts/Factory.algo.ts:32","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[128]},{"teal":90,"source":"contracts/Factory.algo.ts:32","pc":[129,130]},{"teal":94,"source":"contracts/Factory.algo.ts:33","pc":[131,132,133]},{"teal":95,"source":"contracts/Factory.algo.ts:33","pc":[134,135]},{"teal":99,"source":"contracts/Factory.algo.ts:34","pc":[136,137]},{"teal":100,"source":"contracts/Factory.algo.ts:34","pc":[138,139]},{"teal":104,"source":"contracts/Factory.algo.ts:35","pc":[140,141]},{"teal":105,"source":"contracts/Factory.algo.ts:35","pc":[142,143]},{"teal":109,"source":"contracts/Factory.algo.ts:36","pc":[144,145]},{"teal":110,"source":"contracts/Factory.algo.ts:36","pc":[146,147]},{"teal":114,"source":"contracts/Factory.algo.ts:37","pc":[148,149]},{"teal":115,"source":"contracts/Factory.algo.ts:37","pc":[150,151]},{"teal":119,"source":"contracts/Factory.algo.ts:38","pc":[152,153,154,155]},{"teal":120,"source":"contracts/Factory.algo.ts:38","pc":[156,157]},{"teal":123,"source":"contracts/Factory.algo.ts:30","pc":[158]},{"teal":124,"source":"contracts/Factory.algo.ts:29","pc":[159]},{"teal":129,"source":"contracts/Factory.algo.ts:48","pc":[160,161]},{"teal":132,"source":"contracts/Factory.algo.ts:48","pc":[162,163,164]},{"teal":133,"source":"contracts/Factory.algo.ts:48","pc":[165,166,167]},{"teal":136,"source":"contracts/Factory.algo.ts:48","pc":[168,169,170]},{"teal":137,"source":"contracts/Factory.algo.ts:48","pc":[171,172,173]},{"teal":140,"source":"contracts/Factory.algo.ts:48","pc":[174,175,176]},{"teal":141,"source":"contracts/Factory.algo.ts:48","pc":[177]},{"teal":144,"source":"contracts/Factory.algo.ts:48","pc":[178,179,180]},{"teal":145,"source":"contracts/Factory.algo.ts:48","pc":[181]},{"teal":146,"source":"contracts/Factory.algo.ts:48","pc":[182]},{"teal":147,"source":"contracts/Factory.algo.ts:48","pc":[183]},{"teal":148,"source":"contracts/Factory.algo.ts:48","pc":[184]},{"teal":149,"source":"contracts/Factory.algo.ts:48","pc":[185]},{"teal":158,"source":"contracts/Factory.algo.ts:48","pc":[186,187,188]},{"teal":161,"source":"contracts/Factory.algo.ts:48","pc":[189]},{"teal":165,"source":"contracts/Factory.algo.ts:51","pc":[190,191]},{"teal":166,"source":"contracts/Factory.algo.ts:51","pc":[192,193]},{"teal":167,"source":"contracts/Factory.algo.ts:51","pc":[194,195,196]},{"teal":168,"source":"contracts/Factory.algo.ts:51","pc":[197,198]},{"teal":173,"source":"contracts/Factory.algo.ts:53","pc":[199]},{"teal":174,"source":"contracts/Factory.algo.ts:53","pc":[200,201]},{"teal":175,"source":"contracts/Factory.algo.ts:53","pc":[202]},{"teal":176,"source":"contracts/Factory.algo.ts:53","pc":[203]},{"teal":177,"source":"contracts/Factory.algo.ts:53","pc":[204]},{"teal":178,"source":"contracts/Factory.algo.ts:53","pc":[205]},{"teal":179,"source":"contracts/Factory.algo.ts:53","pc":[206]},{"teal":180,"source":"contracts/Factory.algo.ts:53","pc":[207,208,209]},{"teal":185,"source":"contracts/Factory.algo.ts:54","pc":[210]},{"teal":186,"source":"contracts/Factory.algo.ts:54","pc":[211,212]},{"teal":187,"source":"contracts/Factory.algo.ts:54","pc":[213]},{"teal":188,"source":"contracts/Factory.algo.ts:54","pc":[214]},{"teal":189,"source":"contracts/Factory.algo.ts:54","pc":[215]},{"teal":190,"source":"contracts/Factory.algo.ts:54","pc":[216]},{"teal":191,"source":"contracts/Factory.algo.ts:54","pc":[217]},{"teal":192,"source":"contracts/Factory.algo.ts:54","pc":[218]},{"teal":193,"source":"contracts/Factory.algo.ts:54","pc":[219,220,221,222]},{"teal":194,"source":"contracts/Factory.algo.ts:54","pc":[223,224]},{"teal":195,"source":"contracts/Factory.algo.ts:54","pc":[225]},{"teal":196,"source":"contracts/Factory.algo.ts:54","pc":[226,227,228]},{"teal":197,"source":"contracts/Factory.algo.ts:54","pc":[229,230]},{"teal":198,"source":"contracts/Factory.algo.ts:54","pc":[231]},{"teal":199,"source":"contracts/Factory.algo.ts:54","pc":[232]},{"teal":200,"source":"contracts/Factory.algo.ts:54","pc":[233]},{"teal":201,"source":"contracts/Factory.algo.ts:54","pc":[234]},{"teal":202,"source":"contracts/Factory.algo.ts:54","pc":[235]},{"teal":203,"source":"contracts/Factory.algo.ts:54","pc":[236,237,238]},{"teal":204,"source":"contracts/Factory.algo.ts:54","pc":[239]},{"teal":205,"source":"contracts/Factory.algo.ts:54","pc":[240]},{"teal":206,"source":"contracts/Factory.algo.ts:54","pc":[241,242,243]},{"teal":207,"source":"contracts/Factory.algo.ts:54","pc":[244,245]},{"teal":208,"source":"contracts/Factory.algo.ts:54","pc":[246]},{"teal":209,"source":"contracts/Factory.algo.ts:54","pc":[247]},{"teal":210,"source":"contracts/Factory.algo.ts:54","pc":[248]},{"teal":211,"source":"contracts/Factory.algo.ts:54","pc":[249]},{"teal":212,"source":"contracts/Factory.algo.ts:54","pc":[250]},{"teal":213,"source":"contracts/Factory.algo.ts:54","pc":[251,252,253]},{"teal":214,"source":"contracts/Factory.algo.ts:54","pc":[254]},{"teal":215,"source":"contracts/Factory.algo.ts:54","pc":[255]},{"teal":216,"source":"contracts/Factory.algo.ts:54","pc":[256,257,258]},{"teal":217,"source":"contracts/Factory.algo.ts:54","pc":[259]},{"teal":218,"source":"contracts/Factory.algo.ts:54","pc":[260]},{"teal":219,"source":"contracts/Factory.algo.ts:54","pc":[261]},{"teal":227,"source":"contracts/Factory.algo.ts:57","pc":[262]},{"teal":228,"source":"contracts/Factory.algo.ts:57","pc":[263]},{"teal":229,"source":"contracts/Factory.algo.ts:57","pc":[264,265]},{"teal":230,"source":"contracts/Factory.algo.ts:57","pc":[266,267,268,269,270,271]},{"teal":231,"source":"contracts/Factory.algo.ts:57","pc":[272,273]},{"teal":235,"source":"contracts/Factory.algo.ts:58","pc":[274,275]},{"teal":236,"source":"contracts/Factory.algo.ts:58","pc":[276,277]},{"teal":240,"source":"contracts/Factory.algo.ts:59","pc":[278,279]},{"teal":241,"source":"contracts/Factory.algo.ts:59","pc":[280]},{"teal":242,"source":"contracts/Factory.algo.ts:59","pc":[281]},{"teal":243,"source":"contracts/Factory.algo.ts:59","pc":[282]},{"teal":244,"source":"contracts/Factory.algo.ts:59","pc":[283]},{"teal":245,"source":"contracts/Factory.algo.ts:59","pc":[284]},{"teal":246,"source":"contracts/Factory.algo.ts:59","pc":[285,286,287]},{"teal":247,"source":"contracts/Factory.algo.ts:59","pc":[288]},{"teal":248,"source":"contracts/Factory.algo.ts:59","pc":[289]},{"teal":249,"source":"contracts/Factory.algo.ts:59","pc":[290,291]},{"teal":250,"source":"contracts/Factory.algo.ts:59","pc":[292,293]},{"teal":251,"source":"contracts/Factory.algo.ts:59","pc":[294]},{"teal":252,"source":"contracts/Factory.algo.ts:59","pc":[295]},{"teal":253,"source":"contracts/Factory.algo.ts:59","pc":[296]},{"teal":254,"source":"contracts/Factory.algo.ts:59","pc":[297]},{"teal":255,"source":"contracts/Factory.algo.ts:59","pc":[298]},{"teal":256,"source":"contracts/Factory.algo.ts:59","pc":[299,300,301]},{"teal":257,"source":"contracts/Factory.algo.ts:59","pc":[302]},{"teal":258,"source":"contracts/Factory.algo.ts:59","pc":[303]},{"teal":259,"source":"contracts/Factory.algo.ts:59","pc":[304,305]},{"teal":262,"source":"contracts/Factory.algo.ts:57","pc":[306]},{"teal":263,"source":"contracts/Factory.algo.ts:57","pc":[307,308]},{"teal":266,"source":"contracts/Factory.algo.ts:57","pc":[309]},{"teal":267,"source":"contracts/Factory.algo.ts:57","pc":[310,311]},{"teal":268,"source":"contracts/Factory.algo.ts:57","pc":[312]},{"teal":269,"source":"contracts/Factory.algo.ts:57","pc":[313]},{"teal":270,"source":"contracts/Factory.algo.ts:57","pc":[314,315]},{"teal":271,"source":"contracts/Factory.algo.ts:57","pc":[316,317,318]},{"teal":272,"source":"contracts/Factory.algo.ts:57","pc":[319]},{"teal":275,"source":"contracts/Factory.algo.ts:48","pc":[320,321]},{"teal":276,"source":"contracts/Factory.algo.ts:48","pc":[322]},{"teal":281,"source":"contracts/Factory.algo.ts:69","pc":[323,324]},{"teal":282,"source":"contracts/Factory.algo.ts:69","pc":[325]},{"teal":283,"source":"contracts/Factory.algo.ts:69","pc":[326]},{"teal":284,"source":"contracts/Factory.algo.ts:69","pc":[327]},{"teal":285,"source":"contracts/Factory.algo.ts:69","pc":[328,329]},{"teal":286,"source":"contracts/Factory.algo.ts:69","pc":[330,331]},{"teal":287,"source":"contracts/Factory.algo.ts:69","pc":[332]},{"teal":290,"source":"contracts/Factory.algo.ts:69","errorMessage":"argument 0 (transferTxn) for addLiquidity must be a axfer transaction","pc":[333]},{"teal":293,"source":"contracts/Factory.algo.ts:69","pc":[334,335,336]},{"teal":294,"source":"contracts/Factory.algo.ts:69","pc":[337]},{"teal":297,"source":"contracts/Factory.algo.ts:69","pc":[338,339,340]},{"teal":298,"source":"contracts/Factory.algo.ts:69","pc":[341]},{"teal":301,"source":"contracts/Factory.algo.ts:69","pc":[342,343,344]},{"teal":302,"source":"contracts/Factory.algo.ts:69","pc":[345]},{"teal":303,"source":"contracts/Factory.algo.ts:69","pc":[346]},{"teal":312,"source":"contracts/Factory.algo.ts:69","pc":[347,348,349]},{"teal":319,"source":"contracts/Factory.algo.ts:70","pc":[350]},{"teal":320,"source":"contracts/Factory.algo.ts:70","pc":[351]},{"teal":321,"source":"contracts/Factory.algo.ts:70","pc":[352,353]},{"teal":322,"source":"contracts/Factory.algo.ts:70","pc":[354,355,356,357,358,359]},{"teal":323,"source":"contracts/Factory.algo.ts:70","pc":[360,361]},{"teal":327,"source":"contracts/Factory.algo.ts:71","pc":[362,363]},{"teal":328,"source":"contracts/Factory.algo.ts:71","pc":[364,365]},{"teal":332,"source":"contracts/Factory.algo.ts:72","pc":[366,367]},{"teal":333,"source":"contracts/Factory.algo.ts:72","pc":[368]},{"teal":334,"source":"contracts/Factory.algo.ts:72","pc":[369,370]},{"teal":335,"source":"contracts/Factory.algo.ts:72","pc":[371,372]},{"teal":336,"source":"contracts/Factory.algo.ts:72","pc":[373,374]},{"teal":337,"source":"contracts/Factory.algo.ts:72","pc":[375]},{"teal":338,"source":"contracts/Factory.algo.ts:72","pc":[376,377]},{"teal":339,"source":"contracts/Factory.algo.ts:72","pc":[378,379]},{"teal":340,"source":"contracts/Factory.algo.ts:72","pc":[380,381]},{"teal":341,"source":"contracts/Factory.algo.ts:72","pc":[382,383]},{"teal":344,"source":"contracts/Factory.algo.ts:70","pc":[384]},{"teal":345,"source":"contracts/Factory.algo.ts:70","pc":[385,386]},{"teal":348,"source":"contracts/Factory.algo.ts:70","pc":[387]},{"teal":349,"source":"contracts/Factory.algo.ts:69","pc":[388]},{"teal":354,"source":"contracts/Factory.algo.ts:80","pc":[389,390,391]},{"teal":355,"source":"contracts/Factory.algo.ts:80","pc":[392]},{"teal":358,"source":"contracts/Factory.algo.ts:80","pc":[393,394,395]},{"teal":359,"source":"contracts/Factory.algo.ts:80","pc":[396]},{"teal":360,"source":"contracts/Factory.algo.ts:80","pc":[397]},{"teal":367,"source":"contracts/Factory.algo.ts:80","pc":[398,399,400]},{"teal":374,"source":"contracts/Factory.algo.ts:81","pc":[401]},{"teal":375,"source":"contracts/Factory.algo.ts:81","pc":[402]},{"teal":376,"source":"contracts/Factory.algo.ts:81","pc":[403,404]},{"teal":377,"source":"contracts/Factory.algo.ts:81","pc":[405,406,407,408,409,410]},{"teal":378,"source":"contracts/Factory.algo.ts:81","pc":[411,412]},{"teal":382,"source":"contracts/Factory.algo.ts:82","pc":[413,414]},{"teal":383,"source":"contracts/Factory.algo.ts:82","pc":[415,416]},{"teal":387,"source":"contracts/Factory.algo.ts:83","pc":[417,418]},{"teal":388,"source":"contracts/Factory.algo.ts:83","pc":[419,420]},{"teal":391,"source":"contracts/Factory.algo.ts:81","pc":[421]},{"teal":392,"source":"contracts/Factory.algo.ts:81","pc":[422,423]},{"teal":395,"source":"contracts/Factory.algo.ts:81","pc":[424]},{"teal":396,"source":"contracts/Factory.algo.ts:81","pc":[425,426]},{"teal":397,"source":"contracts/Factory.algo.ts:81","pc":[427]},{"teal":398,"source":"contracts/Factory.algo.ts:81","pc":[428]},{"teal":399,"source":"contracts/Factory.algo.ts:81","pc":[429,430]},{"teal":400,"source":"contracts/Factory.algo.ts:81","pc":[431,432,433]},{"teal":401,"source":"contracts/Factory.algo.ts:81","pc":[434]},{"teal":402,"source":"contracts/Factory.algo.ts:80","pc":[435]},{"teal":407,"source":"contracts/Factory.algo.ts:87","pc":[436,437]},{"teal":408,"source":"contracts/Factory.algo.ts:87","pc":[438]},{"teal":409,"source":"contracts/Factory.algo.ts:87","pc":[439]},{"teal":410,"source":"contracts/Factory.algo.ts:87","pc":[440]},{"teal":411,"source":"contracts/Factory.algo.ts:87","pc":[441,442]},{"teal":412,"source":"contracts/Factory.algo.ts:87","pc":[443,444]},{"teal":413,"source":"contracts/Factory.algo.ts:87","pc":[445]},{"teal":416,"source":"contracts/Factory.algo.ts:87","errorMessage":"argument 0 (transferTxn) for burnLiquidity must be a axfer transaction","pc":[446]},{"teal":419,"source":"contracts/Factory.algo.ts:87","pc":[447,448,449]},{"teal":420,"source":"contracts/Factory.algo.ts:87","pc":[450]},{"teal":423,"source":"contracts/Factory.algo.ts:87","pc":[451,452,453]},{"teal":424,"source":"contracts/Factory.algo.ts:87","pc":[454]},{"teal":425,"source":"contracts/Factory.algo.ts:87","pc":[455]},{"teal":429,"source":"contracts/Factory.algo.ts:87","pc":[456,457,458]},{"teal":436,"source":"contracts/Factory.algo.ts:88","pc":[459]},{"teal":437,"source":"contracts/Factory.algo.ts:88","pc":[460]},{"teal":438,"source":"contracts/Factory.algo.ts:88","pc":[461,462]},{"teal":439,"source":"contracts/Factory.algo.ts:88","pc":[463,464,465,466,467,468]},{"teal":440,"source":"contracts/Factory.algo.ts:88","pc":[469,470]},{"teal":444,"source":"contracts/Factory.algo.ts:89","pc":[471,472]},{"teal":445,"source":"contracts/Factory.algo.ts:89","pc":[473,474]},{"teal":449,"source":"contracts/Factory.algo.ts:90","pc":[475,476]},{"teal":450,"source":"contracts/Factory.algo.ts:90","pc":[477,478]},{"teal":451,"source":"contracts/Factory.algo.ts:90","pc":[479,480]},{"teal":452,"source":"contracts/Factory.algo.ts:90","pc":[481,482]},{"teal":453,"source":"contracts/Factory.algo.ts:90","pc":[483]},{"teal":454,"source":"contracts/Factory.algo.ts:90","pc":[484,485]},{"teal":457,"source":"contracts/Factory.algo.ts:88","pc":[486]},{"teal":458,"source":"contracts/Factory.algo.ts:88","pc":[487,488]},{"teal":461,"source":"contracts/Factory.algo.ts:88","pc":[489]},{"teal":462,"source":"contracts/Factory.algo.ts:87","pc":[490]},{"teal":467,"source":"contracts/Factory.algo.ts:94","pc":[491,492]},{"teal":470,"source":"contracts/Factory.algo.ts:94","pc":[493,494]},{"teal":471,"source":"contracts/Factory.algo.ts:94","pc":[495]},{"teal":472,"source":"contracts/Factory.algo.ts:94","pc":[496]},{"teal":473,"source":"contracts/Factory.algo.ts:94","pc":[497]},{"teal":474,"source":"contracts/Factory.algo.ts:94","pc":[498,499]},{"teal":475,"source":"contracts/Factory.algo.ts:94","pc":[500,501]},{"teal":476,"source":"contracts/Factory.algo.ts:94","pc":[502]},{"teal":479,"source":"contracts/Factory.algo.ts:94","errorMessage":"argument 0 (transferTxn) for swap must be a axfer transaction","pc":[503]},{"teal":482,"source":"contracts/Factory.algo.ts:94","pc":[504,505,506]},{"teal":483,"source":"contracts/Factory.algo.ts:94","pc":[507]},{"teal":486,"source":"contracts/Factory.algo.ts:94","pc":[508,509,510]},{"teal":487,"source":"contracts/Factory.algo.ts:94","pc":[511]},{"teal":490,"source":"contracts/Factory.algo.ts:94","pc":[512,513,514]},{"teal":491,"source":"contracts/Factory.algo.ts:94","pc":[515]},{"teal":494,"source":"contracts/Factory.algo.ts:94","pc":[516,517,518]},{"teal":495,"source":"contracts/Factory.algo.ts:94","pc":[519]},{"teal":496,"source":"contracts/Factory.algo.ts:94","pc":[520]},{"teal":497,"source":"contracts/Factory.algo.ts:94","pc":[521]},{"teal":498,"source":"contracts/Factory.algo.ts:94","pc":[522]},{"teal":499,"source":"contracts/Factory.algo.ts:94","pc":[523]},{"teal":503,"source":"contracts/Factory.algo.ts:94","pc":[524,525,526]},{"teal":510,"source":"contracts/Factory.algo.ts:95","pc":[527]},{"teal":511,"source":"contracts/Factory.algo.ts:95","pc":[528]},{"teal":512,"source":"contracts/Factory.algo.ts:95","pc":[529,530]},{"teal":513,"source":"contracts/Factory.algo.ts:95","pc":[531,532,533,534,535,536]},{"teal":514,"source":"contracts/Factory.algo.ts:95","pc":[537,538]},{"teal":518,"source":"contracts/Factory.algo.ts:96","pc":[539,540]},{"teal":519,"source":"contracts/Factory.algo.ts:96","pc":[541,542]},{"teal":523,"source":"contracts/Factory.algo.ts:97","pc":[543,544]},{"teal":524,"source":"contracts/Factory.algo.ts:97","pc":[545,546]},{"teal":525,"source":"contracts/Factory.algo.ts:97","pc":[547,548]},{"teal":526,"source":"contracts/Factory.algo.ts:97","pc":[549]},{"teal":527,"source":"contracts/Factory.algo.ts:97","pc":[550,551]},{"teal":528,"source":"contracts/Factory.algo.ts:97","pc":[552,553]},{"teal":529,"source":"contracts/Factory.algo.ts:97","pc":[554]},{"teal":530,"source":"contracts/Factory.algo.ts:97","pc":[555,556]},{"teal":531,"source":"contracts/Factory.algo.ts:97","pc":[557,558]},{"teal":532,"source":"contracts/Factory.algo.ts:97","pc":[559,560]},{"teal":533,"source":"contracts/Factory.algo.ts:97","pc":[561]},{"teal":534,"source":"contracts/Factory.algo.ts:97","pc":[562,563]},{"teal":537,"source":"contracts/Factory.algo.ts:95","pc":[564]},{"teal":538,"source":"contracts/Factory.algo.ts:95","pc":[565,566]},{"teal":541,"source":"contracts/Factory.algo.ts:95","pc":[567]},{"teal":542,"source":"contracts/Factory.algo.ts:95","pc":[568,569]},{"teal":543,"source":"contracts/Factory.algo.ts:95","pc":[570]},{"teal":544,"source":"contracts/Factory.algo.ts:95","pc":[571]},{"teal":545,"source":"contracts/Factory.algo.ts:95","pc":[572,573]},{"teal":546,"source":"contracts/Factory.algo.ts:95","pc":[574,575,576]},{"teal":547,"source":"contracts/Factory.algo.ts:95","pc":[577]},{"teal":548,"source":"contracts/Factory.algo.ts:94","pc":[578]},{"teal":553,"source":"contracts/Factory.algo.ts:101","pc":[579,580,581]},{"teal":554,"source":"contracts/Factory.algo.ts:101","pc":[582]},{"teal":555,"source":"contracts/Factory.algo.ts:101","pc":[583]},{"teal":559,"source":"contracts/Factory.algo.ts:101","pc":[584,585,586]},{"teal":560,"source":"contracts/Factory.algo.ts:101","pc":[587]},{"teal":565,"source":"contracts/Factory.algo.ts:107","pc":[588,589,590]},{"teal":566,"source":"contracts/Factory.algo.ts:107","pc":[591]},{"teal":569,"source":"contracts/Factory.algo.ts:107","pc":[592,593,594]},{"teal":570,"source":"contracts/Factory.algo.ts:107","pc":[595]},{"teal":571,"source":"contracts/Factory.algo.ts:107","pc":[596]},{"teal":579,"source":"contracts/Factory.algo.ts:107","pc":[597,598,599]},{"teal":583,"source":"contracts/Factory.algo.ts:108","pc":[600,601,602]},{"teal":588,"source":"contracts/Factory.algo.ts:110","pc":[603]},{"teal":589,"source":"contracts/Factory.algo.ts:110","pc":[604]},{"teal":590,"source":"contracts/Factory.algo.ts:110","pc":[605]},{"teal":591,"source":"contracts/Factory.algo.ts:110","pc":[606]},{"teal":592,"source":"contracts/Factory.algo.ts:110","pc":[607,608,609]},{"teal":597,"source":"contracts/Factory.algo.ts:111","pc":[610]},{"teal":598,"source":"contracts/Factory.algo.ts:111","pc":[611,612]},{"teal":599,"source":"contracts/Factory.algo.ts:111","pc":[613]},{"teal":600,"source":"contracts/Factory.algo.ts:110","pc":[614,615,616]},{"teal":605,"source":"contracts/Factory.algo.ts:113","pc":[617]},{"teal":606,"source":"contracts/Factory.algo.ts:113","pc":[618,619]},{"teal":607,"source":"contracts/Factory.algo.ts:113","pc":[620]},{"teal":608,"source":"contracts/Factory.algo.ts:113","pc":[621]},{"teal":611,"source":"contracts/Factory.algo.ts:107","pc":[622]},{"teal":616,"source":"contracts/Factory.algo.ts:117","pc":[623,624,625]},{"teal":617,"source":"contracts/Factory.algo.ts:117","pc":[626,627,628]},{"teal":620,"source":"contracts/Factory.algo.ts:117","pc":[629,630,631]},{"teal":621,"source":"contracts/Factory.algo.ts:117","pc":[632]},{"teal":624,"source":"contracts/Factory.algo.ts:117","pc":[633,634,635]},{"teal":625,"source":"contracts/Factory.algo.ts:117","pc":[636]},{"teal":626,"source":"contracts/Factory.algo.ts:117","pc":[637]},{"teal":630,"source":"contracts/Factory.algo.ts:117","pc":[638,639,640]},{"teal":634,"source":"contracts/Factory.algo.ts:118","pc":[641,642,643]},{"teal":638,"source":"contracts/Factory.algo.ts:120","pc":[644]},{"teal":639,"source":"contracts/Factory.algo.ts:120","pc":[645,646]},{"teal":640,"source":"contracts/Factory.algo.ts:120","pc":[647,648]},{"teal":641,"source":"contracts/Factory.algo.ts:120","pc":[649]},{"teal":642,"source":"contracts/Factory.algo.ts:117","pc":[650]},{"teal":650,"source":"contracts/Factory.algo.ts:127","pc":[651,652,653]},{"teal":654,"source":"contracts/Factory.algo.ts:128","pc":[654,655]},{"teal":655,"source":"contracts/Factory.algo.ts:128","pc":[656]},{"teal":656,"source":"contracts/Factory.algo.ts:128","pc":[657]},{"teal":657,"source":"contracts/Factory.algo.ts:128","pc":[658]},{"teal":660,"source":"contracts/Factory.algo.ts:128","errorMessage":"only the manager can call this method","pc":[659]},{"teal":661,"source":"contracts/Factory.algo.ts:127","pc":[660]},{"teal":665,"source":"contracts/Factory.algo.ts:131","pc":[661,662,663]},{"teal":668,"source":"contracts/Factory.algo.ts:131","pc":[664]},{"teal":669,"source":"contracts/Factory.algo.ts:131","pc":[665]},{"teal":673,"source":"contracts/Factory.algo.ts:132","pc":[666]},{"teal":674,"source":"contracts/Factory.algo.ts:132","pc":[667,668]},{"teal":678,"source":"contracts/Factory.algo.ts:134","pc":[669]},{"teal":679,"source":"contracts/Factory.algo.ts:134","pc":[670,671]},{"teal":684,"source":"contracts/Factory.algo.ts:134","pc":[672,673]},{"teal":685,"source":"contracts/Factory.algo.ts:134","pc":[674,675]},{"teal":686,"source":"contracts/Factory.algo.ts:134","pc":[676]},{"teal":687,"source":"contracts/Factory.algo.ts:134","pc":[677]},{"teal":688,"source":"contracts/Factory.algo.ts:134","pc":[678]},{"teal":689,"source":"contracts/Factory.algo.ts:134","pc":[679]},{"teal":690,"source":"contracts/Factory.algo.ts:134","pc":[680,681,682]},{"teal":694,"source":"contracts/Factory.algo.ts:135","pc":[683,684]},{"teal":695,"source":"contracts/Factory.algo.ts:135","pc":[685,686]},{"teal":696,"source":"contracts/Factory.algo.ts:135","pc":[687,688]},{"teal":697,"source":"contracts/Factory.algo.ts:135","pc":[689]},{"teal":698,"source":"contracts/Factory.algo.ts:135","pc":[690,691]},{"teal":699,"source":"contracts/Factory.algo.ts:135","pc":[692]},{"teal":700,"source":"contracts/Factory.algo.ts:135","pc":[693]},{"teal":701,"source":"contracts/Factory.algo.ts:135","pc":[694]},{"teal":702,"source":"contracts/Factory.algo.ts:135","pc":[695,696]},{"teal":703,"source":"contracts/Factory.algo.ts:135","pc":[697]},{"teal":704,"source":"contracts/Factory.algo.ts:135","pc":[698]},{"teal":705,"source":"contracts/Factory.algo.ts:135","pc":[699]},{"teal":706,"source":"contracts/Factory.algo.ts:135","pc":[700]},{"teal":707,"source":"contracts/Factory.algo.ts:135","pc":[701]},{"teal":708,"source":"contracts/Factory.algo.ts:135","pc":[702]},{"teal":709,"source":"contracts/Factory.algo.ts:135","pc":[703,704]},{"teal":713,"source":"contracts/Factory.algo.ts:136","pc":[705,706]},{"teal":714,"source":"contracts/Factory.algo.ts:136","pc":[707,708]},{"teal":715,"source":"contracts/Factory.algo.ts:136","pc":[709,710]},{"teal":716,"source":"contracts/Factory.algo.ts:136","pc":[711]},{"teal":717,"source":"contracts/Factory.algo.ts:136","pc":[712,713]},{"teal":718,"source":"contracts/Factory.algo.ts:136","pc":[714]},{"teal":719,"source":"contracts/Factory.algo.ts:136","pc":[715]},{"teal":720,"source":"contracts/Factory.algo.ts:136","pc":[716]},{"teal":721,"source":"contracts/Factory.algo.ts:136","pc":[717,718]},{"teal":722,"source":"contracts/Factory.algo.ts:136","pc":[719]},{"teal":723,"source":"contracts/Factory.algo.ts:136","pc":[720]},{"teal":724,"source":"contracts/Factory.algo.ts:136","pc":[721]},{"teal":725,"source":"contracts/Factory.algo.ts:136","pc":[722]},{"teal":726,"source":"contracts/Factory.algo.ts:136","pc":[723]},{"teal":727,"source":"contracts/Factory.algo.ts:136","pc":[724]},{"teal":728,"source":"contracts/Factory.algo.ts:136","pc":[725,726]},{"teal":733,"source":"contracts/Factory.algo.ts:134","pc":[727,728]},{"teal":734,"source":"contracts/Factory.algo.ts:134","pc":[729]},{"teal":735,"source":"contracts/Factory.algo.ts:134","pc":[730]},{"teal":736,"source":"contracts/Factory.algo.ts:134","pc":[731,732]},{"teal":737,"source":"contracts/Factory.algo.ts:134","pc":[733,734,735]},{"teal":742,"source":"contracts/Factory.algo.ts:139","pc":[736,737]},{"teal":743,"source":"contracts/Factory.algo.ts:139","pc":[738]},{"teal":746,"source":"contracts/Factory.algo.ts:131","pc":[739,740]},{"teal":749,"source":"contracts/Factory.algo.ts:131","pc":[741,742]},{"teal":750,"source":"contracts/Factory.algo.ts:131","pc":[743]},{"teal":753,"source":"contracts/Factory.algo.ts:10","pc":[744,745]},{"teal":754,"source":"contracts/Factory.algo.ts:10","pc":[746,747,748]},{"teal":755,"source":"contracts/Factory.algo.ts:10","pc":[749,750]},{"teal":756,"source":"contracts/Factory.algo.ts:10","pc":[751,752,753]},{"teal":757,"source":"contracts/Factory.algo.ts:10","pc":[754,755,756,757]},{"teal":760,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[758]},{"teal":763,"source":"contracts/Factory.algo.ts:10","pc":[759,760,761,762,763,764]},{"teal":764,"source":"contracts/Factory.algo.ts:10","pc":[765,766,767,768,769,770]},{"teal":765,"source":"contracts/Factory.algo.ts:10","pc":[771,772,773,774,775,776]},{"teal":766,"source":"contracts/Factory.algo.ts:10","pc":[777,778,779,780,781,782]},{"teal":767,"source":"contracts/Factory.algo.ts:10","pc":[783,784,785,786,787,788]},{"teal":768,"source":"contracts/Factory.algo.ts:10","pc":[789,790,791,792,793,794]},{"teal":769,"source":"contracts/Factory.algo.ts:10","pc":[795,796,797,798,799,800]},{"teal":770,"source":"contracts/Factory.algo.ts:10","pc":[801,802,803,804,805,806]},{"teal":771,"source":"contracts/Factory.algo.ts:10","pc":[807,808,809,810,811,812]},{"teal":772,"source":"contracts/Factory.algo.ts:10","pc":[813,814,815]},{"teal":773,"source":"contracts/Factory.algo.ts:10","pc":[816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835]},{"teal":776,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[836]},{"teal":779,"source":"contracts/Factory.algo.ts:10","pc":[837,838,839]},{"teal":780,"source":"contracts/Factory.algo.ts:10","pc":[840,841]},{"teal":781,"source":"contracts/Factory.algo.ts:10","pc":[842,843]},{"teal":782,"source":"contracts/Factory.algo.ts:10","pc":[844]},{"teal":783,"source":"contracts/Factory.algo.ts:10","pc":[845,846]},{"teal":784,"source":"contracts/Factory.algo.ts:10","pc":[847,848]},{"teal":785,"source":"contracts/Factory.algo.ts:10","pc":[849]},{"teal":788,"source":"contracts/Factory.algo.ts:10","pc":[850,851,852]},{"teal":789,"source":"contracts/Factory.algo.ts:10","pc":[853,854]},{"teal":790,"source":"contracts/Factory.algo.ts:10","pc":[855,856]},{"teal":791,"source":"contracts/Factory.algo.ts:10","pc":[857]},{"teal":792,"source":"contracts/Factory.algo.ts:10","pc":[858,859]},{"teal":793,"source":"contracts/Factory.algo.ts:10","pc":[860,861]},{"teal":794,"source":"contracts/Factory.algo.ts:10","pc":[862]},{"teal":795,"source":"contracts/Factory.algo.ts:10","pc":[863]},{"teal":796,"source":"contracts/Factory.algo.ts:10","pc":[864,865]},{"teal":797,"source":"contracts/Factory.algo.ts:10","pc":[866]},{"teal":798,"source":"contracts/Factory.algo.ts:10","pc":[867]},{"teal":799,"source":"contracts/Factory.algo.ts:10","pc":[868]},{"teal":800,"source":"contracts/Factory.algo.ts:10","pc":[869,870,871]},{"teal":801,"source":"contracts/Factory.algo.ts:10","pc":[872,873]},{"teal":802,"source":"contracts/Factory.algo.ts:10","pc":[874,875]},{"teal":803,"source":"contracts/Factory.algo.ts:10","pc":[876]},{"teal":804,"source":"contracts/Factory.algo.ts:10","pc":[877]},{"teal":805,"source":"contracts/Factory.algo.ts:10","pc":[878,879]},{"teal":806,"source":"contracts/Factory.algo.ts:10","pc":[880,881]},{"teal":807,"source":"contracts/Factory.algo.ts:10","pc":[882,883]},{"teal":808,"source":"contracts/Factory.algo.ts:10","pc":[884,885]},{"teal":809,"source":"contracts/Factory.algo.ts:10","pc":[886]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQAIBgQCJgYAFXBvb2xfYXBwcm92YWxfcHJvZ3JhbQdtYW5hZ2VyBnBvb2xzXwS4RHs2BBUffHUxGBQlCzEZCI0MApoAAAAAAAAAAAAAAosAAAAAAAAAAAAAAIgAAiJDigAAKjYyAHIHSGeJiAACIkOKAACxJbIQI7IZKb5Esh6AAQqyHyEFsjQhBbI1gQOyOCcEshqBoI0GsgGziScFNhoDVwIANhoCVwIANhoBF4gABRZQsCJDigMBKIv9i/6IAdCMACuLAFC9TEgUQQA0K4sAUEm8SCgogAIADIv/FogCYIv+SRUkChZXBgJMUIgCXov9SRUkChZXBgJMUIgCT0hQv7ElshCABOY1/bWyGov/shiL/kkVJAoWVwYCTFCyGov9SRUkChZXBgJMULIaI7IBs7Q7IgnFOlcEABeMAIkxFiIJSTgQIQQSRDYaAhc2GgEXiAACIkOKAwCxJbIQgASr334VshqL/7IYi/4WshqL/TgSFrIai/04ALIaI7IBs4k2GgEXiAACIkOKAQCxJbIQgAQqdABPshqL/7IYMQCyGiOyAbO0OyIJxTpXBAAXiTEWIglJOBAhBBJENhoBF4gAAiJDigIAsSWyEIAEP7HQm7Iai/+yGDEAshqL/jgSFrIaI7IBs4knBTEWIglJOBAhBBJENhoDFzYaAhc2GgEXiAAFFlCwIkOKBAGxJbIQgASNMl4pshqL/7IYMQCyGov+FrIai/0WshqL/DgSFrIaI7IBs7Q7IgnFOlcEABeJiAACIkOKAACJNhoBF4gAAiJDigEAiAAwKb1MSEEABymL/9NCAAUpi/+5SIk2GgJXAgA2GgEXiAACIkOKAgCIAAcpi/+L/ruJigAAMQAqZBJEiYoCAShJKIwAI4wBiwGL/xUkCgxBADWLAIv/Nf8jiwEkCwg0/0wkWBcWUIwAiwCL/jX/I4sBJAsINP9MJFgXFlCMAIsBIgiMAUL/wIsAA4wARgGJMRtB/XEnBDYaAI4B/WgAgARCWI4JgASh6zAggAR5rSmIgASbwKxdgAT8YJuugASKN9VegASFTe3ggAQJnlz9gASktQPBNhoAjgn9K/1c/f/+Qf5w/qf+//8I/ysAigQDi/yL/1CL/Yv+iYoEA4v8i/5QjPyL/0kVi/4XCBZXBgKM/ov9TFCM/Yv8i/2L/ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Pool = {
  id: bigint,
  assets: bigint[],
  weights: bigint[]
}


/**
 * Converts the ABI tuple representation of a Pool to the struct representation
 */
export function PoolFromTuple(abiTuple: [bigint, bigint[], bigint[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Pool, APP_SPEC.structs) as Pool
}

/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,axfer)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      /**
       * the index
       */
      index: bigint | number
      /**
       * transfer tx of the token, receiver must be the pool account
       */
      transferTxn: AppMethodCallTransactionArgument
    }
    'getLiquidity(uint64)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
    }
    'burnLiquidity(uint64,axfer)void': {
      poolId: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'swap(uint64,uint64,uint64,axfer)uint64': {
      poolId: bigint | number
      from: bigint | number
      to: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'opUp()void': Record<string, never>
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,axfer)void': [poolId: bigint | number, index: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'getLiquidity(uint64)void': [poolId: bigint | number]
    'burnLiquidity(uint64,axfer)void': [poolId: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'swap(uint64,uint64,uint64,axfer)uint64': [poolId: bigint | number, from: bigint | number, to: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'opUp()void': []
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,axfer)void': void
  'getLiquidity(uint64)void': void
  'burnLiquidity(uint64,axfer)void': void
  'swap(uint64,uint64,uint64,axfer)uint64': bigint
  'opUp()void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer)void' | 'addLiquidity', {
      argsObj: FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']
      returns: FactoryReturns['addLiquidity(uint64,uint64,axfer)void']
    }>
    & Record<'getLiquidity(uint64)void' | 'getLiquidity', {
      argsObj: FactoryArgs['obj']['getLiquidity(uint64)void']
      argsTuple: FactoryArgs['tuple']['getLiquidity(uint64)void']
      returns: FactoryReturns['getLiquidity(uint64)void']
    }>
    & Record<'burnLiquidity(uint64,axfer)void' | 'burnLiquidity', {
      argsObj: FactoryArgs['obj']['burnLiquidity(uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']
      returns: FactoryReturns['burnLiquidity(uint64,axfer)void']
    }>
    & Record<'swap(uint64,uint64,uint64,axfer)uint64' | 'swap', {
      argsObj: FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64']
      argsTuple: FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']
      returns: FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64']
    }>
    & Record<'opUp()void' | 'opUp', {
      argsObj: FactoryArgs['obj']['opUp()void']
      argsTuple: FactoryArgs['tuple']['opUp()void']
      returns: FactoryReturns['opUp()void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {
        pools: Map<Uint8Array, Pool>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer)void ABI method
   *
   * Add one token as liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.index, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the getLiquidity(uint64)void ABI method
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLiquidity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the burnLiquidity(uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnLiquidity(uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,axfer)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,axfer)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.from, params.args.to, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the opUp()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opUp()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['addLiquidity(uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLiquidity: async (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getLiquidity(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnLiquidity: async (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.burnLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['burnLiquidity(uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['opUp()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Pool>> => { return (await this.appClient.state.box.getMap("pools")) as Map<Uint8Array, Pool> },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: Uint8Array): Promise<Pool | undefined> => { return await this.appClient.state.box.getMapValue("pools", key) as Pool | undefined },
      },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer)void method call against the Factory contract
       */
      addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLiquidity(uint64)void method call against the Factory contract
       */
      getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnLiquidity(uint64,axfer)void method call against the Factory contract
       */
      burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64,uint64,axfer)uint64 method call against the Factory contract
       */
      swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(uint64,uint64,uint64,axfer)uint64', v))
        return this
      },
      /**
       * Add a opUp()void method call against the Factory contract
       */
      opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer)void ABI method.
   *
   * Add one token as liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['addLiquidity(uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the getLiquidity(uint64)void ABI method.
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLiquidity(params?: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['getLiquidity(uint64)void'] | undefined]>

  /**
   * Calls the burnLiquidity(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLiquidity(params?: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['burnLiquidity(uint64,axfer)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64,uint64,axfer)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']>): FactoryComposer<[...TReturns, FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64'] | undefined]>

  /**
   * Calls the opUp()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']>): FactoryComposer<[...TReturns, FactoryReturns['opUp()void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

