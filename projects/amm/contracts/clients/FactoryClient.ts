/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Add one token as liquidity to the pool","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"index","type":"uint64","desc":"the index"},{"name":"transferTxn","type":"axfer","desc":"transfer tx of the token, receiver must be the pool account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getLiquidity","desc":"Compute the liquidity for the sender and send the LPs expected","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID\n uint64 - The LPs expected"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"burnLiquidity","args":[{"name":"poolID","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"poolID","type":"uint64"},{"name":"from","type":"uint64"},{"name":"to","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeWeights","args":[{"name":"poolID","type":"uint64"},{"name":"newWeights","type":"uint64[]"},{"name":"duration","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"opUp","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"*******************","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPool","readonly":true,"args":[{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"(uint64,uint64[],uint64[])","struct":"Pool"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Pool":[{"name":"id","type":"uint64"},{"name":"assets","type":"uint64[]"},{"name":"weights","type":"uint64[]"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{"pools":{"keyType":"byte[32]","valueType":"Pool","prefix":"pools_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:10","pc":[1,2,3,4,5,6,7,8]},{"teal":3,"source":"contracts/Factory.algo.ts:10","pc":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":15,"source":"contracts/Factory.algo.ts:10","pc":[59,60]},{"teal":16,"source":"contracts/Factory.algo.ts:10","pc":[61]},{"teal":17,"source":"contracts/Factory.algo.ts:10","pc":[62]},{"teal":18,"source":"contracts/Factory.algo.ts:10","pc":[63]},{"teal":19,"source":"contracts/Factory.algo.ts:10","pc":[64,65]},{"teal":20,"source":"contracts/Factory.algo.ts:10","pc":[66]},{"teal":21,"source":"contracts/Factory.algo.ts:10","pc":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92]},{"teal":25,"source":"contracts/Factory.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[93]},{"teal":30,"source":"contracts/Factory.algo.ts:20","pc":[94,95,96]},{"teal":31,"source":"contracts/Factory.algo.ts:20","pc":[97]},{"teal":32,"source":"contracts/Factory.algo.ts:20","pc":[98]},{"teal":38,"source":"contracts/Factory.algo.ts:20","pc":[99,100,101]},{"teal":42,"source":"contracts/Factory.algo.ts:22","pc":[102,103]},{"teal":43,"source":"contracts/Factory.algo.ts:22","pc":[104,105,106]},{"teal":44,"source":"contracts/Factory.algo.ts:22","pc":[107,108]},{"teal":45,"source":"contracts/Factory.algo.ts:22","pc":[109]},{"teal":46,"source":"contracts/Factory.algo.ts:22","pc":[110]},{"teal":47,"source":"contracts/Factory.algo.ts:20","pc":[111]},{"teal":52,"source":"contracts/Factory.algo.ts:29","pc":[112,113,114]},{"teal":53,"source":"contracts/Factory.algo.ts:29","pc":[115]},{"teal":54,"source":"contracts/Factory.algo.ts:29","pc":[116]},{"teal":61,"source":"contracts/Factory.algo.ts:29","pc":[117,118,119]},{"teal":74,"source":"contracts/Factory.algo.ts:30","pc":[120]},{"teal":75,"source":"contracts/Factory.algo.ts:30","pc":[121]},{"teal":76,"source":"contracts/Factory.algo.ts:30","pc":[122,123]},{"teal":80,"source":"contracts/Factory.algo.ts:31","pc":[124]},{"teal":81,"source":"contracts/Factory.algo.ts:31","pc":[125,126]},{"teal":85,"source":"contracts/Factory.algo.ts:32","pc":[127]},{"teal":86,"source":"contracts/Factory.algo.ts:32","pc":[128]},{"teal":89,"source":"contracts/Factory.algo.ts:32","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[129]},{"teal":90,"source":"contracts/Factory.algo.ts:32","pc":[130,131]},{"teal":94,"source":"contracts/Factory.algo.ts:33","pc":[132,133,134]},{"teal":95,"source":"contracts/Factory.algo.ts:33","pc":[135,136]},{"teal":99,"source":"contracts/Factory.algo.ts:34","pc":[137,138]},{"teal":100,"source":"contracts/Factory.algo.ts:34","pc":[139,140]},{"teal":104,"source":"contracts/Factory.algo.ts:35","pc":[141,142]},{"teal":105,"source":"contracts/Factory.algo.ts:35","pc":[143,144]},{"teal":109,"source":"contracts/Factory.algo.ts:36","pc":[145,146]},{"teal":110,"source":"contracts/Factory.algo.ts:36","pc":[147,148]},{"teal":114,"source":"contracts/Factory.algo.ts:37","pc":[149,150]},{"teal":115,"source":"contracts/Factory.algo.ts:37","pc":[151,152]},{"teal":119,"source":"contracts/Factory.algo.ts:38","pc":[153,154,155,156]},{"teal":120,"source":"contracts/Factory.algo.ts:38","pc":[157,158]},{"teal":123,"source":"contracts/Factory.algo.ts:30","pc":[159]},{"teal":124,"source":"contracts/Factory.algo.ts:29","pc":[160]},{"teal":129,"source":"contracts/Factory.algo.ts:48","pc":[161]},{"teal":132,"source":"contracts/Factory.algo.ts:48","pc":[162,163,164]},{"teal":133,"source":"contracts/Factory.algo.ts:48","pc":[165,166,167]},{"teal":136,"source":"contracts/Factory.algo.ts:48","pc":[168,169,170]},{"teal":137,"source":"contracts/Factory.algo.ts:48","pc":[171,172,173]},{"teal":140,"source":"contracts/Factory.algo.ts:48","pc":[174,175,176]},{"teal":141,"source":"contracts/Factory.algo.ts:48","pc":[177]},{"teal":144,"source":"contracts/Factory.algo.ts:48","pc":[178,179,180]},{"teal":145,"source":"contracts/Factory.algo.ts:48","pc":[181]},{"teal":146,"source":"contracts/Factory.algo.ts:48","pc":[182]},{"teal":147,"source":"contracts/Factory.algo.ts:48","pc":[183]},{"teal":148,"source":"contracts/Factory.algo.ts:48","pc":[184]},{"teal":149,"source":"contracts/Factory.algo.ts:48","pc":[185]},{"teal":158,"source":"contracts/Factory.algo.ts:48","pc":[186,187,188]},{"teal":161,"source":"contracts/Factory.algo.ts:48","pc":[189]},{"teal":165,"source":"contracts/Factory.algo.ts:50","pc":[190,191]},{"teal":166,"source":"contracts/Factory.algo.ts:50","pc":[192]},{"teal":167,"source":"contracts/Factory.algo.ts:50","pc":[193]},{"teal":168,"source":"contracts/Factory.algo.ts:50","pc":[194]},{"teal":169,"source":"contracts/Factory.algo.ts:50","pc":[195,196]},{"teal":170,"source":"contracts/Factory.algo.ts:50","pc":[197]},{"teal":173,"source":"contracts/Factory.algo.ts:50","errorMessage":"At least 2 tokens needed","pc":[198]},{"teal":177,"source":"contracts/Factory.algo.ts:51","pc":[199,200]},{"teal":178,"source":"contracts/Factory.algo.ts:51","pc":[201]},{"teal":179,"source":"contracts/Factory.algo.ts:51","pc":[202]},{"teal":180,"source":"contracts/Factory.algo.ts:51","pc":[203]},{"teal":181,"source":"contracts/Factory.algo.ts:51","pc":[204,205]},{"teal":182,"source":"contracts/Factory.algo.ts:51","pc":[206]},{"teal":183,"source":"contracts/Factory.algo.ts:51","pc":[207]},{"teal":184,"source":"contracts/Factory.algo.ts:51","pc":[208]},{"teal":185,"source":"contracts/Factory.algo.ts:51","pc":[209]},{"teal":188,"source":"contracts/Factory.algo.ts:51","errorMessage":"Weights and Assets length must be the same","pc":[210]},{"teal":192,"source":"contracts/Factory.algo.ts:53","pc":[211,212]},{"teal":193,"source":"contracts/Factory.algo.ts:53","pc":[213,214]},{"teal":194,"source":"contracts/Factory.algo.ts:53","pc":[215,216,217]},{"teal":195,"source":"contracts/Factory.algo.ts:53","pc":[218,219]},{"teal":199,"source":"contracts/Factory.algo.ts:55","pc":[220]},{"teal":200,"source":"contracts/Factory.algo.ts:55","pc":[221,222]},{"teal":201,"source":"contracts/Factory.algo.ts:55","pc":[223]},{"teal":202,"source":"contracts/Factory.algo.ts:55","pc":[224]},{"teal":203,"source":"contracts/Factory.algo.ts:55","pc":[225]},{"teal":204,"source":"contracts/Factory.algo.ts:55","pc":[226]},{"teal":205,"source":"contracts/Factory.algo.ts:55","pc":[227]},{"teal":208,"source":"contracts/Factory.algo.ts:55","errorMessage":"This pool already exists","pc":[228]},{"teal":212,"source":"contracts/Factory.algo.ts:57","pc":[229]},{"teal":213,"source":"contracts/Factory.algo.ts:57","pc":[230,231]},{"teal":214,"source":"contracts/Factory.algo.ts:57","pc":[232]},{"teal":215,"source":"contracts/Factory.algo.ts:57","pc":[233]},{"teal":216,"source":"contracts/Factory.algo.ts:57","pc":[234]},{"teal":217,"source":"contracts/Factory.algo.ts:57","pc":[235]},{"teal":218,"source":"contracts/Factory.algo.ts:57","pc":[236]},{"teal":219,"source":"contracts/Factory.algo.ts:57","pc":[237]},{"teal":220,"source":"contracts/Factory.algo.ts:57","pc":[238,239,240,241]},{"teal":221,"source":"contracts/Factory.algo.ts:57","pc":[242,243]},{"teal":222,"source":"contracts/Factory.algo.ts:57","pc":[244]},{"teal":223,"source":"contracts/Factory.algo.ts:57","pc":[245,246,247]},{"teal":224,"source":"contracts/Factory.algo.ts:57","pc":[248,249]},{"teal":225,"source":"contracts/Factory.algo.ts:57","pc":[250]},{"teal":226,"source":"contracts/Factory.algo.ts:57","pc":[251]},{"teal":227,"source":"contracts/Factory.algo.ts:57","pc":[252]},{"teal":228,"source":"contracts/Factory.algo.ts:57","pc":[253]},{"teal":229,"source":"contracts/Factory.algo.ts:57","pc":[254]},{"teal":230,"source":"contracts/Factory.algo.ts:57","pc":[255,256,257]},{"teal":231,"source":"contracts/Factory.algo.ts:57","pc":[258]},{"teal":232,"source":"contracts/Factory.algo.ts:57","pc":[259]},{"teal":233,"source":"contracts/Factory.algo.ts:57","pc":[260,261,262]},{"teal":234,"source":"contracts/Factory.algo.ts:57","pc":[263,264]},{"teal":235,"source":"contracts/Factory.algo.ts:57","pc":[265]},{"teal":236,"source":"contracts/Factory.algo.ts:57","pc":[266]},{"teal":237,"source":"contracts/Factory.algo.ts:57","pc":[267]},{"teal":238,"source":"contracts/Factory.algo.ts:57","pc":[268]},{"teal":239,"source":"contracts/Factory.algo.ts:57","pc":[269]},{"teal":240,"source":"contracts/Factory.algo.ts:57","pc":[270,271,272]},{"teal":241,"source":"contracts/Factory.algo.ts:57","pc":[273]},{"teal":242,"source":"contracts/Factory.algo.ts:57","pc":[274]},{"teal":243,"source":"contracts/Factory.algo.ts:57","pc":[275,276,277]},{"teal":244,"source":"contracts/Factory.algo.ts:57","pc":[278]},{"teal":245,"source":"contracts/Factory.algo.ts:57","pc":[279]},{"teal":246,"source":"contracts/Factory.algo.ts:57","pc":[280]},{"teal":253,"source":"contracts/Factory.algo.ts:59","pc":[281]},{"teal":254,"source":"contracts/Factory.algo.ts:59","pc":[282]},{"teal":255,"source":"contracts/Factory.algo.ts:59","pc":[283,284]},{"teal":256,"source":"contracts/Factory.algo.ts:59","pc":[285,286,287,288,289,290]},{"teal":257,"source":"contracts/Factory.algo.ts:59","pc":[291,292]},{"teal":261,"source":"contracts/Factory.algo.ts:60","pc":[293,294]},{"teal":262,"source":"contracts/Factory.algo.ts:60","pc":[295,296]},{"teal":266,"source":"contracts/Factory.algo.ts:61","pc":[297,298]},{"teal":267,"source":"contracts/Factory.algo.ts:61","pc":[299]},{"teal":268,"source":"contracts/Factory.algo.ts:61","pc":[300]},{"teal":269,"source":"contracts/Factory.algo.ts:61","pc":[301]},{"teal":270,"source":"contracts/Factory.algo.ts:61","pc":[302]},{"teal":271,"source":"contracts/Factory.algo.ts:61","pc":[303]},{"teal":272,"source":"contracts/Factory.algo.ts:61","pc":[304,305,306]},{"teal":273,"source":"contracts/Factory.algo.ts:61","pc":[307]},{"teal":274,"source":"contracts/Factory.algo.ts:61","pc":[308]},{"teal":275,"source":"contracts/Factory.algo.ts:61","pc":[309,310]},{"teal":276,"source":"contracts/Factory.algo.ts:61","pc":[311,312]},{"teal":277,"source":"contracts/Factory.algo.ts:61","pc":[313]},{"teal":278,"source":"contracts/Factory.algo.ts:61","pc":[314]},{"teal":279,"source":"contracts/Factory.algo.ts:61","pc":[315]},{"teal":280,"source":"contracts/Factory.algo.ts:61","pc":[316]},{"teal":281,"source":"contracts/Factory.algo.ts:61","pc":[317]},{"teal":282,"source":"contracts/Factory.algo.ts:61","pc":[318,319,320]},{"teal":283,"source":"contracts/Factory.algo.ts:61","pc":[321]},{"teal":284,"source":"contracts/Factory.algo.ts:61","pc":[322]},{"teal":285,"source":"contracts/Factory.algo.ts:61","pc":[323,324]},{"teal":288,"source":"contracts/Factory.algo.ts:59","pc":[325]},{"teal":289,"source":"contracts/Factory.algo.ts:59","pc":[326,327]},{"teal":292,"source":"contracts/Factory.algo.ts:59","pc":[328]},{"teal":293,"source":"contracts/Factory.algo.ts:59","pc":[329,330]},{"teal":294,"source":"contracts/Factory.algo.ts:59","pc":[331]},{"teal":295,"source":"contracts/Factory.algo.ts:59","pc":[332]},{"teal":296,"source":"contracts/Factory.algo.ts:59","pc":[333,334]},{"teal":297,"source":"contracts/Factory.algo.ts:59","pc":[335,336,337]},{"teal":298,"source":"contracts/Factory.algo.ts:59","pc":[338]},{"teal":301,"source":"contracts/Factory.algo.ts:48","pc":[339,340]},{"teal":302,"source":"contracts/Factory.algo.ts:48","pc":[341]},{"teal":307,"source":"contracts/Factory.algo.ts:71","pc":[342,343]},{"teal":308,"source":"contracts/Factory.algo.ts:71","pc":[344]},{"teal":309,"source":"contracts/Factory.algo.ts:71","pc":[345]},{"teal":310,"source":"contracts/Factory.algo.ts:71","pc":[346]},{"teal":311,"source":"contracts/Factory.algo.ts:71","pc":[347,348]},{"teal":312,"source":"contracts/Factory.algo.ts:71","pc":[349,350]},{"teal":313,"source":"contracts/Factory.algo.ts:71","pc":[351]},{"teal":316,"source":"contracts/Factory.algo.ts:71","errorMessage":"argument 0 (transferTxn) for addLiquidity must be a axfer transaction","pc":[352]},{"teal":319,"source":"contracts/Factory.algo.ts:71","pc":[353,354,355]},{"teal":320,"source":"contracts/Factory.algo.ts:71","pc":[356]},{"teal":323,"source":"contracts/Factory.algo.ts:71","pc":[357,358,359]},{"teal":324,"source":"contracts/Factory.algo.ts:71","pc":[360]},{"teal":327,"source":"contracts/Factory.algo.ts:71","pc":[361,362,363]},{"teal":328,"source":"contracts/Factory.algo.ts:71","pc":[364]},{"teal":329,"source":"contracts/Factory.algo.ts:71","pc":[365]},{"teal":338,"source":"contracts/Factory.algo.ts:71","pc":[366,367,368]},{"teal":345,"source":"contracts/Factory.algo.ts:72","pc":[369]},{"teal":346,"source":"contracts/Factory.algo.ts:72","pc":[370]},{"teal":347,"source":"contracts/Factory.algo.ts:72","pc":[371,372]},{"teal":348,"source":"contracts/Factory.algo.ts:72","pc":[373,374,375,376,377,378]},{"teal":349,"source":"contracts/Factory.algo.ts:72","pc":[379,380]},{"teal":353,"source":"contracts/Factory.algo.ts:73","pc":[381,382]},{"teal":354,"source":"contracts/Factory.algo.ts:73","pc":[383,384]},{"teal":358,"source":"contracts/Factory.algo.ts:74","pc":[385,386]},{"teal":359,"source":"contracts/Factory.algo.ts:74","pc":[387]},{"teal":360,"source":"contracts/Factory.algo.ts:74","pc":[388,389]},{"teal":361,"source":"contracts/Factory.algo.ts:74","pc":[390,391]},{"teal":362,"source":"contracts/Factory.algo.ts:74","pc":[392,393]},{"teal":363,"source":"contracts/Factory.algo.ts:74","pc":[394]},{"teal":364,"source":"contracts/Factory.algo.ts:74","pc":[395,396]},{"teal":365,"source":"contracts/Factory.algo.ts:74","pc":[397,398]},{"teal":366,"source":"contracts/Factory.algo.ts:74","pc":[399,400]},{"teal":367,"source":"contracts/Factory.algo.ts:74","pc":[401,402]},{"teal":370,"source":"contracts/Factory.algo.ts:72","pc":[403]},{"teal":371,"source":"contracts/Factory.algo.ts:72","pc":[404,405]},{"teal":374,"source":"contracts/Factory.algo.ts:72","pc":[406]},{"teal":375,"source":"contracts/Factory.algo.ts:71","pc":[407]},{"teal":380,"source":"contracts/Factory.algo.ts:83","pc":[408]},{"teal":383,"source":"contracts/Factory.algo.ts:83","pc":[409,410,411]},{"teal":384,"source":"contracts/Factory.algo.ts:83","pc":[412]},{"teal":387,"source":"contracts/Factory.algo.ts:83","pc":[413,414,415]},{"teal":388,"source":"contracts/Factory.algo.ts:83","pc":[416]},{"teal":389,"source":"contracts/Factory.algo.ts:83","pc":[417]},{"teal":390,"source":"contracts/Factory.algo.ts:83","pc":[418]},{"teal":391,"source":"contracts/Factory.algo.ts:83","pc":[419]},{"teal":392,"source":"contracts/Factory.algo.ts:83","pc":[420]},{"teal":400,"source":"contracts/Factory.algo.ts:83","pc":[421,422,423]},{"teal":407,"source":"contracts/Factory.algo.ts:84","pc":[424]},{"teal":408,"source":"contracts/Factory.algo.ts:84","pc":[425]},{"teal":409,"source":"contracts/Factory.algo.ts:84","pc":[426,427]},{"teal":410,"source":"contracts/Factory.algo.ts:84","pc":[428,429,430,431,432,433]},{"teal":411,"source":"contracts/Factory.algo.ts:84","pc":[434,435]},{"teal":415,"source":"contracts/Factory.algo.ts:85","pc":[436,437]},{"teal":416,"source":"contracts/Factory.algo.ts:85","pc":[438,439]},{"teal":420,"source":"contracts/Factory.algo.ts:86","pc":[440,441]},{"teal":421,"source":"contracts/Factory.algo.ts:86","pc":[442,443]},{"teal":424,"source":"contracts/Factory.algo.ts:84","pc":[444]},{"teal":425,"source":"contracts/Factory.algo.ts:84","pc":[445,446]},{"teal":428,"source":"contracts/Factory.algo.ts:84","pc":[447]},{"teal":429,"source":"contracts/Factory.algo.ts:84","pc":[448,449]},{"teal":430,"source":"contracts/Factory.algo.ts:84","pc":[450]},{"teal":431,"source":"contracts/Factory.algo.ts:84","pc":[451]},{"teal":432,"source":"contracts/Factory.algo.ts:84","pc":[452,453]},{"teal":433,"source":"contracts/Factory.algo.ts:84","pc":[454,455,456]},{"teal":434,"source":"contracts/Factory.algo.ts:84","pc":[457]},{"teal":435,"source":"contracts/Factory.algo.ts:83","pc":[458]},{"teal":440,"source":"contracts/Factory.algo.ts:90","pc":[459,460]},{"teal":441,"source":"contracts/Factory.algo.ts:90","pc":[461]},{"teal":442,"source":"contracts/Factory.algo.ts:90","pc":[462]},{"teal":443,"source":"contracts/Factory.algo.ts:90","pc":[463]},{"teal":444,"source":"contracts/Factory.algo.ts:90","pc":[464,465]},{"teal":445,"source":"contracts/Factory.algo.ts:90","pc":[466,467]},{"teal":446,"source":"contracts/Factory.algo.ts:90","pc":[468]},{"teal":449,"source":"contracts/Factory.algo.ts:90","errorMessage":"argument 0 (transferTxn) for burnLiquidity must be a axfer transaction","pc":[469]},{"teal":452,"source":"contracts/Factory.algo.ts:90","pc":[470,471,472]},{"teal":453,"source":"contracts/Factory.algo.ts:90","pc":[473]},{"teal":456,"source":"contracts/Factory.algo.ts:90","pc":[474,475,476]},{"teal":457,"source":"contracts/Factory.algo.ts:90","pc":[477]},{"teal":458,"source":"contracts/Factory.algo.ts:90","pc":[478]},{"teal":462,"source":"contracts/Factory.algo.ts:90","pc":[479,480,481]},{"teal":469,"source":"contracts/Factory.algo.ts:91","pc":[482]},{"teal":470,"source":"contracts/Factory.algo.ts:91","pc":[483]},{"teal":471,"source":"contracts/Factory.algo.ts:91","pc":[484,485]},{"teal":472,"source":"contracts/Factory.algo.ts:91","pc":[486,487,488,489,490,491]},{"teal":473,"source":"contracts/Factory.algo.ts:91","pc":[492,493]},{"teal":477,"source":"contracts/Factory.algo.ts:92","pc":[494,495]},{"teal":478,"source":"contracts/Factory.algo.ts:92","pc":[496,497]},{"teal":482,"source":"contracts/Factory.algo.ts:93","pc":[498,499]},{"teal":483,"source":"contracts/Factory.algo.ts:93","pc":[500,501]},{"teal":484,"source":"contracts/Factory.algo.ts:93","pc":[502,503]},{"teal":485,"source":"contracts/Factory.algo.ts:93","pc":[504,505]},{"teal":486,"source":"contracts/Factory.algo.ts:93","pc":[506]},{"teal":487,"source":"contracts/Factory.algo.ts:93","pc":[507,508]},{"teal":490,"source":"contracts/Factory.algo.ts:91","pc":[509]},{"teal":491,"source":"contracts/Factory.algo.ts:91","pc":[510,511]},{"teal":494,"source":"contracts/Factory.algo.ts:91","pc":[512]},{"teal":495,"source":"contracts/Factory.algo.ts:90","pc":[513]},{"teal":500,"source":"contracts/Factory.algo.ts:97","pc":[514]},{"teal":503,"source":"contracts/Factory.algo.ts:97","pc":[515,516]},{"teal":504,"source":"contracts/Factory.algo.ts:97","pc":[517]},{"teal":505,"source":"contracts/Factory.algo.ts:97","pc":[518]},{"teal":506,"source":"contracts/Factory.algo.ts:97","pc":[519]},{"teal":507,"source":"contracts/Factory.algo.ts:97","pc":[520,521]},{"teal":508,"source":"contracts/Factory.algo.ts:97","pc":[522,523]},{"teal":509,"source":"contracts/Factory.algo.ts:97","pc":[524]},{"teal":512,"source":"contracts/Factory.algo.ts:97","errorMessage":"argument 0 (transferTxn) for swap must be a axfer transaction","pc":[525]},{"teal":515,"source":"contracts/Factory.algo.ts:97","pc":[526,527,528]},{"teal":516,"source":"contracts/Factory.algo.ts:97","pc":[529]},{"teal":519,"source":"contracts/Factory.algo.ts:97","pc":[530,531,532]},{"teal":520,"source":"contracts/Factory.algo.ts:97","pc":[533]},{"teal":523,"source":"contracts/Factory.algo.ts:97","pc":[534,535,536]},{"teal":524,"source":"contracts/Factory.algo.ts:97","pc":[537]},{"teal":527,"source":"contracts/Factory.algo.ts:97","pc":[538,539,540]},{"teal":528,"source":"contracts/Factory.algo.ts:97","pc":[541]},{"teal":529,"source":"contracts/Factory.algo.ts:97","pc":[542]},{"teal":530,"source":"contracts/Factory.algo.ts:97","pc":[543]},{"teal":531,"source":"contracts/Factory.algo.ts:97","pc":[544]},{"teal":532,"source":"contracts/Factory.algo.ts:97","pc":[545]},{"teal":536,"source":"contracts/Factory.algo.ts:97","pc":[546,547,548]},{"teal":543,"source":"contracts/Factory.algo.ts:98","pc":[549]},{"teal":544,"source":"contracts/Factory.algo.ts:98","pc":[550]},{"teal":545,"source":"contracts/Factory.algo.ts:98","pc":[551,552]},{"teal":546,"source":"contracts/Factory.algo.ts:98","pc":[553,554,555,556,557,558]},{"teal":547,"source":"contracts/Factory.algo.ts:98","pc":[559,560]},{"teal":551,"source":"contracts/Factory.algo.ts:99","pc":[561,562]},{"teal":552,"source":"contracts/Factory.algo.ts:99","pc":[563,564]},{"teal":556,"source":"contracts/Factory.algo.ts:100","pc":[565,566]},{"teal":557,"source":"contracts/Factory.algo.ts:100","pc":[567,568]},{"teal":558,"source":"contracts/Factory.algo.ts:100","pc":[569,570]},{"teal":559,"source":"contracts/Factory.algo.ts:100","pc":[571]},{"teal":560,"source":"contracts/Factory.algo.ts:100","pc":[572,573]},{"teal":561,"source":"contracts/Factory.algo.ts:100","pc":[574,575]},{"teal":562,"source":"contracts/Factory.algo.ts:100","pc":[576]},{"teal":563,"source":"contracts/Factory.algo.ts:100","pc":[577,578]},{"teal":564,"source":"contracts/Factory.algo.ts:100","pc":[579,580]},{"teal":565,"source":"contracts/Factory.algo.ts:100","pc":[581,582]},{"teal":566,"source":"contracts/Factory.algo.ts:100","pc":[583]},{"teal":567,"source":"contracts/Factory.algo.ts:100","pc":[584,585]},{"teal":570,"source":"contracts/Factory.algo.ts:98","pc":[586]},{"teal":571,"source":"contracts/Factory.algo.ts:98","pc":[587,588]},{"teal":574,"source":"contracts/Factory.algo.ts:98","pc":[589]},{"teal":575,"source":"contracts/Factory.algo.ts:98","pc":[590,591]},{"teal":576,"source":"contracts/Factory.algo.ts:98","pc":[592]},{"teal":577,"source":"contracts/Factory.algo.ts:98","pc":[593]},{"teal":578,"source":"contracts/Factory.algo.ts:98","pc":[594,595]},{"teal":579,"source":"contracts/Factory.algo.ts:98","pc":[596,597,598]},{"teal":580,"source":"contracts/Factory.algo.ts:98","pc":[599]},{"teal":581,"source":"contracts/Factory.algo.ts:97","pc":[600]},{"teal":586,"source":"contracts/Factory.algo.ts:104","pc":[601]},{"teal":589,"source":"contracts/Factory.algo.ts:104","pc":[602,603,604]},{"teal":590,"source":"contracts/Factory.algo.ts:104","pc":[605]},{"teal":593,"source":"contracts/Factory.algo.ts:104","pc":[606,607,608]},{"teal":594,"source":"contracts/Factory.algo.ts:104","pc":[609,610,611]},{"teal":597,"source":"contracts/Factory.algo.ts:104","pc":[612,613,614]},{"teal":598,"source":"contracts/Factory.algo.ts:104","pc":[615]},{"teal":601,"source":"contracts/Factory.algo.ts:104","pc":[616,617,618]},{"teal":602,"source":"contracts/Factory.algo.ts:104","pc":[619]},{"teal":603,"source":"contracts/Factory.algo.ts:104","pc":[620]},{"teal":604,"source":"contracts/Factory.algo.ts:104","pc":[621]},{"teal":605,"source":"contracts/Factory.algo.ts:104","pc":[622]},{"teal":606,"source":"contracts/Factory.algo.ts:104","pc":[623]},{"teal":610,"source":"contracts/Factory.algo.ts:104","pc":[624,625,626]},{"teal":617,"source":"contracts/Factory.algo.ts:105","pc":[627]},{"teal":618,"source":"contracts/Factory.algo.ts:105","pc":[628]},{"teal":619,"source":"contracts/Factory.algo.ts:105","pc":[629,630]},{"teal":620,"source":"contracts/Factory.algo.ts:105","pc":[631,632,633,634,635,636]},{"teal":621,"source":"contracts/Factory.algo.ts:105","pc":[637,638]},{"teal":625,"source":"contracts/Factory.algo.ts:106","pc":[639,640]},{"teal":626,"source":"contracts/Factory.algo.ts:106","pc":[641,642]},{"teal":630,"source":"contracts/Factory.algo.ts:107","pc":[643,644]},{"teal":631,"source":"contracts/Factory.algo.ts:107","pc":[645]},{"teal":632,"source":"contracts/Factory.algo.ts:107","pc":[646,647]},{"teal":633,"source":"contracts/Factory.algo.ts:107","pc":[648,649]},{"teal":634,"source":"contracts/Factory.algo.ts:107","pc":[650]},{"teal":635,"source":"contracts/Factory.algo.ts:107","pc":[651]},{"teal":636,"source":"contracts/Factory.algo.ts:107","pc":[652]},{"teal":637,"source":"contracts/Factory.algo.ts:107","pc":[653]},{"teal":638,"source":"contracts/Factory.algo.ts:107","pc":[654]},{"teal":639,"source":"contracts/Factory.algo.ts:107","pc":[655,656,657]},{"teal":640,"source":"contracts/Factory.algo.ts:107","pc":[658]},{"teal":641,"source":"contracts/Factory.algo.ts:107","pc":[659]},{"teal":642,"source":"contracts/Factory.algo.ts:107","pc":[660,661]},{"teal":645,"source":"contracts/Factory.algo.ts:105","pc":[662]},{"teal":646,"source":"contracts/Factory.algo.ts:105","pc":[663,664]},{"teal":649,"source":"contracts/Factory.algo.ts:105","pc":[665]},{"teal":650,"source":"contracts/Factory.algo.ts:105","pc":[666,667]},{"teal":651,"source":"contracts/Factory.algo.ts:105","pc":[668]},{"teal":652,"source":"contracts/Factory.algo.ts:105","pc":[669]},{"teal":653,"source":"contracts/Factory.algo.ts:105","pc":[670,671]},{"teal":654,"source":"contracts/Factory.algo.ts:105","pc":[672,673,674]},{"teal":655,"source":"contracts/Factory.algo.ts:105","pc":[675]},{"teal":656,"source":"contracts/Factory.algo.ts:104","pc":[676]},{"teal":661,"source":"contracts/Factory.algo.ts:111","pc":[677,678,679]},{"teal":662,"source":"contracts/Factory.algo.ts:111","pc":[680]},{"teal":663,"source":"contracts/Factory.algo.ts:111","pc":[681]},{"teal":667,"source":"contracts/Factory.algo.ts:111","pc":[682,683,684]},{"teal":668,"source":"contracts/Factory.algo.ts:111","pc":[685]},{"teal":673,"source":"contracts/Factory.algo.ts:117","pc":[686,687,688]},{"teal":674,"source":"contracts/Factory.algo.ts:117","pc":[689]},{"teal":677,"source":"contracts/Factory.algo.ts:117","pc":[690,691,692]},{"teal":678,"source":"contracts/Factory.algo.ts:117","pc":[693]},{"teal":679,"source":"contracts/Factory.algo.ts:117","pc":[694]},{"teal":687,"source":"contracts/Factory.algo.ts:117","pc":[695,696,697]},{"teal":691,"source":"contracts/Factory.algo.ts:118","pc":[698,699,700]},{"teal":696,"source":"contracts/Factory.algo.ts:120","pc":[701]},{"teal":697,"source":"contracts/Factory.algo.ts:120","pc":[702]},{"teal":698,"source":"contracts/Factory.algo.ts:120","pc":[703]},{"teal":699,"source":"contracts/Factory.algo.ts:120","pc":[704]},{"teal":700,"source":"contracts/Factory.algo.ts:120","pc":[705,706,707]},{"teal":705,"source":"contracts/Factory.algo.ts:121","pc":[708]},{"teal":706,"source":"contracts/Factory.algo.ts:121","pc":[709,710]},{"teal":707,"source":"contracts/Factory.algo.ts:121","pc":[711]},{"teal":708,"source":"contracts/Factory.algo.ts:120","pc":[712,713,714]},{"teal":713,"source":"contracts/Factory.algo.ts:123","pc":[715]},{"teal":714,"source":"contracts/Factory.algo.ts:123","pc":[716,717]},{"teal":715,"source":"contracts/Factory.algo.ts:123","pc":[718]},{"teal":716,"source":"contracts/Factory.algo.ts:123","pc":[719]},{"teal":719,"source":"contracts/Factory.algo.ts:117","pc":[720]},{"teal":724,"source":"contracts/Factory.algo.ts:127","pc":[721,722,723]},{"teal":725,"source":"contracts/Factory.algo.ts:127","pc":[724,725,726]},{"teal":728,"source":"contracts/Factory.algo.ts:127","pc":[727,728,729]},{"teal":729,"source":"contracts/Factory.algo.ts:127","pc":[730]},{"teal":732,"source":"contracts/Factory.algo.ts:127","pc":[731,732,733]},{"teal":733,"source":"contracts/Factory.algo.ts:127","pc":[734]},{"teal":734,"source":"contracts/Factory.algo.ts:127","pc":[735]},{"teal":738,"source":"contracts/Factory.algo.ts:127","pc":[736,737,738]},{"teal":742,"source":"contracts/Factory.algo.ts:128","pc":[739,740,741]},{"teal":746,"source":"contracts/Factory.algo.ts:130","pc":[742]},{"teal":747,"source":"contracts/Factory.algo.ts:130","pc":[743,744]},{"teal":748,"source":"contracts/Factory.algo.ts:130","pc":[745,746]},{"teal":749,"source":"contracts/Factory.algo.ts:130","pc":[747]},{"teal":750,"source":"contracts/Factory.algo.ts:127","pc":[748]},{"teal":758,"source":"contracts/Factory.algo.ts:137","pc":[749,750,751]},{"teal":762,"source":"contracts/Factory.algo.ts:138","pc":[752,753]},{"teal":763,"source":"contracts/Factory.algo.ts:138","pc":[754,755]},{"teal":764,"source":"contracts/Factory.algo.ts:138","pc":[756]},{"teal":765,"source":"contracts/Factory.algo.ts:138","pc":[757]},{"teal":768,"source":"contracts/Factory.algo.ts:138","errorMessage":"only the manager can call this method","pc":[758]},{"teal":769,"source":"contracts/Factory.algo.ts:137","pc":[759]},{"teal":773,"source":"contracts/Factory.algo.ts:141","pc":[760,761,762]},{"teal":776,"source":"contracts/Factory.algo.ts:141","pc":[763]},{"teal":777,"source":"contracts/Factory.algo.ts:141","pc":[764]},{"teal":781,"source":"contracts/Factory.algo.ts:142","pc":[765]},{"teal":782,"source":"contracts/Factory.algo.ts:142","pc":[766,767]},{"teal":786,"source":"contracts/Factory.algo.ts:144","pc":[768]},{"teal":787,"source":"contracts/Factory.algo.ts:144","pc":[769,770]},{"teal":792,"source":"contracts/Factory.algo.ts:144","pc":[771,772]},{"teal":793,"source":"contracts/Factory.algo.ts:144","pc":[773,774]},{"teal":794,"source":"contracts/Factory.algo.ts:144","pc":[775]},{"teal":795,"source":"contracts/Factory.algo.ts:144","pc":[776]},{"teal":796,"source":"contracts/Factory.algo.ts:144","pc":[777]},{"teal":797,"source":"contracts/Factory.algo.ts:144","pc":[778]},{"teal":798,"source":"contracts/Factory.algo.ts:144","pc":[779,780,781]},{"teal":802,"source":"contracts/Factory.algo.ts:145","pc":[782,783]},{"teal":803,"source":"contracts/Factory.algo.ts:145","pc":[784,785]},{"teal":804,"source":"contracts/Factory.algo.ts:145","pc":[786,787]},{"teal":805,"source":"contracts/Factory.algo.ts:145","pc":[788]},{"teal":806,"source":"contracts/Factory.algo.ts:145","pc":[789,790]},{"teal":807,"source":"contracts/Factory.algo.ts:145","pc":[791]},{"teal":808,"source":"contracts/Factory.algo.ts:145","pc":[792]},{"teal":809,"source":"contracts/Factory.algo.ts:145","pc":[793]},{"teal":810,"source":"contracts/Factory.algo.ts:145","pc":[794,795]},{"teal":811,"source":"contracts/Factory.algo.ts:145","pc":[796]},{"teal":812,"source":"contracts/Factory.algo.ts:145","pc":[797]},{"teal":813,"source":"contracts/Factory.algo.ts:145","pc":[798]},{"teal":814,"source":"contracts/Factory.algo.ts:145","pc":[799]},{"teal":815,"source":"contracts/Factory.algo.ts:145","pc":[800]},{"teal":816,"source":"contracts/Factory.algo.ts:145","pc":[801]},{"teal":817,"source":"contracts/Factory.algo.ts:145","pc":[802,803]},{"teal":821,"source":"contracts/Factory.algo.ts:146","pc":[804,805]},{"teal":822,"source":"contracts/Factory.algo.ts:146","pc":[806,807]},{"teal":823,"source":"contracts/Factory.algo.ts:146","pc":[808,809]},{"teal":824,"source":"contracts/Factory.algo.ts:146","pc":[810]},{"teal":825,"source":"contracts/Factory.algo.ts:146","pc":[811,812]},{"teal":826,"source":"contracts/Factory.algo.ts:146","pc":[813]},{"teal":827,"source":"contracts/Factory.algo.ts:146","pc":[814]},{"teal":828,"source":"contracts/Factory.algo.ts:146","pc":[815]},{"teal":829,"source":"contracts/Factory.algo.ts:146","pc":[816,817]},{"teal":830,"source":"contracts/Factory.algo.ts:146","pc":[818]},{"teal":831,"source":"contracts/Factory.algo.ts:146","pc":[819]},{"teal":832,"source":"contracts/Factory.algo.ts:146","pc":[820]},{"teal":833,"source":"contracts/Factory.algo.ts:146","pc":[821]},{"teal":834,"source":"contracts/Factory.algo.ts:146","pc":[822]},{"teal":835,"source":"contracts/Factory.algo.ts:146","pc":[823]},{"teal":836,"source":"contracts/Factory.algo.ts:146","pc":[824,825]},{"teal":841,"source":"contracts/Factory.algo.ts:144","pc":[826,827]},{"teal":842,"source":"contracts/Factory.algo.ts:144","pc":[828]},{"teal":843,"source":"contracts/Factory.algo.ts:144","pc":[829]},{"teal":844,"source":"contracts/Factory.algo.ts:144","pc":[830,831]},{"teal":845,"source":"contracts/Factory.algo.ts:144","pc":[832,833,834]},{"teal":850,"source":"contracts/Factory.algo.ts:149","pc":[835,836]},{"teal":851,"source":"contracts/Factory.algo.ts:149","pc":[837]},{"teal":854,"source":"contracts/Factory.algo.ts:141","pc":[838,839]},{"teal":857,"source":"contracts/Factory.algo.ts:141","pc":[840,841]},{"teal":858,"source":"contracts/Factory.algo.ts:141","pc":[842]},{"teal":863,"source":"contracts/Factory.algo.ts:152","pc":[843]},{"teal":866,"source":"contracts/Factory.algo.ts:153","pc":[844,845,846]},{"teal":867,"source":"contracts/Factory.algo.ts:153","pc":[847,848,849]},{"teal":870,"source":"contracts/Factory.algo.ts:153","pc":[850,851,852]},{"teal":871,"source":"contracts/Factory.algo.ts:153","pc":[853,854,855]},{"teal":874,"source":"contracts/Factory.algo.ts:152","pc":[856,857,858]},{"teal":875,"source":"contracts/Factory.algo.ts:152","pc":[859]},{"teal":876,"source":"contracts/Factory.algo.ts:152","pc":[860]},{"teal":877,"source":"contracts/Factory.algo.ts:152","pc":[861]},{"teal":878,"source":"contracts/Factory.algo.ts:152","pc":[862]},{"teal":882,"source":"contracts/Factory.algo.ts:152","pc":[863,864,865]},{"teal":885,"source":"contracts/Factory.algo.ts:152","pc":[866]},{"teal":889,"source":"contracts/Factory.algo.ts:154","pc":[867,868]},{"teal":890,"source":"contracts/Factory.algo.ts:154","pc":[869,870]},{"teal":891,"source":"contracts/Factory.algo.ts:154","pc":[871,872,873]},{"teal":892,"source":"contracts/Factory.algo.ts:154","pc":[874,875]},{"teal":896,"source":"contracts/Factory.algo.ts:155","pc":[876]},{"teal":897,"source":"contracts/Factory.algo.ts:155","pc":[877,878]},{"teal":898,"source":"contracts/Factory.algo.ts:155","pc":[879]},{"teal":899,"source":"contracts/Factory.algo.ts:155","pc":[880]},{"teal":902,"source":"contracts/Factory.algo.ts:155","errorMessage":"box value does not exist: this.pools(hash).value","pc":[881]},{"teal":905,"source":"contracts/Factory.algo.ts:152","pc":[882,883]},{"teal":906,"source":"contracts/Factory.algo.ts:152","pc":[884]},{"teal":909,"source":"contracts/Factory.algo.ts:10","pc":[885,886]},{"teal":910,"source":"contracts/Factory.algo.ts:10","pc":[887,888,889]},{"teal":911,"source":"contracts/Factory.algo.ts:10","pc":[890,891]},{"teal":912,"source":"contracts/Factory.algo.ts:10","pc":[892,893,894]},{"teal":913,"source":"contracts/Factory.algo.ts:10","pc":[895,896,897,898]},{"teal":916,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[899]},{"teal":919,"source":"contracts/Factory.algo.ts:10","pc":[900,901,902,903,904,905]},{"teal":920,"source":"contracts/Factory.algo.ts:10","pc":[906,907,908,909,910,911]},{"teal":921,"source":"contracts/Factory.algo.ts:10","pc":[912,913,914,915,916,917]},{"teal":922,"source":"contracts/Factory.algo.ts:10","pc":[918,919,920,921,922,923]},{"teal":923,"source":"contracts/Factory.algo.ts:10","pc":[924,925,926,927,928,929]},{"teal":924,"source":"contracts/Factory.algo.ts:10","pc":[930,931,932,933,934,935]},{"teal":925,"source":"contracts/Factory.algo.ts:10","pc":[936,937,938,939,940,941]},{"teal":926,"source":"contracts/Factory.algo.ts:10","pc":[942,943,944,945,946,947]},{"teal":927,"source":"contracts/Factory.algo.ts:10","pc":[948,949,950,951,952,953]},{"teal":928,"source":"contracts/Factory.algo.ts:10","pc":[954,955,956,957,958,959]},{"teal":929,"source":"contracts/Factory.algo.ts:10","pc":[960,961,962,963,964,965]},{"teal":930,"source":"contracts/Factory.algo.ts:10","pc":[966,967,968]},{"teal":931,"source":"contracts/Factory.algo.ts:10","pc":[969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992]},{"teal":934,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[993]},{"teal":937,"source":"contracts/Factory.algo.ts:10","pc":[994,995,996]},{"teal":938,"source":"contracts/Factory.algo.ts:10","pc":[997,998]},{"teal":939,"source":"contracts/Factory.algo.ts:10","pc":[999,1000]},{"teal":940,"source":"contracts/Factory.algo.ts:10","pc":[1001]},{"teal":941,"source":"contracts/Factory.algo.ts:10","pc":[1002,1003]},{"teal":942,"source":"contracts/Factory.algo.ts:10","pc":[1004,1005]},{"teal":943,"source":"contracts/Factory.algo.ts:10","pc":[1006]},{"teal":946,"source":"contracts/Factory.algo.ts:10","pc":[1007,1008,1009]},{"teal":947,"source":"contracts/Factory.algo.ts:10","pc":[1010,1011]},{"teal":948,"source":"contracts/Factory.algo.ts:10","pc":[1012,1013]},{"teal":949,"source":"contracts/Factory.algo.ts:10","pc":[1014]},{"teal":950,"source":"contracts/Factory.algo.ts:10","pc":[1015,1016]},{"teal":951,"source":"contracts/Factory.algo.ts:10","pc":[1017,1018]},{"teal":952,"source":"contracts/Factory.algo.ts:10","pc":[1019]},{"teal":953,"source":"contracts/Factory.algo.ts:10","pc":[1020]},{"teal":954,"source":"contracts/Factory.algo.ts:10","pc":[1021,1022]},{"teal":955,"source":"contracts/Factory.algo.ts:10","pc":[1023]},{"teal":956,"source":"contracts/Factory.algo.ts:10","pc":[1024]},{"teal":957,"source":"contracts/Factory.algo.ts:10","pc":[1025]},{"teal":958,"source":"contracts/Factory.algo.ts:10","pc":[1026,1027,1028]},{"teal":959,"source":"contracts/Factory.algo.ts:10","pc":[1029,1030]},{"teal":960,"source":"contracts/Factory.algo.ts:10","pc":[1031,1032]},{"teal":961,"source":"contracts/Factory.algo.ts:10","pc":[1033]},{"teal":962,"source":"contracts/Factory.algo.ts:10","pc":[1034]},{"teal":963,"source":"contracts/Factory.algo.ts:10","pc":[1035,1036]},{"teal":964,"source":"contracts/Factory.algo.ts:10","pc":[1037,1038]},{"teal":965,"source":"contracts/Factory.algo.ts:10","pc":[1039,1040]},{"teal":966,"source":"contracts/Factory.algo.ts:10","pc":[1041,1042]},{"teal":967,"source":"contracts/Factory.algo.ts:10","pc":[1043]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDggMCA2IDQgMgpieXRlY2Jsb2NrIDB4IDB4NzA2ZjZmNmM1ZjYxNzA3MDcyNmY3NjYxNmM1ZjcwNzI2ZjY3NzI2MTZkIDB4MTUxZjdjNzUgMHg3MDZmNmY2YzczNWYgMHg2ZDYxNmU2MTY3NjU3MiAweGI4NDQ3YjM2CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4yCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDMgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKTogdm9pZAovLwovLyBjcmVhdGVBcHBsaWNhdGlvbiBtZXRob2QgY2FsbGVkIGF0IGNyZWF0aW9uCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoyMgoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gdGhpcy5hcHAuY3JlYXRvcgoJYnl0ZWMgNCAvLyAgIm1hbmFnZXIiCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZVBvb2woKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVQb29sOgoJLy8gZXhlY3V0ZSBjcmVhdGVQb29sKCl2b2lkCgljYWxsc3ViIGNyZWF0ZVBvb2wKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZVBvb2woKTogdm9pZAovLwovLyBEZXBsb3kgdGhlIHBvb2wgY29udHJhY3QsIGNvbXBpbGVkIHRlYWwgb2YgdGhlIGNvbnRyYWN0Ci8vIG11c3QgYmUgbG9hZGVkIGluIHBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbQpjcmVhdGVQb29sOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czozMAoJLy8gc2VuZEFwcENhbGwoewoJLy8gICAgICAgb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uTm9PcCwKCS8vICAgICAgIGFwcHJvdmFsUHJvZ3JhbTogdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0udmFsdWUsCgkvLyAgICAgICBjbGVhclN0YXRlUHJvZ3JhbTogQXNzZXRWYXVsdC5jbGVhclByb2dyYW0oKSwKCS8vICAgICAgIGdsb2JhbE51bVVpbnQ6IEFzc2V0VmF1bHQuc2NoZW1hLmdsb2JhbC5udW1VaW50LAoJLy8gICAgICAgZ2xvYmFsTnVtQnl0ZVNsaWNlOiBBc3NldFZhdWx0LnNjaGVtYS5nbG9iYWwubnVtQnl0ZVNsaWNlLAoJLy8gICAgICAgZXh0cmFQcm9ncmFtUGFnZXM6IDMsCgkvLyAgICAgICBhcHBsaWNhdGlvbkFyZ3M6IFttZXRob2QoJ2NyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkJyldLAoJLy8gICAgICAgZmVlOiAxMDBfMDAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjMxCgkvLyBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5Ob09wCglpbnRjIDIgLy8gIE5vT3AKCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czozMgoJLy8gYXBwcm92YWxQcm9ncmFtOiB0aGlzLnBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS52YWx1ZQoJYnl0ZWMgMSAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlCglhc3NlcnQKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czozMwoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IEFzc2V0VmF1bHQuY2xlYXJQcm9ncmFtKCkKCXB1c2hieXRlcyAweDBhCglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czozNAoJLy8gZ2xvYmFsTnVtVWludDogQXNzZXRWYXVsdC5zY2hlbWEuZ2xvYmFsLm51bVVpbnQKCWludGMgNCAvLyA0CglpdHhuX2ZpZWxkIEdsb2JhbE51bVVpbnQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjM1CgkvLyBnbG9iYWxOdW1CeXRlU2xpY2U6IEFzc2V0VmF1bHQuc2NoZW1hLmdsb2JhbC5udW1CeXRlU2xpY2UKCWludGMgNSAvLyAyCglpdHhuX2ZpZWxkIEdsb2JhbE51bUJ5dGVTbGljZQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MzYKCS8vIGV4dHJhUHJvZ3JhbVBhZ2VzOiAzCglwdXNoaW50IDMKCWl0eG5fZmllbGQgRXh0cmFQcm9ncmFtUGFnZXMKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjM3CgkvLyBhcHBsaWNhdGlvbkFyZ3M6IFttZXRob2QoJ2NyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkJyldCglieXRlYyA1IC8vICBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjM4CgkvLyBmZWU6IDEwMF8wMDAKCXB1c2hpbnQgMTAwXzAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGluaXRQb29sKHVpbnQ2NCx1aW50NjRbXSx1aW50NjRbXSl1aW50NjQKKmFiaV9yb3V0ZV9pbml0UG9vbDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gd2VpZ2h0czogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gYXNzZXRJZHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHBvb2xJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBpbml0UG9vbCh1aW50NjQsdWludDY0W10sdWludDY0W10pdWludDY0CgljYWxsc3ViIGluaXRQb29sCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaW5pdFBvb2wocG9vbElEOiBBcHBJRCwgYXNzZXRJZHM6IEFzc2V0SURbXSwgd2VpZ2h0czogdWludDY0W10pOiBBc3NldElECi8vCi8vIEluaXRpYWxpemUgdGhlIHBvb2wgd2l0aCB0aGUgZ2l2ZW4gYXNzZXRzICYgd2VpZ2h0cwovLyBAcGFyYW0ge0FwcElEfSBwb29sSUQgLSBQb29sIEFwcCBJRAovLyBAcGFyYW0ge0Fzc2V0SURbXX0gYXNzZXRJZHMKLy8gQHBhcmFtIHt1aW50NjRbXX0gd2VpZ2h0cwppbml0UG9vbDoKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo1MAoJLy8gYXNzZXJ0KGFzc2V0SWRzLmxlbmd0aCA+PSAyLCAnQXQgbGVhc3QgMiB0b2tlbnMgbmVlZGVkJykKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElkczogQXNzZXRJRFtdCglsZW4KCWludGMgMSAvLyA4CgkvCglpbnRjIDUgLy8gMgoJPj0KCgkvLyBBdCBsZWFzdCAyIHRva2VucyBuZWVkZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6NTEKCS8vIGFzc2VydChhc3NldElkcy5sZW5ndGggPT09IHdlaWdodHMubGVuZ3RoLCAnV2VpZ2h0cyBhbmQgQXNzZXRzIGxlbmd0aCBtdXN0IGJlIHRoZSBzYW1lJykKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElkczogQXNzZXRJRFtdCglsZW4KCWludGMgMSAvLyA4CgkvCglmcmFtZV9kaWcgLTMgLy8gd2VpZ2h0czogdWludDY0W10KCWxlbgoJaW50YyAxIC8vIDgKCS8KCT09CgoJLy8gV2VpZ2h0cyBhbmQgQXNzZXRzIGxlbmd0aCBtdXN0IGJlIHRoZSBzYW1lCglhc3NlcnQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjUzCgkvLyBoYXNoID0gdGhpcy5nZXRQb29sSGFzaChhc3NldElkcywgd2VpZ2h0cykKCWZyYW1lX2RpZyAtMyAvLyB3ZWlnaHRzOiB1aW50NjRbXQoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0SWRzOiBBc3NldElEW10KCWNhbGxzdWIgZ2V0UG9vbEhhc2gKCWZyYW1lX2J1cnkgMCAvLyBoYXNoOiBieXRlWzMyXQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6NTUKCS8vIGFzc2VydCghdGhpcy5wb29scyhoYXNoKS5leGlzdHMsICdUaGlzIHBvb2wgYWxyZWFkeSBleGlzdHMnKQoJYnl0ZWMgMyAvLyAgInBvb2xzXyIKCWZyYW1lX2RpZyAwIC8vIGhhc2g6IGJ5dGVbMzJdCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoKCS8vIFRoaXMgcG9vbCBhbHJlYWR5IGV4aXN0cwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo1NwoJLy8gdGhpcy5wb29scyhoYXNoKS52YWx1ZSA9IHsgaWQ6IHBvb2xJRCwgYXNzZXRzOiBhc3NldElkcywgd2VpZ2h0czogd2VpZ2h0cyB9CglieXRlYyAzIC8vICAicG9vbHNfIgoJZnJhbWVfZGlnIDAgLy8gaGFzaDogYnl0ZVszMl0KCWNvbmNhdAoJZHVwCglib3hfZGVsCglwb3AKCWJ5dGVjIDAgLy8gIGluaXRpYWwgaGVhZAoJYnl0ZWMgMCAvLyAgaW5pdGlhbCB0YWlsCglwdXNoYnl0ZXMgMHgwMDBjIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdG9iCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJZHVwCglsZW4KCWludGMgMSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0zIC8vIHdlaWdodHM6IHVpbnQ2NFtdCglkdXAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjU5CgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFzc2V0VmF1bHQucHJvdG90eXBlLmJvb3RzdHJhcCwgQXNzZXRJRD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogcG9vbElELAoJLy8gICAgICAgbWV0aG9kQXJnczogW2Fzc2V0SWRzLCB3ZWlnaHRzXSwKCS8vICAgICB9KTsKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4ZTYzNWZkYjUgLy8gbWV0aG9kICJib290c3RyYXAodWludDY0W10sdWludDY0W10pdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjYwCgkvLyBhcHBsaWNhdGlvbklEOiBwb29sSUQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjYxCgkvLyBtZXRob2RBcmdzOiBbYXNzZXRJZHMsIHdlaWdodHNdCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJZHVwCglsZW4KCWludGMgMSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0zIC8vIHdlaWdodHM6IHVpbnQ2NFtdCglkdXAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDAgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglidG9pCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIGFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGF4ZmVyKXZvaWQKKmFiaV9yb3V0ZV9hZGRMaXF1aWRpdHk6CgkvLyB0cmFuc2ZlclR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyA0IC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwICh0cmFuc2ZlclR4bikgZm9yIGFkZExpcXVpZGl0eSBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBwb29sSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYWRkTGlxdWlkaXR5KHVpbnQ2NCx1aW50NjQsYXhmZXIpdm9pZAoJY2FsbHN1YiBhZGRMaXF1aWRpdHkKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFkZExpcXVpZGl0eShwb29sSUQ6IEFwcElELCBpbmRleDogdWludDY0LCB0cmFuc2ZlclR4bjogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKLy8KLy8gQWRkIG9uZSB0b2tlbiBhcyBsaXF1aWRpdHkgdG8gdGhlIHBvb2wKLy8gQHBhcmFtIHtBcHBJRH0gcG9vbElEIC0gUG9vbCBBcHAgSUQKLy8gQHBhcmFtIHt1aW50NjR9IGluZGV4IC0gdGhlIGluZGV4Ci8vIEBwYXJhbSB7QXNzZXRUcmFuc2ZlclR4bn0gdHJhbnNmZXJUeG4gLSB0cmFuc2ZlciB0eCBvZiB0aGUgdG9rZW4sIHJlY2VpdmVyIG11c3QgYmUgdGhlIHBvb2wgYWNjb3VudAphZGRMaXF1aWRpdHk6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjcyCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQXNzZXRWYXVsdC5wcm90b3R5cGUuYWRkTGlxdWlkaXR5Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiBwb29sSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbaW5kZXgsIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50LCB0cmFuc2ZlclR4bi5zZW5kZXJdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweGFiZGY3ZTE1IC8vIG1ldGhvZCAiYWRkTGlxdWlkaXR5KHVpbnQ2NCx1aW50NjQsYWRkcmVzcyl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjczCgkvLyBhcHBsaWNhdGlvbklEOiBwb29sSUQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjc0CgkvLyBtZXRob2RBcmdzOiBbaW5kZXgsIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50LCB0cmFuc2ZlclR4bi5zZW5kZXJdCglmcmFtZV9kaWcgLTIgLy8gaW5kZXg6IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyB0cmFuc2ZlclR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTMgLy8gdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDIgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGdldExpcXVpZGl0eSh1aW50NjQpdWludDY0CiphYmlfcm91dGVfZ2V0TGlxdWlkaXR5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBwb29sSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZ2V0TGlxdWlkaXR5KHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgZ2V0TGlxdWlkaXR5CglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2V0TGlxdWlkaXR5KHBvb2xJRDogQXBwSUQpOiB1aW50NjQKLy8KLy8gQ29tcHV0ZSB0aGUgbGlxdWlkaXR5IGZvciB0aGUgc2VuZGVyIGFuZCBzZW5kIHRoZSBMUHMgZXhwZWN0ZWQKLy8gQHBhcmFtIHtBcHBJRH0gcG9vbElEIC0gUG9vbCBBcHAgSUQKLy8gQHJldHVybiB1aW50NjQgLSBUaGUgTFBzIGV4cGVjdGVkCmdldExpcXVpZGl0eToKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6ODQKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQXNzZXRWYXVsdC5wcm90b3R5cGUuZ2V0TGlxdWlkaXR5Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiBwb29sSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbdGhpcy50eG4uc2VuZGVyXSwKCS8vICAgICB9KTsKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4MmE3NDAwNGYgLy8gbWV0aG9kICJnZXRMaXF1aWRpdHkoYWRkcmVzcyl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6ODUKCS8vIGFwcGxpY2F0aW9uSUQ6IHBvb2xJRAoJZnJhbWVfZGlnIC0xIC8vIHBvb2xJRDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6ODYKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXJdCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMiAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50YyAwIC8vIDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJcmV0c3ViCgovLyBidXJuTGlxdWlkaXR5KHVpbnQ2NCxheGZlcil2b2lkCiphYmlfcm91dGVfYnVybkxpcXVpZGl0eToKCS8vIHRyYW5zZmVyVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDQgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHRyYW5zZmVyVHhuKSBmb3IgYnVybkxpcXVpZGl0eSBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHBvb2xJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBidXJuTGlxdWlkaXR5KHVpbnQ2NCxheGZlcil2b2lkCgljYWxsc3ViIGJ1cm5MaXF1aWRpdHkKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJ1cm5MaXF1aWRpdHkocG9vbElEOiBBcHBJRCwgdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkCmJ1cm5MaXF1aWRpdHk6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjkxCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQXNzZXRWYXVsdC5wcm90b3R5cGUuYnVybkxpcXVpZGl0eT4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogcG9vbElELAoJLy8gICAgICAgbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlciwgdHJhbnNmZXJUeG4uYXNzZXRBbW91bnRdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDNmYjFkMDliIC8vIG1ldGhvZCAiYnVybkxpcXVpZGl0eShhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjkyCgkvLyBhcHBsaWNhdGlvbklEOiBwb29sSUQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjkzCgkvLyBtZXRob2RBcmdzOiBbdGhpcy50eG4uc2VuZGVyLCB0cmFuc2ZlclR4bi5hc3NldEFtb3VudF0KCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTIgLy8gdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMiAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gc3dhcCh1aW50NjQsdWludDY0LHVpbnQ2NCxheGZlcil1aW50NjQKKmFiaV9yb3V0ZV9zd2FwOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyB0cmFuc2ZlclR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyA0IC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwICh0cmFuc2ZlclR4bikgZm9yIHN3YXAgbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyB0bzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gZnJvbTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gcG9vbElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHN3YXAodWludDY0LHVpbnQ2NCx1aW50NjQsYXhmZXIpdWludDY0CgljYWxsc3ViIHN3YXAKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzd2FwKHBvb2xJRDogQXBwSUQsIGZyb206IHVpbnQ2NCwgdG86IHVpbnQ2NCwgdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4pOiB1aW50NjQKc3dhcDoKCXByb3RvIDQgMQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6OTgKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQXNzZXRWYXVsdC5wcm90b3R5cGUuc3dhcD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogcG9vbElELAoJLy8gICAgICAgbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlciwgZnJvbSwgdG8sIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50XSwKCS8vICAgICB9KTsKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4OGQzMjVlMjkgLy8gbWV0aG9kICJzd2FwKGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjk5CgkvLyBhcHBsaWNhdGlvbklEOiBwb29sSUQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjEwMAoJLy8gbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlciwgZnJvbSwgdG8sIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50XQoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBmcm9tOiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTMgLy8gdG86IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtNCAvLyB0cmFuc2ZlclR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDAgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglidG9pCglyZXRzdWIKCi8vIGNoYW5nZVdlaWdodHModWludDY0LHVpbnQ2NFtdLHVpbnQ2NCl1aW50NjQKKmFiaV9yb3V0ZV9jaGFuZ2VXZWlnaHRzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBkdXJhdGlvbjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gbmV3V2VpZ2h0czogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gcG9vbElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGNoYW5nZVdlaWdodHModWludDY0LHVpbnQ2NFtdLHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgY2hhbmdlV2VpZ2h0cwoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNoYW5nZVdlaWdodHMocG9vbElEOiBBcHBJRCwgbmV3V2VpZ2h0czogdWludDY0W10sIGR1cmF0aW9uOiB1aW50NjQpOiB1aW50NjQKY2hhbmdlV2VpZ2h0czoKCXByb3RvIDMgMQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MTA1CgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFzc2V0VmF1bHQucHJvdG90eXBlLmNoYW5nZVdlaWdodHM+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHBvb2xJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFtkdXJhdGlvbiwgbmV3V2VpZ2h0c10sCgkvLyAgICAgfSk7CglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweGY0N2JhNWVhIC8vIG1ldGhvZCAiY2hhbmdlV2VpZ2h0cyh1aW50NjQsdWludDY0W10pdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjEwNgoJLy8gYXBwbGljYXRpb25JRDogcG9vbElECglmcmFtZV9kaWcgLTEgLy8gcG9vbElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMDcKCS8vIG1ldGhvZEFyZ3M6IFtkdXJhdGlvbiwgbmV3V2VpZ2h0c10KCWZyYW1lX2RpZyAtMyAvLyBkdXJhdGlvbjogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIG5ld1dlaWdodHM6IHVpbnQ2NFtdCglkdXAKCWxlbgoJaW50YyAxIC8vIDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDAgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglidG9pCglyZXRzdWIKCi8vIG9wVXAoKXZvaWQKKmFiaV9yb3V0ZV9vcFVwOgoJLy8gZXhlY3V0ZSBvcFVwKCl2b2lkCgljYWxsc3ViIG9wVXAKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIG9wVXAoKTogdm9pZApvcFVwOgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX01BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCS8vIHByb2dyYW1TaXplOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQpdm9pZAoJY2FsbHN1YiBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbShwcm9ncmFtU2l6ZTogdWludDY0KTogdm9pZAovLwovLyAqKioqKioqKioqKioqKioqKioqCi8vIE1BTkFHRVIKLy8gKioqKioqKioqKioqKioqKioqKgpNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW06Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjExOAoJLy8gdGhpcy5hc3NlcnRJc01hbmFnZXIoKQoJY2FsbHN1YiBhc3NlcnRJc01hbmFnZXIKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMjAKCS8vIHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLmV4aXN0cwoJYnl0ZWMgMSAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjEyMQoJLy8gdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0ucmVzaXplKHByb2dyYW1TaXplKQoJYnl0ZWMgMSAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWZyYW1lX2RpZyAtMSAvLyBwcm9ncmFtU2l6ZTogdWludDY0Cglib3hfcmVzaXplCgliICppZjBfZW5kCgoqaWYwX2Vsc2U6CgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjEyMwoJLy8gdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0uY3JlYXRlKHByb2dyYW1TaXplKQoJYnl0ZWMgMSAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWZyYW1lX2RpZyAtMSAvLyBwcm9ncmFtU2l6ZTogdWludDY0Cglib3hfY3JlYXRlCglwb3AKCippZjBfZW5kOgoJcmV0c3ViCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQsYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCS8vIGRhdGE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBvZmZzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkCgljYWxsc3ViIE1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbShvZmZzZXQ6IHVpbnQ2NCwgZGF0YTogYnl0ZXMpOiB2b2lkCk1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMjgKCS8vIHRoaXMuYXNzZXJ0SXNNYW5hZ2VyKCkKCWNhbGxzdWIgYXNzZXJ0SXNNYW5hZ2VyCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMzAKCS8vIHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnJlcGxhY2Uob2Zmc2V0LCBkYXRhKQoJYnl0ZWMgMSAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWZyYW1lX2RpZyAtMSAvLyBvZmZzZXQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGRhdGE6IGJ5dGVzCglib3hfcmVwbGFjZQoJcmV0c3ViCgovLyBhc3NlcnRJc01hbmFnZXIoKTogdm9pZAovLwovLyAqKioqKioqKioqKioqKioqKioqCi8vIFNVQlJPVVRJTkVTCi8vICoqKioqKioqKioqKioqKioqKioKYXNzZXJ0SXNNYW5hZ2VyOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMzgKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSwgJ29ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNCAvLyAgIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCXJldHN1YgoKLy8gZ2V0UG9vbEhhc2goYXNzZXRJZHM6IEFzc2V0SURbXSwgd2VpZ2h0czogdWludDY0W10pOiBieXRlczMyCmdldFBvb2xIYXNoOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MTQyCgkvLyBwYXJ0czogYnl0ZXMgPSAnJwoJYnl0ZWMgMCAvLyAgIiIKCWZyYW1lX2J1cnkgMCAvLyBwYXJ0czogYnl0ZXMKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE0NAoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhc3NldElkcy5sZW5ndGg7IGkgKz0gMSkKCWludGMgMiAvLyAwCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0CgoqZm9yXzA6CgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE0NAoJLy8gaSA8IGFzc2V0SWRzLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJbGVuCglpbnRjIDEgLy8gOAoJLwoJPAoJYnogKmZvcl8wX2VuZAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MTQ1CgkvLyBwYXJ0cyArPSBpdG9iKGFzc2V0SWRzW2ldKQoJZnJhbWVfZGlnIDAgLy8gcGFydHM6IGJ5dGVzCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMiAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAxIC8vIDgKCWV4dHJhY3QzCglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyBwYXJ0czogYnl0ZXMKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE0NgoJLy8gcGFydHMgKz0gaXRvYih3ZWlnaHRzW2ldKQoJZnJhbWVfZGlnIDAgLy8gcGFydHM6IGJ5dGVzCglmcmFtZV9kaWcgLTIgLy8gd2VpZ2h0czogdWludDY0W10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDIgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMSAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMSAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gcGFydHM6IGJ5dGVzCgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE0NAoJLy8gaSArPSAxCglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMCAvLyAxCgkrCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0CgliICpmb3JfMAoKKmZvcl8wX2VuZDoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MTQ5CgkvLyByZXR1cm4gc2hhNTEyXzI1NihwYXJ0cyk7CglmcmFtZV9kaWcgMCAvLyBwYXJ0czogYnl0ZXMKCXNoYTUxMl8yNTYKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIGdldFBvb2wodWludDY0W10sdWludDY0W10pKHVpbnQ2NCx1aW50NjRbXSx1aW50NjRbXSkKKmFiaV9yb3V0ZV9nZXRQb29sOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyB3ZWlnaHRzOiB1aW50NjRbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBhc3NldElkczogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBnZXRQb29sKHVpbnQ2NFtdLHVpbnQ2NFtdKSh1aW50NjQsdWludDY0W10sdWludDY0W10pCgljYWxsc3ViIGdldFBvb2wKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBnZXRQb29sKGFzc2V0SWRzOiBBc3NldElEW10sIHdlaWdodHM6IHVpbnQ2NFtdKTogUG9vbApnZXRQb29sOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE1NAoJLy8gaGFzaCA9IHRoaXMuZ2V0UG9vbEhhc2goYXNzZXRJZHMsIHdlaWdodHMpCglmcmFtZV9kaWcgLTIgLy8gd2VpZ2h0czogdWludDY0W10KCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkczogQXNzZXRJRFtdCgljYWxsc3ViIGdldFBvb2xIYXNoCglmcmFtZV9idXJ5IDAgLy8gaGFzaDogYnl0ZVszMl0KCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjE1NQoJLy8gcmV0dXJuIHRoaXMucG9vbHMoaGFzaCkudmFsdWU7CglieXRlYyAzIC8vICAicG9vbHNfIgoJZnJhbWVfZGlnIDAgLy8gaGFzaDogYnl0ZVszMl0KCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wb29scyhoYXNoKS52YWx1ZQoJYXNzZXJ0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXR4biBOdW1BcHBBcmdzCglieiAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCglieXRlYyA1IC8vICBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4NDI1ODhlMDkgLy8gbWV0aG9kICJjcmVhdGVQb29sKCl2b2lkIgoJcHVzaGJ5dGVzIDB4YTFlYjMwMjAgLy8gbWV0aG9kICJpbml0UG9vbCh1aW50NjQsdWludDY0W10sdWludDY0W10pdWludDY0IgoJcHVzaGJ5dGVzIDB4NzlhZDI5ODggLy8gbWV0aG9kICJhZGRMaXF1aWRpdHkodWludDY0LHVpbnQ2NCxheGZlcil2b2lkIgoJcHVzaGJ5dGVzIDB4ZDA4ZTdhNzQgLy8gbWV0aG9kICJnZXRMaXF1aWRpdHkodWludDY0KXVpbnQ2NCIKCXB1c2hieXRlcyAweGZjNjA5YmFlIC8vIG1ldGhvZCAiYnVybkxpcXVpZGl0eSh1aW50NjQsYXhmZXIpdm9pZCIKCXB1c2hieXRlcyAweDhhMzdkNTVlIC8vIG1ldGhvZCAic3dhcCh1aW50NjQsdWludDY0LHVpbnQ2NCxheGZlcil1aW50NjQiCglwdXNoYnl0ZXMgMHgyMDgxNGIzYSAvLyBtZXRob2QgImNoYW5nZVdlaWdodHModWludDY0LHVpbnQ2NFtdLHVpbnQ2NCl1aW50NjQiCglwdXNoYnl0ZXMgMHg4NTRkZWRlMCAvLyBtZXRob2QgIm9wVXAoKXZvaWQiCglwdXNoYnl0ZXMgMHgwOTllNWNmZCAvLyBtZXRob2QgIk1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGE0YjUwM2MxIC8vIG1ldGhvZCAiTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4Yzk5MTEzOTYgLy8gbWV0aG9kICJnZXRQb29sKHVpbnQ2NFtdLHVpbnQ2NFtdKSh1aW50NjQsdWludDY0W10sdWludDY0W10pIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVQb29sICphYmlfcm91dGVfaW5pdFBvb2wgKmFiaV9yb3V0ZV9hZGRMaXF1aWRpdHkgKmFiaV9yb3V0ZV9nZXRMaXF1aWRpdHkgKmFiaV9yb3V0ZV9idXJuTGlxdWlkaXR5ICphYmlfcm91dGVfc3dhcCAqYWJpX3JvdXRlX2NoYW5nZVdlaWdodHMgKmFiaV9yb3V0ZV9vcFVwICphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtICphYmlfcm91dGVfTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0gKmFiaV9yb3V0ZV9nZXRQb29sCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1YgoKKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWR1cAoJbGVuCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWJ0b2kKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9idXJ5IC0yIC8vIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQgABgQCJgYAFXBvb2xfYXBwcm92YWxfcHJvZ3JhbQQVH3x1BnBvb2xzXwdtYW5hZ2VyBLhEezYxGBQlCzEZCI0MAycAAAAAAAAAAAAAAxgAAAAAAAAAAAAAAIgAAiJDigAAJwQ2MgByB0hniYgAAiJDigAAsSWyECSyGSm+RLIegAEKsh8hBLI0IQWyNYEDsjgnBbIagaCNBrIBs4kqNhoDVwIANhoCVwIANhoBF4gABRZQsCJDigMBKIv+FSMKIQUPRIv+FSMKi/0VIwoSRIv9i/6IAh6MACuLAFC9TEgURCuLAFBJvEgoKIACAAyL/xaIAuqL/kkVIwoWVwYCTFCIAuiL/UkVIwoWVwYCTFCIAtlIUL+xJbIQgATmNf21shqL/7IYi/5JFSMKFlcGAkxQshqL/UkVIwoWVwYCTFCyGiSyAbO0OyIJxTpXBAAXjACJMRYiCUk4ECEEEkQ2GgIXNhoBF4gAAiJDigMAsSWyEIAEq99+FbIai/+yGIv+FrIai/04EhayGov9OACyGiSyAbOJKjYaAReIAAUWULAiQ4oBAbElshCABCp0AE+yGov/shgxALIaJLIBs7Q7IgnFOlcEABeJMRYiCUk4ECEEEkQ2GgEXiAACIkOKAgCxJbIQgAQ/sdCbshqL/7IYMQCyGov+OBIWshoksgGziSoxFiIJSTgQIQQSRDYaAxc2GgIXNhoBF4gABRZQsCJDigQBsSWyEIAEjTJeKbIai/+yGDEAshqL/hayGov9FrIai/w4EhayGiSyAbO0OyIJxTpXBAAXiSo2GgMXNhoCVwIANhoBF4gABRZQsCJDigMBsSWyEIAE9Hul6rIai/+yGIv9FrIai/5JFSMKFlcGAkxQshoksgGztDsiCcU6VwQAF4mIAAIiQ4oAAIk2GgEXiAACIkOKAQCIADApvUxIQQAHKYv/00IABSmL/7lIiTYaAlcCADYaAReIAAIiQ4oCAIgABymL/4v+u4mKAAAxACcEZBJEiYoCAShJKIwAJIwBiwGL/xUjCgxBADWLAIv/Nf8kiwEjCwg0/0wjWBcWUIwAiwCL/jX/JIsBIwsINP9MI1gXFlCMAIsBIgiMAUL/wIsAA4wARgGJKjYaAlcCADYaAVcCAIgABFCwIkOKAgEoi/6L/4j/jowAK4sAUL5EjACJMRtB/OQnBTYaAI4B/NsAgARCWI4JgASh6zAggAR5rSmIgATQjnp0gAT8YJuugASKN9VegAQggUs6gASFTe3ggAQJnlz9gASktQPBgATJkROWNhoAjgv8j/zA/XX9t/3q/iH+eP7E/s3+8P9qAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Pool = {
  id: bigint,
  assets: bigint[],
  weights: bigint[]
}


/**
 * Converts the ABI tuple representation of a Pool to the struct representation
 */
export function PoolFromTuple(abiTuple: [bigint, bigint[], bigint[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Pool, APP_SPEC.structs) as Pool
}

/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,axfer)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      /**
       * the index
       */
      index: bigint | number
      /**
       * transfer tx of the token, receiver must be the pool account
       */
      transferTxn: AppMethodCallTransactionArgument
    }
    'getLiquidity(uint64)uint64': {
      /**
      * Pool App ID
      uint64 - The LPs expected

       */
      poolId: bigint | number
    }
    'burnLiquidity(uint64,axfer)void': {
      poolId: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'swap(uint64,uint64,uint64,axfer)uint64': {
      poolId: bigint | number
      from: bigint | number
      to: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'changeWeights(uint64,uint64[],uint64)uint64': {
      poolId: bigint | number
      newWeights: bigint[] | number[]
      duration: bigint | number
    }
    'opUp()void': Record<string, never>
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': {
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,axfer)void': [poolId: bigint | number, index: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'getLiquidity(uint64)uint64': [poolId: bigint | number]
    'burnLiquidity(uint64,axfer)void': [poolId: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'swap(uint64,uint64,uint64,axfer)uint64': [poolId: bigint | number, from: bigint | number, to: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'changeWeights(uint64,uint64[],uint64)uint64': [poolId: bigint | number, newWeights: bigint[] | number[], duration: bigint | number]
    'opUp()void': []
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': [assetIds: bigint[] | number[], weights: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,axfer)void': void
  'getLiquidity(uint64)uint64': bigint
  'burnLiquidity(uint64,axfer)void': void
  'swap(uint64,uint64,uint64,axfer)uint64': bigint
  'changeWeights(uint64,uint64[],uint64)uint64': bigint
  'opUp()void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': Pool
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer)void' | 'addLiquidity', {
      argsObj: FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']
      returns: FactoryReturns['addLiquidity(uint64,uint64,axfer)void']
    }>
    & Record<'getLiquidity(uint64)uint64' | 'getLiquidity', {
      argsObj: FactoryArgs['obj']['getLiquidity(uint64)uint64']
      argsTuple: FactoryArgs['tuple']['getLiquidity(uint64)uint64']
      returns: FactoryReturns['getLiquidity(uint64)uint64']
    }>
    & Record<'burnLiquidity(uint64,axfer)void' | 'burnLiquidity', {
      argsObj: FactoryArgs['obj']['burnLiquidity(uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']
      returns: FactoryReturns['burnLiquidity(uint64,axfer)void']
    }>
    & Record<'swap(uint64,uint64,uint64,axfer)uint64' | 'swap', {
      argsObj: FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64']
      argsTuple: FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']
      returns: FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64']
    }>
    & Record<'changeWeights(uint64,uint64[],uint64)uint64' | 'changeWeights', {
      argsObj: FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64']
      argsTuple: FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']
      returns: FactoryReturns['changeWeights(uint64,uint64[],uint64)uint64']
    }>
    & Record<'opUp()void' | 'opUp', {
      argsObj: FactoryArgs['obj']['opUp()void']
      argsTuple: FactoryArgs['tuple']['opUp()void']
      returns: FactoryReturns['opUp()void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' | 'getPool', {
      argsObj: FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      argsTuple: FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      returns: FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {
        pools: Map<Uint8Array, Pool>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer)void ABI method
   *
   * Add one token as liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.index, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the getLiquidity(uint64)uint64 ABI method
   *
   * Compute the liquidity for the sender and send the LPs expected
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLiquidity(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the burnLiquidity(uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnLiquidity(uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,axfer)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,axfer)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.from, params.args.to, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the changeWeights(uint64,uint64[],uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeWeights(params: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeWeights(uint64,uint64[],uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newWeights, params.args.duration],
    }
  }
  /**
   * Constructs a no op call for the opUp()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opUp()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIds, params.args.weights],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)uint64` ABI method.
     *
     * Compute the liquidity for the sender and send the LPs expected
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `changeWeights(uint64,uint64[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeWeights: (params: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.changeWeights(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)uint64` ABI method.
     *
     * Compute the liquidity for the sender and send the LPs expected
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `changeWeights(uint64,uint64[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeWeights: (params: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.changeWeights(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['addLiquidity(uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)uint64` ABI method.
     *
     * Compute the liquidity for the sender and send the LPs expected
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLiquidity: async (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getLiquidity(uint64)uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnLiquidity: async (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.burnLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['burnLiquidity(uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `changeWeights(uint64,uint64[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeWeights: async (params: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.changeWeights(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['changeWeights(uint64,uint64[],uint64)uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['opUp()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPool: async (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>) {
    const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
    return result.return as unknown as FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Pool>> => { return (await this.appClient.state.box.getMap("pools")) as Map<Uint8Array, Pool> },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: Uint8Array): Promise<Pool | undefined> => { return await this.appClient.state.box.getMapValue("pools", key) as Pool | undefined },
      },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer)void method call against the Factory contract
       */
      addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLiquidity(uint64)uint64 method call against the Factory contract
       */
      getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLiquidity(uint64)uint64', v))
        return this
      },
      /**
       * Add a burnLiquidity(uint64,axfer)void method call against the Factory contract
       */
      burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64,uint64,axfer)uint64 method call against the Factory contract
       */
      swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(uint64,uint64,uint64,axfer)uint64', v))
        return this
      },
      /**
       * Add a changeWeights(uint64,uint64[],uint64)uint64 method call against the Factory contract
       */
      changeWeights(params: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeWeights(params)))
        resultMappers.push((v) => client.decodeReturnValue('changeWeights(uint64,uint64[],uint64)uint64', v))
        return this
      },
      /**
       * Add a opUp()void method call against the Factory contract
       */
      opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) method call against the Factory contract
       */
      getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPool(uint64[],uint64[])(uint64,uint64[],uint64[])', v))
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer)void ABI method.
   *
   * Add one token as liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['addLiquidity(uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the getLiquidity(uint64)uint64 ABI method.
   *
   * Compute the liquidity for the sender and send the LPs expected
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLiquidity(params?: CallParams<FactoryArgs['obj']['getLiquidity(uint64)uint64'] | FactoryArgs['tuple']['getLiquidity(uint64)uint64']>): FactoryComposer<[...TReturns, FactoryReturns['getLiquidity(uint64)uint64'] | undefined]>

  /**
   * Calls the burnLiquidity(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLiquidity(params?: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['burnLiquidity(uint64,axfer)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64,uint64,axfer)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)uint64'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)uint64']>): FactoryComposer<[...TReturns, FactoryReturns['swap(uint64,uint64,uint64,axfer)uint64'] | undefined]>

  /**
   * Calls the changeWeights(uint64,uint64[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeWeights(params?: CallParams<FactoryArgs['obj']['changeWeights(uint64,uint64[],uint64)uint64'] | FactoryArgs['tuple']['changeWeights(uint64,uint64[],uint64)uint64']>): FactoryComposer<[...TReturns, FactoryReturns['changeWeights(uint64,uint64[],uint64)uint64'] | undefined]>

  /**
   * Calls the opUp()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']>): FactoryComposer<[...TReturns, FactoryReturns['opUp()void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPool(params?: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>): FactoryComposer<[...TReturns, FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

