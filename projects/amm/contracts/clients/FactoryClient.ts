/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"opUp","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"*******************","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPool","readonly":true,"args":[{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"(uint64,uint64[],uint64[])","struct":"Pool"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Pool":[{"name":"id","type":"uint64"},{"name":"assets","type":"uint64[]"},{"name":"weights","type":"uint64[]"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{"pools":{"keyType":"byte[32]","valueType":"Pool","prefix":"pools_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:10","pc":[1,2,3,4,5,6,7]},{"teal":3,"source":"contracts/Factory.algo.ts:10","pc":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]},{"teal":15,"source":"contracts/Factory.algo.ts:10","pc":[58,59]},{"teal":16,"source":"contracts/Factory.algo.ts:10","pc":[60]},{"teal":17,"source":"contracts/Factory.algo.ts:10","pc":[61]},{"teal":18,"source":"contracts/Factory.algo.ts:10","pc":[62]},{"teal":19,"source":"contracts/Factory.algo.ts:10","pc":[63,64]},{"teal":20,"source":"contracts/Factory.algo.ts:10","pc":[65]},{"teal":21,"source":"contracts/Factory.algo.ts:10","pc":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]},{"teal":25,"source":"contracts/Factory.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[92]},{"teal":30,"source":"contracts/Factory.algo.ts:20","pc":[93,94,95]},{"teal":31,"source":"contracts/Factory.algo.ts:20","pc":[96]},{"teal":32,"source":"contracts/Factory.algo.ts:20","pc":[97]},{"teal":38,"source":"contracts/Factory.algo.ts:20","pc":[98,99,100]},{"teal":42,"source":"contracts/Factory.algo.ts:22","pc":[101]},{"teal":43,"source":"contracts/Factory.algo.ts:22","pc":[102,103,104]},{"teal":44,"source":"contracts/Factory.algo.ts:22","pc":[105,106]},{"teal":45,"source":"contracts/Factory.algo.ts:22","pc":[107]},{"teal":46,"source":"contracts/Factory.algo.ts:22","pc":[108]},{"teal":47,"source":"contracts/Factory.algo.ts:20","pc":[109]},{"teal":52,"source":"contracts/Factory.algo.ts:29","pc":[110,111,112]},{"teal":53,"source":"contracts/Factory.algo.ts:29","pc":[113]},{"teal":54,"source":"contracts/Factory.algo.ts:29","pc":[114]},{"teal":61,"source":"contracts/Factory.algo.ts:29","pc":[115,116,117]},{"teal":74,"source":"contracts/Factory.algo.ts:30","pc":[118]},{"teal":75,"source":"contracts/Factory.algo.ts:30","pc":[119]},{"teal":76,"source":"contracts/Factory.algo.ts:30","pc":[120,121]},{"teal":80,"source":"contracts/Factory.algo.ts:31","pc":[122]},{"teal":81,"source":"contracts/Factory.algo.ts:31","pc":[123,124]},{"teal":85,"source":"contracts/Factory.algo.ts:32","pc":[125]},{"teal":86,"source":"contracts/Factory.algo.ts:32","pc":[126]},{"teal":89,"source":"contracts/Factory.algo.ts:32","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[127]},{"teal":90,"source":"contracts/Factory.algo.ts:32","pc":[128,129]},{"teal":94,"source":"contracts/Factory.algo.ts:33","pc":[130,131,132]},{"teal":95,"source":"contracts/Factory.algo.ts:33","pc":[133,134]},{"teal":99,"source":"contracts/Factory.algo.ts:34","pc":[135,136]},{"teal":100,"source":"contracts/Factory.algo.ts:34","pc":[137,138]},{"teal":104,"source":"contracts/Factory.algo.ts:35","pc":[139,140]},{"teal":105,"source":"contracts/Factory.algo.ts:35","pc":[141,142]},{"teal":109,"source":"contracts/Factory.algo.ts:36","pc":[143,144]},{"teal":110,"source":"contracts/Factory.algo.ts:36","pc":[145,146]},{"teal":114,"source":"contracts/Factory.algo.ts:37","pc":[147,148]},{"teal":115,"source":"contracts/Factory.algo.ts:37","pc":[149,150]},{"teal":119,"source":"contracts/Factory.algo.ts:38","pc":[151,152,153,154]},{"teal":120,"source":"contracts/Factory.algo.ts:38","pc":[155,156]},{"teal":123,"source":"contracts/Factory.algo.ts:30","pc":[157]},{"teal":124,"source":"contracts/Factory.algo.ts:29","pc":[158]},{"teal":129,"source":"contracts/Factory.algo.ts:48","pc":[159,160]},{"teal":132,"source":"contracts/Factory.algo.ts:48","pc":[161,162,163]},{"teal":133,"source":"contracts/Factory.algo.ts:48","pc":[164,165,166]},{"teal":136,"source":"contracts/Factory.algo.ts:48","pc":[167,168,169]},{"teal":137,"source":"contracts/Factory.algo.ts:48","pc":[170,171,172]},{"teal":140,"source":"contracts/Factory.algo.ts:48","pc":[173,174,175]},{"teal":141,"source":"contracts/Factory.algo.ts:48","pc":[176]},{"teal":144,"source":"contracts/Factory.algo.ts:48","pc":[177,178,179]},{"teal":145,"source":"contracts/Factory.algo.ts:48","pc":[180]},{"teal":146,"source":"contracts/Factory.algo.ts:48","pc":[181]},{"teal":147,"source":"contracts/Factory.algo.ts:48","pc":[182]},{"teal":148,"source":"contracts/Factory.algo.ts:48","pc":[183]},{"teal":149,"source":"contracts/Factory.algo.ts:48","pc":[184]},{"teal":158,"source":"contracts/Factory.algo.ts:48","pc":[185,186,187]},{"teal":161,"source":"contracts/Factory.algo.ts:48","pc":[188]},{"teal":165,"source":"contracts/Factory.algo.ts:50","pc":[189,190]},{"teal":166,"source":"contracts/Factory.algo.ts:50","pc":[191]},{"teal":167,"source":"contracts/Factory.algo.ts:50","pc":[192]},{"teal":168,"source":"contracts/Factory.algo.ts:50","pc":[193]},{"teal":169,"source":"contracts/Factory.algo.ts:50","pc":[194,195]},{"teal":170,"source":"contracts/Factory.algo.ts:50","pc":[196]},{"teal":173,"source":"contracts/Factory.algo.ts:50","errorMessage":"At least 2 tokens needed","pc":[197]},{"teal":177,"source":"contracts/Factory.algo.ts:51","pc":[198,199]},{"teal":178,"source":"contracts/Factory.algo.ts:51","pc":[200]},{"teal":179,"source":"contracts/Factory.algo.ts:51","pc":[201]},{"teal":180,"source":"contracts/Factory.algo.ts:51","pc":[202]},{"teal":181,"source":"contracts/Factory.algo.ts:51","pc":[203,204]},{"teal":182,"source":"contracts/Factory.algo.ts:51","pc":[205]},{"teal":183,"source":"contracts/Factory.algo.ts:51","pc":[206]},{"teal":184,"source":"contracts/Factory.algo.ts:51","pc":[207]},{"teal":185,"source":"contracts/Factory.algo.ts:51","pc":[208]},{"teal":188,"source":"contracts/Factory.algo.ts:51","errorMessage":"Weights and Assets length must be the same","pc":[209]},{"teal":192,"source":"contracts/Factory.algo.ts:53","pc":[210,211]},{"teal":193,"source":"contracts/Factory.algo.ts:53","pc":[212,213]},{"teal":194,"source":"contracts/Factory.algo.ts:53","pc":[214,215,216]},{"teal":195,"source":"contracts/Factory.algo.ts:53","pc":[217,218]},{"teal":199,"source":"contracts/Factory.algo.ts:55","pc":[219]},{"teal":200,"source":"contracts/Factory.algo.ts:55","pc":[220,221]},{"teal":201,"source":"contracts/Factory.algo.ts:55","pc":[222]},{"teal":202,"source":"contracts/Factory.algo.ts:55","pc":[223]},{"teal":203,"source":"contracts/Factory.algo.ts:55","pc":[224]},{"teal":204,"source":"contracts/Factory.algo.ts:55","pc":[225]},{"teal":205,"source":"contracts/Factory.algo.ts:55","pc":[226]},{"teal":208,"source":"contracts/Factory.algo.ts:55","errorMessage":"This pool already exists","pc":[227]},{"teal":212,"source":"contracts/Factory.algo.ts:57","pc":[228]},{"teal":213,"source":"contracts/Factory.algo.ts:57","pc":[229,230]},{"teal":214,"source":"contracts/Factory.algo.ts:57","pc":[231]},{"teal":215,"source":"contracts/Factory.algo.ts:57","pc":[232]},{"teal":216,"source":"contracts/Factory.algo.ts:57","pc":[233]},{"teal":217,"source":"contracts/Factory.algo.ts:57","pc":[234]},{"teal":218,"source":"contracts/Factory.algo.ts:57","pc":[235]},{"teal":219,"source":"contracts/Factory.algo.ts:57","pc":[236]},{"teal":220,"source":"contracts/Factory.algo.ts:57","pc":[237,238,239,240]},{"teal":221,"source":"contracts/Factory.algo.ts:57","pc":[241,242]},{"teal":222,"source":"contracts/Factory.algo.ts:57","pc":[243]},{"teal":223,"source":"contracts/Factory.algo.ts:57","pc":[244,245,246]},{"teal":224,"source":"contracts/Factory.algo.ts:57","pc":[247,248]},{"teal":225,"source":"contracts/Factory.algo.ts:57","pc":[249]},{"teal":226,"source":"contracts/Factory.algo.ts:57","pc":[250]},{"teal":227,"source":"contracts/Factory.algo.ts:57","pc":[251]},{"teal":228,"source":"contracts/Factory.algo.ts:57","pc":[252]},{"teal":229,"source":"contracts/Factory.algo.ts:57","pc":[253]},{"teal":230,"source":"contracts/Factory.algo.ts:57","pc":[254,255,256]},{"teal":231,"source":"contracts/Factory.algo.ts:57","pc":[257]},{"teal":232,"source":"contracts/Factory.algo.ts:57","pc":[258]},{"teal":233,"source":"contracts/Factory.algo.ts:57","pc":[259,260,261]},{"teal":234,"source":"contracts/Factory.algo.ts:57","pc":[262,263]},{"teal":235,"source":"contracts/Factory.algo.ts:57","pc":[264]},{"teal":236,"source":"contracts/Factory.algo.ts:57","pc":[265]},{"teal":237,"source":"contracts/Factory.algo.ts:57","pc":[266]},{"teal":238,"source":"contracts/Factory.algo.ts:57","pc":[267]},{"teal":239,"source":"contracts/Factory.algo.ts:57","pc":[268]},{"teal":240,"source":"contracts/Factory.algo.ts:57","pc":[269,270,271]},{"teal":241,"source":"contracts/Factory.algo.ts:57","pc":[272]},{"teal":242,"source":"contracts/Factory.algo.ts:57","pc":[273]},{"teal":243,"source":"contracts/Factory.algo.ts:57","pc":[274,275,276]},{"teal":244,"source":"contracts/Factory.algo.ts:57","pc":[277]},{"teal":245,"source":"contracts/Factory.algo.ts:57","pc":[278]},{"teal":246,"source":"contracts/Factory.algo.ts:57","pc":[279]},{"teal":253,"source":"contracts/Factory.algo.ts:59","pc":[280]},{"teal":254,"source":"contracts/Factory.algo.ts:59","pc":[281]},{"teal":255,"source":"contracts/Factory.algo.ts:59","pc":[282,283]},{"teal":256,"source":"contracts/Factory.algo.ts:59","pc":[284,285,286,287,288,289]},{"teal":257,"source":"contracts/Factory.algo.ts:59","pc":[290,291]},{"teal":261,"source":"contracts/Factory.algo.ts:60","pc":[292,293]},{"teal":262,"source":"contracts/Factory.algo.ts:60","pc":[294,295]},{"teal":266,"source":"contracts/Factory.algo.ts:61","pc":[296,297]},{"teal":267,"source":"contracts/Factory.algo.ts:61","pc":[298]},{"teal":268,"source":"contracts/Factory.algo.ts:61","pc":[299]},{"teal":269,"source":"contracts/Factory.algo.ts:61","pc":[300]},{"teal":270,"source":"contracts/Factory.algo.ts:61","pc":[301]},{"teal":271,"source":"contracts/Factory.algo.ts:61","pc":[302]},{"teal":272,"source":"contracts/Factory.algo.ts:61","pc":[303,304,305]},{"teal":273,"source":"contracts/Factory.algo.ts:61","pc":[306]},{"teal":274,"source":"contracts/Factory.algo.ts:61","pc":[307]},{"teal":275,"source":"contracts/Factory.algo.ts:61","pc":[308,309]},{"teal":276,"source":"contracts/Factory.algo.ts:61","pc":[310,311]},{"teal":277,"source":"contracts/Factory.algo.ts:61","pc":[312]},{"teal":278,"source":"contracts/Factory.algo.ts:61","pc":[313]},{"teal":279,"source":"contracts/Factory.algo.ts:61","pc":[314]},{"teal":280,"source":"contracts/Factory.algo.ts:61","pc":[315]},{"teal":281,"source":"contracts/Factory.algo.ts:61","pc":[316]},{"teal":282,"source":"contracts/Factory.algo.ts:61","pc":[317,318,319]},{"teal":283,"source":"contracts/Factory.algo.ts:61","pc":[320]},{"teal":284,"source":"contracts/Factory.algo.ts:61","pc":[321]},{"teal":285,"source":"contracts/Factory.algo.ts:61","pc":[322,323]},{"teal":288,"source":"contracts/Factory.algo.ts:59","pc":[324]},{"teal":289,"source":"contracts/Factory.algo.ts:59","pc":[325,326]},{"teal":292,"source":"contracts/Factory.algo.ts:59","pc":[327]},{"teal":293,"source":"contracts/Factory.algo.ts:59","pc":[328,329]},{"teal":294,"source":"contracts/Factory.algo.ts:59","pc":[330]},{"teal":295,"source":"contracts/Factory.algo.ts:59","pc":[331]},{"teal":296,"source":"contracts/Factory.algo.ts:59","pc":[332,333]},{"teal":297,"source":"contracts/Factory.algo.ts:59","pc":[334,335,336]},{"teal":298,"source":"contracts/Factory.algo.ts:59","pc":[337]},{"teal":301,"source":"contracts/Factory.algo.ts:48","pc":[338,339]},{"teal":302,"source":"contracts/Factory.algo.ts:48","pc":[340]},{"teal":307,"source":"contracts/Factory.algo.ts:65","pc":[341,342,343]},{"teal":308,"source":"contracts/Factory.algo.ts:65","pc":[344]},{"teal":309,"source":"contracts/Factory.algo.ts:65","pc":[345]},{"teal":313,"source":"contracts/Factory.algo.ts:65","pc":[346,347,348]},{"teal":314,"source":"contracts/Factory.algo.ts:65","pc":[349]},{"teal":319,"source":"contracts/Factory.algo.ts:71","pc":[350,351,352]},{"teal":320,"source":"contracts/Factory.algo.ts:71","pc":[353]},{"teal":323,"source":"contracts/Factory.algo.ts:71","pc":[354,355,356]},{"teal":324,"source":"contracts/Factory.algo.ts:71","pc":[357]},{"teal":325,"source":"contracts/Factory.algo.ts:71","pc":[358]},{"teal":333,"source":"contracts/Factory.algo.ts:71","pc":[359,360,361]},{"teal":337,"source":"contracts/Factory.algo.ts:72","pc":[362,363,364]},{"teal":342,"source":"contracts/Factory.algo.ts:74","pc":[365]},{"teal":343,"source":"contracts/Factory.algo.ts:74","pc":[366]},{"teal":344,"source":"contracts/Factory.algo.ts:74","pc":[367]},{"teal":345,"source":"contracts/Factory.algo.ts:74","pc":[368]},{"teal":346,"source":"contracts/Factory.algo.ts:74","pc":[369,370,371]},{"teal":351,"source":"contracts/Factory.algo.ts:75","pc":[372]},{"teal":352,"source":"contracts/Factory.algo.ts:75","pc":[373,374]},{"teal":353,"source":"contracts/Factory.algo.ts:75","pc":[375]},{"teal":354,"source":"contracts/Factory.algo.ts:74","pc":[376,377,378]},{"teal":359,"source":"contracts/Factory.algo.ts:77","pc":[379]},{"teal":360,"source":"contracts/Factory.algo.ts:77","pc":[380,381]},{"teal":361,"source":"contracts/Factory.algo.ts:77","pc":[382]},{"teal":362,"source":"contracts/Factory.algo.ts:77","pc":[383]},{"teal":365,"source":"contracts/Factory.algo.ts:71","pc":[384]},{"teal":370,"source":"contracts/Factory.algo.ts:81","pc":[385,386,387]},{"teal":371,"source":"contracts/Factory.algo.ts:81","pc":[388,389,390]},{"teal":374,"source":"contracts/Factory.algo.ts:81","pc":[391,392,393]},{"teal":375,"source":"contracts/Factory.algo.ts:81","pc":[394]},{"teal":378,"source":"contracts/Factory.algo.ts:81","pc":[395,396,397]},{"teal":379,"source":"contracts/Factory.algo.ts:81","pc":[398]},{"teal":380,"source":"contracts/Factory.algo.ts:81","pc":[399]},{"teal":384,"source":"contracts/Factory.algo.ts:81","pc":[400,401,402]},{"teal":388,"source":"contracts/Factory.algo.ts:82","pc":[403,404,405]},{"teal":392,"source":"contracts/Factory.algo.ts:84","pc":[406]},{"teal":393,"source":"contracts/Factory.algo.ts:84","pc":[407,408]},{"teal":394,"source":"contracts/Factory.algo.ts:84","pc":[409,410]},{"teal":395,"source":"contracts/Factory.algo.ts:84","pc":[411]},{"teal":396,"source":"contracts/Factory.algo.ts:81","pc":[412]},{"teal":404,"source":"contracts/Factory.algo.ts:91","pc":[413,414,415]},{"teal":408,"source":"contracts/Factory.algo.ts:92","pc":[416,417]},{"teal":409,"source":"contracts/Factory.algo.ts:92","pc":[418]},{"teal":410,"source":"contracts/Factory.algo.ts:92","pc":[419]},{"teal":411,"source":"contracts/Factory.algo.ts:92","pc":[420]},{"teal":414,"source":"contracts/Factory.algo.ts:92","errorMessage":"only the manager can call this method","pc":[421]},{"teal":415,"source":"contracts/Factory.algo.ts:91","pc":[422]},{"teal":419,"source":"contracts/Factory.algo.ts:95","pc":[423,424,425]},{"teal":422,"source":"contracts/Factory.algo.ts:95","pc":[426]},{"teal":423,"source":"contracts/Factory.algo.ts:95","pc":[427]},{"teal":427,"source":"contracts/Factory.algo.ts:96","pc":[428]},{"teal":428,"source":"contracts/Factory.algo.ts:96","pc":[429,430]},{"teal":432,"source":"contracts/Factory.algo.ts:98","pc":[431]},{"teal":433,"source":"contracts/Factory.algo.ts:98","pc":[432,433]},{"teal":438,"source":"contracts/Factory.algo.ts:98","pc":[434,435]},{"teal":439,"source":"contracts/Factory.algo.ts:98","pc":[436,437]},{"teal":440,"source":"contracts/Factory.algo.ts:98","pc":[438]},{"teal":441,"source":"contracts/Factory.algo.ts:98","pc":[439]},{"teal":442,"source":"contracts/Factory.algo.ts:98","pc":[440]},{"teal":443,"source":"contracts/Factory.algo.ts:98","pc":[441]},{"teal":444,"source":"contracts/Factory.algo.ts:98","pc":[442,443,444]},{"teal":448,"source":"contracts/Factory.algo.ts:99","pc":[445,446]},{"teal":449,"source":"contracts/Factory.algo.ts:99","pc":[447,448]},{"teal":450,"source":"contracts/Factory.algo.ts:99","pc":[449,450]},{"teal":451,"source":"contracts/Factory.algo.ts:99","pc":[451]},{"teal":452,"source":"contracts/Factory.algo.ts:99","pc":[452,453]},{"teal":453,"source":"contracts/Factory.algo.ts:99","pc":[454]},{"teal":454,"source":"contracts/Factory.algo.ts:99","pc":[455]},{"teal":455,"source":"contracts/Factory.algo.ts:99","pc":[456]},{"teal":456,"source":"contracts/Factory.algo.ts:99","pc":[457,458]},{"teal":457,"source":"contracts/Factory.algo.ts:99","pc":[459]},{"teal":458,"source":"contracts/Factory.algo.ts:99","pc":[460]},{"teal":459,"source":"contracts/Factory.algo.ts:99","pc":[461]},{"teal":460,"source":"contracts/Factory.algo.ts:99","pc":[462]},{"teal":461,"source":"contracts/Factory.algo.ts:99","pc":[463]},{"teal":462,"source":"contracts/Factory.algo.ts:99","pc":[464]},{"teal":463,"source":"contracts/Factory.algo.ts:99","pc":[465,466]},{"teal":467,"source":"contracts/Factory.algo.ts:100","pc":[467,468]},{"teal":468,"source":"contracts/Factory.algo.ts:100","pc":[469,470]},{"teal":469,"source":"contracts/Factory.algo.ts:100","pc":[471,472]},{"teal":470,"source":"contracts/Factory.algo.ts:100","pc":[473]},{"teal":471,"source":"contracts/Factory.algo.ts:100","pc":[474,475]},{"teal":472,"source":"contracts/Factory.algo.ts:100","pc":[476]},{"teal":473,"source":"contracts/Factory.algo.ts:100","pc":[477]},{"teal":474,"source":"contracts/Factory.algo.ts:100","pc":[478]},{"teal":475,"source":"contracts/Factory.algo.ts:100","pc":[479,480]},{"teal":476,"source":"contracts/Factory.algo.ts:100","pc":[481]},{"teal":477,"source":"contracts/Factory.algo.ts:100","pc":[482]},{"teal":478,"source":"contracts/Factory.algo.ts:100","pc":[483]},{"teal":479,"source":"contracts/Factory.algo.ts:100","pc":[484]},{"teal":480,"source":"contracts/Factory.algo.ts:100","pc":[485]},{"teal":481,"source":"contracts/Factory.algo.ts:100","pc":[486]},{"teal":482,"source":"contracts/Factory.algo.ts:100","pc":[487,488]},{"teal":487,"source":"contracts/Factory.algo.ts:98","pc":[489,490]},{"teal":488,"source":"contracts/Factory.algo.ts:98","pc":[491]},{"teal":489,"source":"contracts/Factory.algo.ts:98","pc":[492]},{"teal":490,"source":"contracts/Factory.algo.ts:98","pc":[493,494]},{"teal":491,"source":"contracts/Factory.algo.ts:98","pc":[495,496,497]},{"teal":496,"source":"contracts/Factory.algo.ts:103","pc":[498,499]},{"teal":497,"source":"contracts/Factory.algo.ts:103","pc":[500]},{"teal":500,"source":"contracts/Factory.algo.ts:95","pc":[501,502]},{"teal":503,"source":"contracts/Factory.algo.ts:95","pc":[503,504]},{"teal":504,"source":"contracts/Factory.algo.ts:95","pc":[505]},{"teal":509,"source":"contracts/Factory.algo.ts:106","pc":[506,507]},{"teal":512,"source":"contracts/Factory.algo.ts:107","pc":[508,509,510]},{"teal":513,"source":"contracts/Factory.algo.ts:107","pc":[511,512,513]},{"teal":516,"source":"contracts/Factory.algo.ts:107","pc":[514,515,516]},{"teal":517,"source":"contracts/Factory.algo.ts:107","pc":[517,518,519]},{"teal":520,"source":"contracts/Factory.algo.ts:106","pc":[520,521,522]},{"teal":521,"source":"contracts/Factory.algo.ts:106","pc":[523]},{"teal":522,"source":"contracts/Factory.algo.ts:106","pc":[524]},{"teal":523,"source":"contracts/Factory.algo.ts:106","pc":[525]},{"teal":524,"source":"contracts/Factory.algo.ts:106","pc":[526]},{"teal":528,"source":"contracts/Factory.algo.ts:106","pc":[527,528,529]},{"teal":531,"source":"contracts/Factory.algo.ts:106","pc":[530]},{"teal":535,"source":"contracts/Factory.algo.ts:108","pc":[531,532]},{"teal":536,"source":"contracts/Factory.algo.ts:108","pc":[533,534]},{"teal":537,"source":"contracts/Factory.algo.ts:108","pc":[535,536,537]},{"teal":538,"source":"contracts/Factory.algo.ts:108","pc":[538,539]},{"teal":542,"source":"contracts/Factory.algo.ts:109","pc":[540]},{"teal":543,"source":"contracts/Factory.algo.ts:109","pc":[541,542]},{"teal":544,"source":"contracts/Factory.algo.ts:109","pc":[543]},{"teal":545,"source":"contracts/Factory.algo.ts:109","pc":[544]},{"teal":548,"source":"contracts/Factory.algo.ts:109","errorMessage":"box value does not exist: this.pools(hash).value","pc":[545]},{"teal":551,"source":"contracts/Factory.algo.ts:106","pc":[546,547]},{"teal":552,"source":"contracts/Factory.algo.ts:106","pc":[548]},{"teal":555,"source":"contracts/Factory.algo.ts:10","pc":[549,550]},{"teal":556,"source":"contracts/Factory.algo.ts:10","pc":[551,552,553]},{"teal":557,"source":"contracts/Factory.algo.ts:10","pc":[554,555]},{"teal":558,"source":"contracts/Factory.algo.ts:10","pc":[556,557,558]},{"teal":559,"source":"contracts/Factory.algo.ts:10","pc":[559,560,561,562]},{"teal":562,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[563]},{"teal":565,"source":"contracts/Factory.algo.ts:10","pc":[564,565,566,567,568,569]},{"teal":566,"source":"contracts/Factory.algo.ts:10","pc":[570,571,572,573,574,575]},{"teal":567,"source":"contracts/Factory.algo.ts:10","pc":[576,577,578,579,580,581]},{"teal":568,"source":"contracts/Factory.algo.ts:10","pc":[582,583,584,585,586,587]},{"teal":569,"source":"contracts/Factory.algo.ts:10","pc":[588,589,590,591,592,593]},{"teal":570,"source":"contracts/Factory.algo.ts:10","pc":[594,595,596,597,598,599]},{"teal":571,"source":"contracts/Factory.algo.ts:10","pc":[600,601,602]},{"teal":572,"source":"contracts/Factory.algo.ts:10","pc":[603,604,605,606,607,608,609,610,611,612,613,614,615,616]},{"teal":575,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[617]},{"teal":578,"source":"contracts/Factory.algo.ts:10","pc":[618,619,620]},{"teal":579,"source":"contracts/Factory.algo.ts:10","pc":[621,622]},{"teal":580,"source":"contracts/Factory.algo.ts:10","pc":[623,624]},{"teal":581,"source":"contracts/Factory.algo.ts:10","pc":[625]},{"teal":582,"source":"contracts/Factory.algo.ts:10","pc":[626,627]},{"teal":583,"source":"contracts/Factory.algo.ts:10","pc":[628,629]},{"teal":584,"source":"contracts/Factory.algo.ts:10","pc":[630]},{"teal":587,"source":"contracts/Factory.algo.ts:10","pc":[631,632,633]},{"teal":588,"source":"contracts/Factory.algo.ts:10","pc":[634,635]},{"teal":589,"source":"contracts/Factory.algo.ts:10","pc":[636,637]},{"teal":590,"source":"contracts/Factory.algo.ts:10","pc":[638]},{"teal":591,"source":"contracts/Factory.algo.ts:10","pc":[639,640]},{"teal":592,"source":"contracts/Factory.algo.ts:10","pc":[641,642]},{"teal":593,"source":"contracts/Factory.algo.ts:10","pc":[643]},{"teal":594,"source":"contracts/Factory.algo.ts:10","pc":[644]},{"teal":595,"source":"contracts/Factory.algo.ts:10","pc":[645,646]},{"teal":596,"source":"contracts/Factory.algo.ts:10","pc":[647]},{"teal":597,"source":"contracts/Factory.algo.ts:10","pc":[648]},{"teal":598,"source":"contracts/Factory.algo.ts:10","pc":[649]},{"teal":599,"source":"contracts/Factory.algo.ts:10","pc":[650,651,652]},{"teal":600,"source":"contracts/Factory.algo.ts:10","pc":[653,654]},{"teal":601,"source":"contracts/Factory.algo.ts:10","pc":[655,656]},{"teal":602,"source":"contracts/Factory.algo.ts:10","pc":[657]},{"teal":603,"source":"contracts/Factory.algo.ts:10","pc":[658]},{"teal":604,"source":"contracts/Factory.algo.ts:10","pc":[659,660]},{"teal":605,"source":"contracts/Factory.algo.ts:10","pc":[661,662]},{"teal":606,"source":"contracts/Factory.algo.ts:10","pc":[663,664]},{"teal":607,"source":"contracts/Factory.algo.ts:10","pc":[665,666]},{"teal":608,"source":"contracts/Factory.algo.ts:10","pc":[667]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFCAEABgImBgAVcG9vbF9hcHByb3ZhbF9wcm9ncmFtBnBvb2xzXwdtYW5hZ2VyBLhEezYEFR98dTEYFCULMRkIjQwB2AAAAAAAAAAAAAAByQAAAAAAAAAAAAAAiAACI0OKAAArNjIAcgdIZ4mIAAIjQ4oAALElshAkshkpvkSyHoABCrIfgQSyNCEEsjWBA7I4JwSyGoGgjQayAbOJJwU2GgNXAgA2GgJXAgA2GgEXiAAFFlCwI0OKAwEoi/4VIgohBA9Ei/4VIgqL/RUiChJEi/2L/ogAzowAKosAUL1MSBREKosAUEm8SCgogAIADIv/FogBc4v+SRUiChZXBgJMUIgBcYv9SRUiChZXBgJMUIgBYkhQv7ElshCABOY1/bWyGov/shiL/kkVIgoWVwYCTFCyGov9SRUiChZXBgJMULIaJLIBs7Q7IwnFOlcEABeMAImIAAIjQ4oAAIk2GgEXiAACI0OKAQCIADApvUxIQQAHKYv/00IABSmL/7lIiTYaAlcCADYaAReIAAIjQ4oCAIgABymL/4v+u4mKAAAxACtkEkSJigIBKEkojAAkjAGLAYv/FSIKDEEANYsAi/81/ySLASILCDT/TCJYFxZQjACLAIv+Nf8kiwEiCwg0/0wiWBcWUIwAiwEjCIwBQv/AiwADjABGAYknBTYaAlcCADYaAVcCAIgABFCwI0OKAgEoi/6L/4j/jYwAKosAUL5EjACJMRtB/jMnBDYaAI4B/ioAgARCWI4JgASh6zAggASFTe3ggAQJnlz9gASktQPBgATJkROWNhoAjgb+Bf42/uz+9f8Y/5EAigQDi/yL/1CL/Yv+iYoEA4v8i/5QjPyL/0kVi/4XCBZXBgKM/ov9TFCM/Yv8i/2L/ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Pool = {
  id: bigint,
  assets: bigint[],
  weights: bigint[]
}


/**
 * Converts the ABI tuple representation of a Pool to the struct representation
 */
export function PoolFromTuple(abiTuple: [bigint, bigint[], bigint[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Pool, APP_SPEC.structs) as Pool
}

/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'opUp()void': Record<string, never>
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': {
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'opUp()void': []
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': [assetIds: bigint[] | number[], weights: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'opUp()void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': Pool
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'opUp()void' | 'opUp', {
      argsObj: FactoryArgs['obj']['opUp()void']
      argsTuple: FactoryArgs['tuple']['opUp()void']
      returns: FactoryReturns['opUp()void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' | 'getPool', {
      argsObj: FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      argsTuple: FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      returns: FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {
        pools: Map<Uint8Array, Pool>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the opUp()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opUp()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIds, params.args.weights],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['opUp()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPool: async (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>) {
    const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
    return result.return as unknown as FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Pool>> => { return (await this.appClient.state.box.getMap("pools")) as Map<Uint8Array, Pool> },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: Uint8Array): Promise<Pool | undefined> => { return await this.appClient.state.box.getMapValue("pools", key) as Pool | undefined },
      },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a opUp()void method call against the Factory contract
       */
      opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) method call against the Factory contract
       */
      getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPool(uint64[],uint64[])(uint64,uint64[],uint64[])', v))
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the opUp()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']>): FactoryComposer<[...TReturns, FactoryReturns['opUp()void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPool(params?: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>): FactoryComposer<[...TReturns, FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

