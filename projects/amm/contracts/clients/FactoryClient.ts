/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","args":[{"name":"poolID","type":"uint64"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","args":[{"name":"poolID","type":"uint64"},{"name":"index","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"computeLiquidity","args":[{"name":"poolID","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"MANAGER Methods","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"hasPoolApprovalProgram","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProgram","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:4","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/Factory.algo.ts:4","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]},{"teal":15,"source":"contracts/Factory.algo.ts:4","pc":[49,50]},{"teal":16,"source":"contracts/Factory.algo.ts:4","pc":[51]},{"teal":17,"source":"contracts/Factory.algo.ts:4","pc":[52]},{"teal":18,"source":"contracts/Factory.algo.ts:4","pc":[53]},{"teal":19,"source":"contracts/Factory.algo.ts:4","pc":[54,55]},{"teal":20,"source":"contracts/Factory.algo.ts:4","pc":[56]},{"teal":21,"source":"contracts/Factory.algo.ts:4","pc":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82]},{"teal":25,"source":"contracts/Factory.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[83]},{"teal":30,"source":"contracts/Factory.algo.ts:9","pc":[84,85,86]},{"teal":31,"source":"contracts/Factory.algo.ts:9","pc":[87]},{"teal":32,"source":"contracts/Factory.algo.ts:9","pc":[88]},{"teal":36,"source":"contracts/Factory.algo.ts:9","pc":[89,90,91]},{"teal":40,"source":"contracts/Factory.algo.ts:11","pc":[92]},{"teal":41,"source":"contracts/Factory.algo.ts:11","pc":[93,94,95]},{"teal":42,"source":"contracts/Factory.algo.ts:11","pc":[96,97]},{"teal":43,"source":"contracts/Factory.algo.ts:11","pc":[98]},{"teal":44,"source":"contracts/Factory.algo.ts:11","pc":[99]},{"teal":45,"source":"contracts/Factory.algo.ts:9","pc":[100]},{"teal":50,"source":"contracts/Factory.algo.ts:14","pc":[101,102,103]},{"teal":51,"source":"contracts/Factory.algo.ts:14","pc":[104]},{"teal":52,"source":"contracts/Factory.algo.ts:14","pc":[105]},{"teal":56,"source":"contracts/Factory.algo.ts:14","pc":[106,107,108]},{"teal":69,"source":"contracts/Factory.algo.ts:15","pc":[109]},{"teal":70,"source":"contracts/Factory.algo.ts:15","pc":[110]},{"teal":71,"source":"contracts/Factory.algo.ts:15","pc":[111,112]},{"teal":75,"source":"contracts/Factory.algo.ts:16","pc":[113]},{"teal":76,"source":"contracts/Factory.algo.ts:16","pc":[114,115]},{"teal":80,"source":"contracts/Factory.algo.ts:17","pc":[116]},{"teal":81,"source":"contracts/Factory.algo.ts:17","pc":[117]},{"teal":84,"source":"contracts/Factory.algo.ts:17","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[118]},{"teal":85,"source":"contracts/Factory.algo.ts:17","pc":[119,120]},{"teal":89,"source":"contracts/Factory.algo.ts:18","pc":[121,122,123]},{"teal":90,"source":"contracts/Factory.algo.ts:18","pc":[124,125]},{"teal":94,"source":"contracts/Factory.algo.ts:19","pc":[126]},{"teal":95,"source":"contracts/Factory.algo.ts:19","pc":[127,128]},{"teal":99,"source":"contracts/Factory.algo.ts:20","pc":[129,130]},{"teal":100,"source":"contracts/Factory.algo.ts:20","pc":[131,132]},{"teal":104,"source":"contracts/Factory.algo.ts:21","pc":[133,134]},{"teal":105,"source":"contracts/Factory.algo.ts:21","pc":[135,136]},{"teal":109,"source":"contracts/Factory.algo.ts:22","pc":[137]},{"teal":110,"source":"contracts/Factory.algo.ts:22","pc":[138,139]},{"teal":114,"source":"contracts/Factory.algo.ts:23","pc":[140,141,142,143]},{"teal":115,"source":"contracts/Factory.algo.ts:23","pc":[144,145]},{"teal":118,"source":"contracts/Factory.algo.ts:15","pc":[146]},{"teal":119,"source":"contracts/Factory.algo.ts:14","pc":[147]},{"teal":124,"source":"contracts/Factory.algo.ts:27","pc":[148]},{"teal":127,"source":"contracts/Factory.algo.ts:27","pc":[149,150,151]},{"teal":128,"source":"contracts/Factory.algo.ts:27","pc":[152,153,154]},{"teal":131,"source":"contracts/Factory.algo.ts:27","pc":[155,156,157]},{"teal":132,"source":"contracts/Factory.algo.ts:27","pc":[158,159,160]},{"teal":135,"source":"contracts/Factory.algo.ts:27","pc":[161,162,163]},{"teal":136,"source":"contracts/Factory.algo.ts:27","pc":[164]},{"teal":139,"source":"contracts/Factory.algo.ts:27","pc":[165,166,167]},{"teal":140,"source":"contracts/Factory.algo.ts:27","pc":[168]},{"teal":141,"source":"contracts/Factory.algo.ts:27","pc":[169]},{"teal":142,"source":"contracts/Factory.algo.ts:27","pc":[170]},{"teal":143,"source":"contracts/Factory.algo.ts:27","pc":[171]},{"teal":144,"source":"contracts/Factory.algo.ts:27","pc":[172]},{"teal":148,"source":"contracts/Factory.algo.ts:27","pc":[173,174,175]},{"teal":155,"source":"contracts/Factory.algo.ts:28","pc":[176]},{"teal":156,"source":"contracts/Factory.algo.ts:28","pc":[177]},{"teal":157,"source":"contracts/Factory.algo.ts:28","pc":[178,179]},{"teal":158,"source":"contracts/Factory.algo.ts:28","pc":[180,181,182,183,184,185]},{"teal":159,"source":"contracts/Factory.algo.ts:28","pc":[186,187]},{"teal":163,"source":"contracts/Factory.algo.ts:29","pc":[188,189]},{"teal":164,"source":"contracts/Factory.algo.ts:29","pc":[190,191]},{"teal":168,"source":"contracts/Factory.algo.ts:30","pc":[192,193]},{"teal":169,"source":"contracts/Factory.algo.ts:30","pc":[194]},{"teal":170,"source":"contracts/Factory.algo.ts:30","pc":[195]},{"teal":171,"source":"contracts/Factory.algo.ts:30","pc":[196]},{"teal":172,"source":"contracts/Factory.algo.ts:30","pc":[197]},{"teal":173,"source":"contracts/Factory.algo.ts:30","pc":[198]},{"teal":174,"source":"contracts/Factory.algo.ts:30","pc":[199,200,201]},{"teal":175,"source":"contracts/Factory.algo.ts:30","pc":[202]},{"teal":176,"source":"contracts/Factory.algo.ts:30","pc":[203]},{"teal":177,"source":"contracts/Factory.algo.ts:30","pc":[204,205]},{"teal":178,"source":"contracts/Factory.algo.ts:30","pc":[206,207]},{"teal":179,"source":"contracts/Factory.algo.ts:30","pc":[208]},{"teal":180,"source":"contracts/Factory.algo.ts:30","pc":[209]},{"teal":181,"source":"contracts/Factory.algo.ts:30","pc":[210]},{"teal":182,"source":"contracts/Factory.algo.ts:30","pc":[211]},{"teal":183,"source":"contracts/Factory.algo.ts:30","pc":[212]},{"teal":184,"source":"contracts/Factory.algo.ts:30","pc":[213,214,215]},{"teal":185,"source":"contracts/Factory.algo.ts:30","pc":[216]},{"teal":186,"source":"contracts/Factory.algo.ts:30","pc":[217]},{"teal":187,"source":"contracts/Factory.algo.ts:30","pc":[218,219]},{"teal":190,"source":"contracts/Factory.algo.ts:28","pc":[220]},{"teal":191,"source":"contracts/Factory.algo.ts:28","pc":[221,222]},{"teal":194,"source":"contracts/Factory.algo.ts:28","pc":[223]},{"teal":195,"source":"contracts/Factory.algo.ts:28","pc":[224,225]},{"teal":196,"source":"contracts/Factory.algo.ts:28","pc":[226]},{"teal":197,"source":"contracts/Factory.algo.ts:28","pc":[227]},{"teal":198,"source":"contracts/Factory.algo.ts:28","pc":[228,229]},{"teal":199,"source":"contracts/Factory.algo.ts:28","pc":[230,231,232]},{"teal":200,"source":"contracts/Factory.algo.ts:28","pc":[233]},{"teal":201,"source":"contracts/Factory.algo.ts:27","pc":[234]},{"teal":206,"source":"contracts/Factory.algo.ts:34","pc":[235,236]},{"teal":207,"source":"contracts/Factory.algo.ts:34","pc":[237]},{"teal":208,"source":"contracts/Factory.algo.ts:34","pc":[238]},{"teal":209,"source":"contracts/Factory.algo.ts:34","pc":[239]},{"teal":210,"source":"contracts/Factory.algo.ts:34","pc":[240,241]},{"teal":211,"source":"contracts/Factory.algo.ts:34","pc":[242,243]},{"teal":212,"source":"contracts/Factory.algo.ts:34","pc":[244]},{"teal":215,"source":"contracts/Factory.algo.ts:34","errorMessage":"argument 0 (transferTxn) for addLiquidity must be a axfer transaction","pc":[245]},{"teal":218,"source":"contracts/Factory.algo.ts:34","pc":[246,247,248]},{"teal":219,"source":"contracts/Factory.algo.ts:34","pc":[249]},{"teal":222,"source":"contracts/Factory.algo.ts:34","pc":[250,251,252]},{"teal":223,"source":"contracts/Factory.algo.ts:34","pc":[253]},{"teal":226,"source":"contracts/Factory.algo.ts:34","pc":[254,255,256]},{"teal":227,"source":"contracts/Factory.algo.ts:34","pc":[257]},{"teal":228,"source":"contracts/Factory.algo.ts:34","pc":[258]},{"teal":232,"source":"contracts/Factory.algo.ts:34","pc":[259,260,261]},{"teal":239,"source":"contracts/Factory.algo.ts:35","pc":[262]},{"teal":240,"source":"contracts/Factory.algo.ts:35","pc":[263]},{"teal":241,"source":"contracts/Factory.algo.ts:35","pc":[264,265]},{"teal":242,"source":"contracts/Factory.algo.ts:35","pc":[266,267,268,269,270,271]},{"teal":243,"source":"contracts/Factory.algo.ts:35","pc":[272,273]},{"teal":247,"source":"contracts/Factory.algo.ts:36","pc":[274,275]},{"teal":248,"source":"contracts/Factory.algo.ts:36","pc":[276,277]},{"teal":252,"source":"contracts/Factory.algo.ts:37","pc":[278,279]},{"teal":253,"source":"contracts/Factory.algo.ts:37","pc":[280]},{"teal":254,"source":"contracts/Factory.algo.ts:37","pc":[281,282]},{"teal":255,"source":"contracts/Factory.algo.ts:37","pc":[283,284]},{"teal":256,"source":"contracts/Factory.algo.ts:37","pc":[285,286]},{"teal":257,"source":"contracts/Factory.algo.ts:37","pc":[287]},{"teal":258,"source":"contracts/Factory.algo.ts:37","pc":[288,289]},{"teal":259,"source":"contracts/Factory.algo.ts:37","pc":[290,291]},{"teal":260,"source":"contracts/Factory.algo.ts:37","pc":[292,293]},{"teal":261,"source":"contracts/Factory.algo.ts:37","pc":[294,295]},{"teal":264,"source":"contracts/Factory.algo.ts:35","pc":[296]},{"teal":265,"source":"contracts/Factory.algo.ts:35","pc":[297,298]},{"teal":268,"source":"contracts/Factory.algo.ts:35","pc":[299]},{"teal":269,"source":"contracts/Factory.algo.ts:34","pc":[300]},{"teal":274,"source":"contracts/Factory.algo.ts:41","pc":[301,302,303]},{"teal":275,"source":"contracts/Factory.algo.ts:41","pc":[304]},{"teal":278,"source":"contracts/Factory.algo.ts:41","pc":[305,306,307]},{"teal":279,"source":"contracts/Factory.algo.ts:41","pc":[308]},{"teal":280,"source":"contracts/Factory.algo.ts:41","pc":[309]},{"teal":284,"source":"contracts/Factory.algo.ts:41","pc":[310,311,312]},{"teal":291,"source":"contracts/Factory.algo.ts:42","pc":[313]},{"teal":292,"source":"contracts/Factory.algo.ts:42","pc":[314]},{"teal":293,"source":"contracts/Factory.algo.ts:42","pc":[315,316]},{"teal":294,"source":"contracts/Factory.algo.ts:42","pc":[317,318,319,320,321,322]},{"teal":295,"source":"contracts/Factory.algo.ts:42","pc":[323,324]},{"teal":299,"source":"contracts/Factory.algo.ts:43","pc":[325,326]},{"teal":300,"source":"contracts/Factory.algo.ts:43","pc":[327,328]},{"teal":304,"source":"contracts/Factory.algo.ts:44","pc":[329,330]},{"teal":305,"source":"contracts/Factory.algo.ts:44","pc":[331,332]},{"teal":308,"source":"contracts/Factory.algo.ts:42","pc":[333]},{"teal":309,"source":"contracts/Factory.algo.ts:42","pc":[334,335]},{"teal":312,"source":"contracts/Factory.algo.ts:42","pc":[336]},{"teal":313,"source":"contracts/Factory.algo.ts:41","pc":[337]},{"teal":318,"source":"contracts/Factory.algo.ts:51","pc":[338,339,340]},{"teal":319,"source":"contracts/Factory.algo.ts:51","pc":[341]},{"teal":322,"source":"contracts/Factory.algo.ts:51","pc":[342,343,344]},{"teal":323,"source":"contracts/Factory.algo.ts:51","pc":[345]},{"teal":324,"source":"contracts/Factory.algo.ts:51","pc":[346]},{"teal":330,"source":"contracts/Factory.algo.ts:51","pc":[347,348,349]},{"teal":334,"source":"contracts/Factory.algo.ts:52","pc":[350,351]},{"teal":335,"source":"contracts/Factory.algo.ts:52","pc":[352]},{"teal":336,"source":"contracts/Factory.algo.ts:52","pc":[353]},{"teal":337,"source":"contracts/Factory.algo.ts:52","pc":[354]},{"teal":340,"source":"contracts/Factory.algo.ts:52","errorMessage":"only the manager can call this method","pc":[355]},{"teal":345,"source":"contracts/Factory.algo.ts:54","pc":[356]},{"teal":346,"source":"contracts/Factory.algo.ts:54","pc":[357]},{"teal":347,"source":"contracts/Factory.algo.ts:54","pc":[358]},{"teal":348,"source":"contracts/Factory.algo.ts:54","pc":[359]},{"teal":349,"source":"contracts/Factory.algo.ts:54","pc":[360,361,362]},{"teal":354,"source":"contracts/Factory.algo.ts:55","pc":[363]},{"teal":355,"source":"contracts/Factory.algo.ts:55","pc":[364,365]},{"teal":356,"source":"contracts/Factory.algo.ts:55","pc":[366]},{"teal":357,"source":"contracts/Factory.algo.ts:54","pc":[367,368,369]},{"teal":362,"source":"contracts/Factory.algo.ts:57","pc":[370]},{"teal":363,"source":"contracts/Factory.algo.ts:57","pc":[371,372]},{"teal":364,"source":"contracts/Factory.algo.ts:57","pc":[373]},{"teal":365,"source":"contracts/Factory.algo.ts:57","pc":[374]},{"teal":368,"source":"contracts/Factory.algo.ts:51","pc":[375]},{"teal":373,"source":"contracts/Factory.algo.ts:61","pc":[376,377,378]},{"teal":374,"source":"contracts/Factory.algo.ts:61","pc":[379,380,381]},{"teal":377,"source":"contracts/Factory.algo.ts:61","pc":[382,383,384]},{"teal":378,"source":"contracts/Factory.algo.ts:61","pc":[385]},{"teal":381,"source":"contracts/Factory.algo.ts:61","pc":[386,387,388]},{"teal":382,"source":"contracts/Factory.algo.ts:61","pc":[389]},{"teal":383,"source":"contracts/Factory.algo.ts:61","pc":[390]},{"teal":387,"source":"contracts/Factory.algo.ts:61","pc":[391,392,393]},{"teal":391,"source":"contracts/Factory.algo.ts:62","pc":[394,395]},{"teal":392,"source":"contracts/Factory.algo.ts:62","pc":[396]},{"teal":393,"source":"contracts/Factory.algo.ts:62","pc":[397]},{"teal":394,"source":"contracts/Factory.algo.ts:62","pc":[398]},{"teal":397,"source":"contracts/Factory.algo.ts:62","errorMessage":"only the manager can call this method","pc":[399]},{"teal":401,"source":"contracts/Factory.algo.ts:63","pc":[400]},{"teal":402,"source":"contracts/Factory.algo.ts:63","pc":[401,402]},{"teal":403,"source":"contracts/Factory.algo.ts:63","pc":[403,404]},{"teal":404,"source":"contracts/Factory.algo.ts:63","pc":[405]},{"teal":405,"source":"contracts/Factory.algo.ts:61","pc":[406]},{"teal":410,"source":"contracts/Factory.algo.ts:66","pc":[407]},{"teal":413,"source":"contracts/Factory.algo.ts:66","pc":[408,409,410]},{"teal":414,"source":"contracts/Factory.algo.ts:66","pc":[411,412,413]},{"teal":415,"source":"contracts/Factory.algo.ts:66","pc":[414]},{"teal":416,"source":"contracts/Factory.algo.ts:66","pc":[415,416]},{"teal":417,"source":"contracts/Factory.algo.ts:66","pc":[417]},{"teal":418,"source":"contracts/Factory.algo.ts:66","pc":[418]},{"teal":419,"source":"contracts/Factory.algo.ts:66","pc":[419]},{"teal":420,"source":"contracts/Factory.algo.ts:66","pc":[420]},{"teal":421,"source":"contracts/Factory.algo.ts:66","pc":[421]},{"teal":425,"source":"contracts/Factory.algo.ts:66","pc":[422,423,424]},{"teal":429,"source":"contracts/Factory.algo.ts:67","pc":[425]},{"teal":430,"source":"contracts/Factory.algo.ts:67","pc":[426]},{"teal":431,"source":"contracts/Factory.algo.ts:67","pc":[427]},{"teal":432,"source":"contracts/Factory.algo.ts:67","pc":[428]},{"teal":433,"source":"contracts/Factory.algo.ts:66","pc":[429]},{"teal":438,"source":"contracts/Factory.algo.ts:70","pc":[430]},{"teal":441,"source":"contracts/Factory.algo.ts:70","pc":[431,432,433]},{"teal":442,"source":"contracts/Factory.algo.ts:70","pc":[434]},{"teal":443,"source":"contracts/Factory.algo.ts:70","pc":[435]},{"teal":444,"source":"contracts/Factory.algo.ts:70","pc":[436]},{"teal":445,"source":"contracts/Factory.algo.ts:70","pc":[437,438,439]},{"teal":446,"source":"contracts/Factory.algo.ts:70","pc":[440]},{"teal":447,"source":"contracts/Factory.algo.ts:70","pc":[441]},{"teal":448,"source":"contracts/Factory.algo.ts:70","pc":[442]},{"teal":449,"source":"contracts/Factory.algo.ts:70","pc":[443]},{"teal":450,"source":"contracts/Factory.algo.ts:70","pc":[444]},{"teal":451,"source":"contracts/Factory.algo.ts:70","pc":[445]},{"teal":455,"source":"contracts/Factory.algo.ts:70","pc":[446,447,448]},{"teal":459,"source":"contracts/Factory.algo.ts:71","pc":[449]},{"teal":460,"source":"contracts/Factory.algo.ts:71","pc":[450]},{"teal":463,"source":"contracts/Factory.algo.ts:71","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[451]},{"teal":464,"source":"contracts/Factory.algo.ts:70","pc":[452]},{"teal":467,"source":"contracts/Factory.algo.ts:4","pc":[453,454]},{"teal":468,"source":"contracts/Factory.algo.ts:4","pc":[455,456,457]},{"teal":469,"source":"contracts/Factory.algo.ts:4","pc":[458]},{"teal":470,"source":"contracts/Factory.algo.ts:4","pc":[459,460,461]},{"teal":471,"source":"contracts/Factory.algo.ts:4","pc":[462,463,464,465]},{"teal":474,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[466]},{"teal":477,"source":"contracts/Factory.algo.ts:4","pc":[467,468,469,470,471,472]},{"teal":478,"source":"contracts/Factory.algo.ts:4","pc":[473,474,475,476,477,478]},{"teal":479,"source":"contracts/Factory.algo.ts:4","pc":[479,480,481,482,483,484]},{"teal":480,"source":"contracts/Factory.algo.ts:4","pc":[485,486,487,488,489,490]},{"teal":481,"source":"contracts/Factory.algo.ts:4","pc":[491,492,493,494,495,496]},{"teal":482,"source":"contracts/Factory.algo.ts:4","pc":[497,498,499,500,501,502]},{"teal":483,"source":"contracts/Factory.algo.ts:4","pc":[503,504,505,506,507,508]},{"teal":484,"source":"contracts/Factory.algo.ts:4","pc":[509,510,511,512,513,514]},{"teal":485,"source":"contracts/Factory.algo.ts:4","pc":[515,516,517]},{"teal":486,"source":"contracts/Factory.algo.ts:4","pc":[518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535]},{"teal":489,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[536]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAGCCYEFXBvb2xfYXBwcm92YWxfcHJvZ3JhbQdtYW5hZ2VyBBUffHUEuER7NjEYFCQLMRkIjQwBgAAAAAAAAAAAAAABcgAAAAAAAAAAAAAAiAACIkOKAAApNjIAcgdIZ4mIAAIiQ4oAALEkshAjshkovkSyHoABCrIfIrI0gQKyNYEDsjgrshqBoI0GsgGziSo2GgNXAgA2GgJXAgA2GgEXiAAFFlCwIkOKAwGxJLIQgATmNf21shqL/7IYi/5JFSUKFlcGAkxQshqL/UkVJQoWVwYCTFCyGiOyAbO0OyIJxTpXBAAXiTEWIglJOBCBBBJENhoCFzYaAReIAAIiQ4oDALEkshCABKvffhWyGov/shiL/hayGov9OBIWshqL/TgAshojsgGziTYaAReIAAIiQ4oBALEkshCABMNfDxmyGov/shgxALIaI7IBs4k2GgEXiAACIkOKAQAxAClkEkQovUxIQQAHKIv/00IABSiL/7lIiTYaAlcCADYaAReIAAIiQ4oCADEAKWQSRCiL/4v+u4kqiAALgAEAI08CVFCwIkOKAAEovUxIiSqIAAxJFRZXBgJMUFCwIkOKAAEovkSJMRtB/oorNhoAjgH+ggCABEJYjgmABKHrMCCABHmtKYiABJm0CBaABAmeXP2ABKS1A8GABHMzjvqABBRaQAQ2GgCOCP5N/nz+0/8V/zr/YP9//5YA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,axfer)void': {
      poolId: bigint | number
      index: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'computeLiquidity(uint64)void': {
      poolId: bigint | number
    }
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'hasPoolApprovalProgram()bool': Record<string, never>
    'getProgram()byte[]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,axfer)void': [poolId: bigint | number, index: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'computeLiquidity(uint64)void': [poolId: bigint | number]
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'hasPoolApprovalProgram()bool': []
    'getProgram()byte[]': []
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,axfer)void': void
  'computeLiquidity(uint64)void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'hasPoolApprovalProgram()bool': boolean
  'getProgram()byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer)void' | 'addLiquidity', {
      argsObj: FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']
      returns: FactoryReturns['addLiquidity(uint64,uint64,axfer)void']
    }>
    & Record<'computeLiquidity(uint64)void' | 'computeLiquidity', {
      argsObj: FactoryArgs['obj']['computeLiquidity(uint64)void']
      argsTuple: FactoryArgs['tuple']['computeLiquidity(uint64)void']
      returns: FactoryReturns['computeLiquidity(uint64)void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'hasPoolApprovalProgram()bool' | 'hasPoolApprovalProgram', {
      argsObj: FactoryArgs['obj']['hasPoolApprovalProgram()bool']
      argsTuple: FactoryArgs['tuple']['hasPoolApprovalProgram()bool']
      returns: FactoryReturns['hasPoolApprovalProgram()bool']
    }>
    & Record<'getProgram()byte[]' | 'getProgram', {
      argsObj: FactoryArgs['obj']['getProgram()byte[]']
      argsTuple: FactoryArgs['tuple']['getProgram()byte[]']
      returns: FactoryReturns['getProgram()byte[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.index, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the computeLiquidity(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static computeLiquidity(params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'computeLiquidity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * MANAGER Methods
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the hasPoolApprovalProgram()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasPoolApprovalProgram(params: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasPoolApprovalProgram()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getProgram()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProgram(params: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProgram()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    computeLiquidity: (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.computeLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * MANAGER Methods
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `hasPoolApprovalProgram()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasPoolApprovalProgram: (params: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.hasPoolApprovalProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getProgram()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProgram: (params: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.getProgram(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    computeLiquidity: (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.computeLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * MANAGER Methods
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `hasPoolApprovalProgram()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasPoolApprovalProgram: (params: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.hasPoolApprovalProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getProgram()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProgram: (params: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getProgram(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['addLiquidity(uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    computeLiquidity: async (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.computeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['computeLiquidity(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * MANAGER Methods
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `hasPoolApprovalProgram()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasPoolApprovalProgram: async (params: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.hasPoolApprovalProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['hasPoolApprovalProgram()bool'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getProgram()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProgram: async (params: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getProgram()byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer)void method call against the Factory contract
       */
      addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a computeLiquidity(uint64)void method call against the Factory contract
       */
      computeLiquidity(params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.computeLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hasPoolApprovalProgram()bool method call against the Factory contract
       */
      hasPoolApprovalProgram(params: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasPoolApprovalProgram(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasPoolApprovalProgram()bool', v))
        return this
      },
      /**
       * Add a getProgram()byte[] method call against the Factory contract
       */
      getProgram(params: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProgram(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProgram()byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['addLiquidity(uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the computeLiquidity(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeLiquidity(params?: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['computeLiquidity(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * MANAGER Methods
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the hasPoolApprovalProgram()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasPoolApprovalProgram(params?: CallParams<FactoryArgs['obj']['hasPoolApprovalProgram()bool'] | FactoryArgs['tuple']['hasPoolApprovalProgram()bool']>): FactoryComposer<[...TReturns, FactoryReturns['hasPoolApprovalProgram()bool'] | undefined]>

  /**
   * Calls the getProgram()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProgram(params?: CallParams<FactoryArgs['obj']['getProgram()byte[]'] | FactoryArgs['tuple']['getProgram()byte[]']>): FactoryComposer<[...TReturns, FactoryReturns['getProgram()byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

