/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Add one token as liquidity to the pool","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"index","type":"uint64","desc":"the index"},{"name":"transferTxn","type":"axfer","desc":"transfer tx of the token, receiver must be the pool account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"computeLiquidity","desc":"Compute the liquidity for the sender and send the expected LP","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"poolID","type":"uint64"},{"name":"from","type":"uint64"},{"name":"to","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"*******************","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:4","pc":[1,2,3,4,5,6,7]},{"teal":3,"source":"contracts/Factory.algo.ts:4","pc":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]},{"teal":15,"source":"contracts/Factory.algo.ts:4","pc":[45,46]},{"teal":16,"source":"contracts/Factory.algo.ts:4","pc":[47]},{"teal":17,"source":"contracts/Factory.algo.ts:4","pc":[48]},{"teal":18,"source":"contracts/Factory.algo.ts:4","pc":[49]},{"teal":19,"source":"contracts/Factory.algo.ts:4","pc":[50,51]},{"teal":20,"source":"contracts/Factory.algo.ts:4","pc":[52]},{"teal":21,"source":"contracts/Factory.algo.ts:4","pc":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]},{"teal":25,"source":"contracts/Factory.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[79]},{"teal":30,"source":"contracts/Factory.algo.ts:12","pc":[80,81,82]},{"teal":31,"source":"contracts/Factory.algo.ts:12","pc":[83]},{"teal":32,"source":"contracts/Factory.algo.ts:12","pc":[84]},{"teal":38,"source":"contracts/Factory.algo.ts:12","pc":[85,86,87]},{"teal":42,"source":"contracts/Factory.algo.ts:14","pc":[88]},{"teal":43,"source":"contracts/Factory.algo.ts:14","pc":[89,90,91]},{"teal":44,"source":"contracts/Factory.algo.ts:14","pc":[92,93]},{"teal":45,"source":"contracts/Factory.algo.ts:14","pc":[94]},{"teal":46,"source":"contracts/Factory.algo.ts:14","pc":[95]},{"teal":47,"source":"contracts/Factory.algo.ts:12","pc":[96]},{"teal":52,"source":"contracts/Factory.algo.ts:21","pc":[97,98,99]},{"teal":53,"source":"contracts/Factory.algo.ts:21","pc":[100]},{"teal":54,"source":"contracts/Factory.algo.ts:21","pc":[101]},{"teal":61,"source":"contracts/Factory.algo.ts:21","pc":[102,103,104]},{"teal":74,"source":"contracts/Factory.algo.ts:22","pc":[105]},{"teal":75,"source":"contracts/Factory.algo.ts:22","pc":[106]},{"teal":76,"source":"contracts/Factory.algo.ts:22","pc":[107,108]},{"teal":80,"source":"contracts/Factory.algo.ts:23","pc":[109]},{"teal":81,"source":"contracts/Factory.algo.ts:23","pc":[110,111]},{"teal":85,"source":"contracts/Factory.algo.ts:24","pc":[112]},{"teal":86,"source":"contracts/Factory.algo.ts:24","pc":[113]},{"teal":89,"source":"contracts/Factory.algo.ts:24","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[114]},{"teal":90,"source":"contracts/Factory.algo.ts:24","pc":[115,116]},{"teal":94,"source":"contracts/Factory.algo.ts:25","pc":[117,118,119]},{"teal":95,"source":"contracts/Factory.algo.ts:25","pc":[120,121]},{"teal":99,"source":"contracts/Factory.algo.ts:26","pc":[122]},{"teal":100,"source":"contracts/Factory.algo.ts:26","pc":[123,124]},{"teal":104,"source":"contracts/Factory.algo.ts:27","pc":[125,126]},{"teal":105,"source":"contracts/Factory.algo.ts:27","pc":[127,128]},{"teal":109,"source":"contracts/Factory.algo.ts:28","pc":[129,130]},{"teal":110,"source":"contracts/Factory.algo.ts:28","pc":[131,132]},{"teal":114,"source":"contracts/Factory.algo.ts:29","pc":[133]},{"teal":115,"source":"contracts/Factory.algo.ts:29","pc":[134,135]},{"teal":119,"source":"contracts/Factory.algo.ts:30","pc":[136,137,138,139]},{"teal":120,"source":"contracts/Factory.algo.ts:30","pc":[140,141]},{"teal":123,"source":"contracts/Factory.algo.ts:22","pc":[142]},{"teal":124,"source":"contracts/Factory.algo.ts:21","pc":[143]},{"teal":129,"source":"contracts/Factory.algo.ts:40","pc":[144,145,146,147,148,149]},{"teal":132,"source":"contracts/Factory.algo.ts:40","pc":[150,151,152]},{"teal":133,"source":"contracts/Factory.algo.ts:40","pc":[153,154,155]},{"teal":136,"source":"contracts/Factory.algo.ts:40","pc":[156,157,158]},{"teal":137,"source":"contracts/Factory.algo.ts:40","pc":[159,160,161]},{"teal":140,"source":"contracts/Factory.algo.ts:40","pc":[162,163,164]},{"teal":141,"source":"contracts/Factory.algo.ts:40","pc":[165]},{"teal":144,"source":"contracts/Factory.algo.ts:40","pc":[166,167,168]},{"teal":145,"source":"contracts/Factory.algo.ts:40","pc":[169]},{"teal":146,"source":"contracts/Factory.algo.ts:40","pc":[170]},{"teal":147,"source":"contracts/Factory.algo.ts:40","pc":[171]},{"teal":148,"source":"contracts/Factory.algo.ts:40","pc":[172]},{"teal":149,"source":"contracts/Factory.algo.ts:40","pc":[173]},{"teal":158,"source":"contracts/Factory.algo.ts:40","pc":[174,175,176]},{"teal":165,"source":"contracts/Factory.algo.ts:41","pc":[177]},{"teal":166,"source":"contracts/Factory.algo.ts:41","pc":[178]},{"teal":167,"source":"contracts/Factory.algo.ts:41","pc":[179,180]},{"teal":168,"source":"contracts/Factory.algo.ts:41","pc":[181,182,183,184,185,186]},{"teal":169,"source":"contracts/Factory.algo.ts:41","pc":[187,188]},{"teal":173,"source":"contracts/Factory.algo.ts:42","pc":[189,190]},{"teal":174,"source":"contracts/Factory.algo.ts:42","pc":[191,192]},{"teal":178,"source":"contracts/Factory.algo.ts:43","pc":[193,194]},{"teal":179,"source":"contracts/Factory.algo.ts:43","pc":[195]},{"teal":180,"source":"contracts/Factory.algo.ts:43","pc":[196]},{"teal":181,"source":"contracts/Factory.algo.ts:43","pc":[197,198]},{"teal":182,"source":"contracts/Factory.algo.ts:43","pc":[199]},{"teal":183,"source":"contracts/Factory.algo.ts:43","pc":[200]},{"teal":184,"source":"contracts/Factory.algo.ts:43","pc":[201,202,203]},{"teal":185,"source":"contracts/Factory.algo.ts:43","pc":[204]},{"teal":186,"source":"contracts/Factory.algo.ts:43","pc":[205]},{"teal":187,"source":"contracts/Factory.algo.ts:43","pc":[206,207]},{"teal":188,"source":"contracts/Factory.algo.ts:43","pc":[208,209]},{"teal":189,"source":"contracts/Factory.algo.ts:43","pc":[210]},{"teal":190,"source":"contracts/Factory.algo.ts:43","pc":[211]},{"teal":191,"source":"contracts/Factory.algo.ts:43","pc":[212,213]},{"teal":192,"source":"contracts/Factory.algo.ts:43","pc":[214]},{"teal":193,"source":"contracts/Factory.algo.ts:43","pc":[215]},{"teal":194,"source":"contracts/Factory.algo.ts:43","pc":[216,217,218]},{"teal":195,"source":"contracts/Factory.algo.ts:43","pc":[219]},{"teal":196,"source":"contracts/Factory.algo.ts:43","pc":[220]},{"teal":197,"source":"contracts/Factory.algo.ts:43","pc":[221,222]},{"teal":200,"source":"contracts/Factory.algo.ts:41","pc":[223]},{"teal":201,"source":"contracts/Factory.algo.ts:41","pc":[224,225]},{"teal":204,"source":"contracts/Factory.algo.ts:41","pc":[226]},{"teal":205,"source":"contracts/Factory.algo.ts:41","pc":[227,228]},{"teal":206,"source":"contracts/Factory.algo.ts:41","pc":[229]},{"teal":207,"source":"contracts/Factory.algo.ts:41","pc":[230]},{"teal":208,"source":"contracts/Factory.algo.ts:41","pc":[231,232]},{"teal":209,"source":"contracts/Factory.algo.ts:41","pc":[233,234,235]},{"teal":210,"source":"contracts/Factory.algo.ts:41","pc":[236]},{"teal":211,"source":"contracts/Factory.algo.ts:40","pc":[237]},{"teal":216,"source":"contracts/Factory.algo.ts:53","pc":[238,239]},{"teal":217,"source":"contracts/Factory.algo.ts:53","pc":[240]},{"teal":218,"source":"contracts/Factory.algo.ts:53","pc":[241]},{"teal":219,"source":"contracts/Factory.algo.ts:53","pc":[242]},{"teal":220,"source":"contracts/Factory.algo.ts:53","pc":[243,244]},{"teal":221,"source":"contracts/Factory.algo.ts:53","pc":[245]},{"teal":222,"source":"contracts/Factory.algo.ts:53","pc":[246]},{"teal":225,"source":"contracts/Factory.algo.ts:53","errorMessage":"argument 0 (transferTxn) for addLiquidity must be a axfer transaction","pc":[247]},{"teal":228,"source":"contracts/Factory.algo.ts:53","pc":[248,249,250]},{"teal":229,"source":"contracts/Factory.algo.ts:53","pc":[251]},{"teal":232,"source":"contracts/Factory.algo.ts:53","pc":[252,253,254]},{"teal":233,"source":"contracts/Factory.algo.ts:53","pc":[255]},{"teal":236,"source":"contracts/Factory.algo.ts:53","pc":[256,257,258]},{"teal":237,"source":"contracts/Factory.algo.ts:53","pc":[259]},{"teal":238,"source":"contracts/Factory.algo.ts:53","pc":[260]},{"teal":247,"source":"contracts/Factory.algo.ts:53","pc":[261,262,263]},{"teal":254,"source":"contracts/Factory.algo.ts:54","pc":[264]},{"teal":255,"source":"contracts/Factory.algo.ts:54","pc":[265]},{"teal":256,"source":"contracts/Factory.algo.ts:54","pc":[266,267]},{"teal":257,"source":"contracts/Factory.algo.ts:54","pc":[268,269,270,271,272,273]},{"teal":258,"source":"contracts/Factory.algo.ts:54","pc":[274,275]},{"teal":262,"source":"contracts/Factory.algo.ts:55","pc":[276,277]},{"teal":263,"source":"contracts/Factory.algo.ts:55","pc":[278,279]},{"teal":267,"source":"contracts/Factory.algo.ts:56","pc":[280,281]},{"teal":268,"source":"contracts/Factory.algo.ts:56","pc":[282]},{"teal":269,"source":"contracts/Factory.algo.ts:56","pc":[283,284]},{"teal":270,"source":"contracts/Factory.algo.ts:56","pc":[285,286]},{"teal":271,"source":"contracts/Factory.algo.ts:56","pc":[287,288]},{"teal":272,"source":"contracts/Factory.algo.ts:56","pc":[289]},{"teal":273,"source":"contracts/Factory.algo.ts:56","pc":[290,291]},{"teal":274,"source":"contracts/Factory.algo.ts:56","pc":[292,293]},{"teal":275,"source":"contracts/Factory.algo.ts:56","pc":[294,295]},{"teal":276,"source":"contracts/Factory.algo.ts:56","pc":[296,297]},{"teal":279,"source":"contracts/Factory.algo.ts:54","pc":[298]},{"teal":280,"source":"contracts/Factory.algo.ts:54","pc":[299,300]},{"teal":283,"source":"contracts/Factory.algo.ts:54","pc":[301]},{"teal":284,"source":"contracts/Factory.algo.ts:53","pc":[302]},{"teal":289,"source":"contracts/Factory.algo.ts:64","pc":[303,304,305]},{"teal":290,"source":"contracts/Factory.algo.ts:64","pc":[306]},{"teal":293,"source":"contracts/Factory.algo.ts:64","pc":[307,308,309]},{"teal":294,"source":"contracts/Factory.algo.ts:64","pc":[310]},{"teal":295,"source":"contracts/Factory.algo.ts:64","pc":[311]},{"teal":302,"source":"contracts/Factory.algo.ts:64","pc":[312,313,314]},{"teal":309,"source":"contracts/Factory.algo.ts:65","pc":[315]},{"teal":310,"source":"contracts/Factory.algo.ts:65","pc":[316]},{"teal":311,"source":"contracts/Factory.algo.ts:65","pc":[317,318]},{"teal":312,"source":"contracts/Factory.algo.ts:65","pc":[319,320,321,322,323,324]},{"teal":313,"source":"contracts/Factory.algo.ts:65","pc":[325,326]},{"teal":317,"source":"contracts/Factory.algo.ts:66","pc":[327,328]},{"teal":318,"source":"contracts/Factory.algo.ts:66","pc":[329,330]},{"teal":322,"source":"contracts/Factory.algo.ts:67","pc":[331,332]},{"teal":323,"source":"contracts/Factory.algo.ts:67","pc":[333,334]},{"teal":326,"source":"contracts/Factory.algo.ts:65","pc":[335]},{"teal":327,"source":"contracts/Factory.algo.ts:65","pc":[336,337]},{"teal":330,"source":"contracts/Factory.algo.ts:65","pc":[338]},{"teal":331,"source":"contracts/Factory.algo.ts:64","pc":[339]},{"teal":336,"source":"contracts/Factory.algo.ts:71","pc":[340,341]},{"teal":337,"source":"contracts/Factory.algo.ts:71","pc":[342]},{"teal":338,"source":"contracts/Factory.algo.ts:71","pc":[343]},{"teal":339,"source":"contracts/Factory.algo.ts:71","pc":[344]},{"teal":340,"source":"contracts/Factory.algo.ts:71","pc":[345,346]},{"teal":341,"source":"contracts/Factory.algo.ts:71","pc":[347]},{"teal":342,"source":"contracts/Factory.algo.ts:71","pc":[348]},{"teal":345,"source":"contracts/Factory.algo.ts:71","errorMessage":"argument 0 (transferTxn) for swap must be a axfer transaction","pc":[349]},{"teal":348,"source":"contracts/Factory.algo.ts:71","pc":[350,351,352]},{"teal":349,"source":"contracts/Factory.algo.ts:71","pc":[353]},{"teal":352,"source":"contracts/Factory.algo.ts:71","pc":[354,355,356]},{"teal":353,"source":"contracts/Factory.algo.ts:71","pc":[357]},{"teal":356,"source":"contracts/Factory.algo.ts:71","pc":[358,359,360]},{"teal":357,"source":"contracts/Factory.algo.ts:71","pc":[361]},{"teal":360,"source":"contracts/Factory.algo.ts:71","pc":[362,363,364]},{"teal":361,"source":"contracts/Factory.algo.ts:71","pc":[365]},{"teal":362,"source":"contracts/Factory.algo.ts:71","pc":[366]},{"teal":366,"source":"contracts/Factory.algo.ts:71","pc":[367,368,369]},{"teal":373,"source":"contracts/Factory.algo.ts:72","pc":[370]},{"teal":374,"source":"contracts/Factory.algo.ts:72","pc":[371]},{"teal":375,"source":"contracts/Factory.algo.ts:72","pc":[372,373]},{"teal":376,"source":"contracts/Factory.algo.ts:72","pc":[374,375,376,377,378,379]},{"teal":377,"source":"contracts/Factory.algo.ts:72","pc":[380,381]},{"teal":381,"source":"contracts/Factory.algo.ts:73","pc":[382,383]},{"teal":382,"source":"contracts/Factory.algo.ts:73","pc":[384,385]},{"teal":386,"source":"contracts/Factory.algo.ts:74","pc":[386,387]},{"teal":387,"source":"contracts/Factory.algo.ts:74","pc":[388,389]},{"teal":388,"source":"contracts/Factory.algo.ts:74","pc":[390,391]},{"teal":389,"source":"contracts/Factory.algo.ts:74","pc":[392]},{"teal":390,"source":"contracts/Factory.algo.ts:74","pc":[393,394]},{"teal":391,"source":"contracts/Factory.algo.ts:74","pc":[395,396]},{"teal":392,"source":"contracts/Factory.algo.ts:74","pc":[397]},{"teal":393,"source":"contracts/Factory.algo.ts:74","pc":[398,399]},{"teal":394,"source":"contracts/Factory.algo.ts:74","pc":[400,401]},{"teal":395,"source":"contracts/Factory.algo.ts:74","pc":[402,403]},{"teal":396,"source":"contracts/Factory.algo.ts:74","pc":[404]},{"teal":397,"source":"contracts/Factory.algo.ts:74","pc":[405,406]},{"teal":400,"source":"contracts/Factory.algo.ts:72","pc":[407]},{"teal":401,"source":"contracts/Factory.algo.ts:72","pc":[408,409]},{"teal":404,"source":"contracts/Factory.algo.ts:72","pc":[410]},{"teal":405,"source":"contracts/Factory.algo.ts:71","pc":[411]},{"teal":410,"source":"contracts/Factory.algo.ts:82","pc":[412,413,414]},{"teal":411,"source":"contracts/Factory.algo.ts:82","pc":[415]},{"teal":414,"source":"contracts/Factory.algo.ts:82","pc":[416,417,418]},{"teal":415,"source":"contracts/Factory.algo.ts:82","pc":[419]},{"teal":416,"source":"contracts/Factory.algo.ts:82","pc":[420]},{"teal":424,"source":"contracts/Factory.algo.ts:82","pc":[421,422,423]},{"teal":428,"source":"contracts/Factory.algo.ts:83","pc":[424,425,426]},{"teal":433,"source":"contracts/Factory.algo.ts:85","pc":[427]},{"teal":434,"source":"contracts/Factory.algo.ts:85","pc":[428]},{"teal":435,"source":"contracts/Factory.algo.ts:85","pc":[429]},{"teal":436,"source":"contracts/Factory.algo.ts:85","pc":[430]},{"teal":437,"source":"contracts/Factory.algo.ts:85","pc":[431,432,433]},{"teal":442,"source":"contracts/Factory.algo.ts:86","pc":[434]},{"teal":443,"source":"contracts/Factory.algo.ts:86","pc":[435,436]},{"teal":444,"source":"contracts/Factory.algo.ts:86","pc":[437]},{"teal":445,"source":"contracts/Factory.algo.ts:85","pc":[438,439,440]},{"teal":450,"source":"contracts/Factory.algo.ts:88","pc":[441]},{"teal":451,"source":"contracts/Factory.algo.ts:88","pc":[442,443]},{"teal":452,"source":"contracts/Factory.algo.ts:88","pc":[444]},{"teal":453,"source":"contracts/Factory.algo.ts:88","pc":[445]},{"teal":456,"source":"contracts/Factory.algo.ts:82","pc":[446]},{"teal":461,"source":"contracts/Factory.algo.ts:92","pc":[447,448,449]},{"teal":462,"source":"contracts/Factory.algo.ts:92","pc":[450,451,452]},{"teal":465,"source":"contracts/Factory.algo.ts:92","pc":[453,454,455]},{"teal":466,"source":"contracts/Factory.algo.ts:92","pc":[456]},{"teal":469,"source":"contracts/Factory.algo.ts:92","pc":[457,458,459]},{"teal":470,"source":"contracts/Factory.algo.ts:92","pc":[460]},{"teal":471,"source":"contracts/Factory.algo.ts:92","pc":[461]},{"teal":475,"source":"contracts/Factory.algo.ts:92","pc":[462,463,464]},{"teal":479,"source":"contracts/Factory.algo.ts:93","pc":[465,466,467]},{"teal":483,"source":"contracts/Factory.algo.ts:95","pc":[468]},{"teal":484,"source":"contracts/Factory.algo.ts:95","pc":[469,470]},{"teal":485,"source":"contracts/Factory.algo.ts:95","pc":[471,472]},{"teal":486,"source":"contracts/Factory.algo.ts:95","pc":[473]},{"teal":487,"source":"contracts/Factory.algo.ts:92","pc":[474]},{"teal":495,"source":"contracts/Factory.algo.ts:102","pc":[475,476,477]},{"teal":499,"source":"contracts/Factory.algo.ts:103","pc":[478,479]},{"teal":500,"source":"contracts/Factory.algo.ts:103","pc":[480]},{"teal":501,"source":"contracts/Factory.algo.ts:103","pc":[481]},{"teal":502,"source":"contracts/Factory.algo.ts:103","pc":[482]},{"teal":505,"source":"contracts/Factory.algo.ts:103","errorMessage":"only the manager can call this method","pc":[483]},{"teal":506,"source":"contracts/Factory.algo.ts:102","pc":[484]},{"teal":509,"source":"contracts/Factory.algo.ts:4","pc":[485,486]},{"teal":510,"source":"contracts/Factory.algo.ts:4","pc":[487,488,489]},{"teal":511,"source":"contracts/Factory.algo.ts:4","pc":[490]},{"teal":512,"source":"contracts/Factory.algo.ts:4","pc":[491,492,493]},{"teal":513,"source":"contracts/Factory.algo.ts:4","pc":[494,495,496,497]},{"teal":516,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[498]},{"teal":519,"source":"contracts/Factory.algo.ts:4","pc":[499,500,501,502,503,504]},{"teal":520,"source":"contracts/Factory.algo.ts:4","pc":[505,506,507,508,509,510]},{"teal":521,"source":"contracts/Factory.algo.ts:4","pc":[511,512,513,514,515,516]},{"teal":522,"source":"contracts/Factory.algo.ts:4","pc":[517,518,519,520,521,522]},{"teal":523,"source":"contracts/Factory.algo.ts:4","pc":[523,524,525,526,527,528]},{"teal":524,"source":"contracts/Factory.algo.ts:4","pc":[529,530,531,532,533,534]},{"teal":525,"source":"contracts/Factory.algo.ts:4","pc":[535,536,537,538,539,540]},{"teal":526,"source":"contracts/Factory.algo.ts:4","pc":[541,542,543]},{"teal":527,"source":"contracts/Factory.algo.ts:4","pc":[544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559]},{"teal":530,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[560]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFAQYABAgmAxVwb29sX2FwcHJvdmFsX3Byb2dyYW0HbWFuYWdlcgS4RHs2MRgUIwsxGQiNDAGkAAAAAAAAAAAAAAGWAAAAAAAAAAAAAACIAAIiQ4oAACk2MgByB0hniYgAAiJDigAAsSOyECSyGSi+RLIegAEKsh8isjSBArI1gQOyOCqyGoGgjQayAbOJgAQVH3x1NhoDVwIANhoCVwIANhoBF4gABRZQsCJDigMBsSOyEIAE5jX9tbIai/+yGIv+SRUhBAoWVwYCTFCyGov9SRUhBAoWVwYCTFCyGiSyAbO0OyIJxTpXBAAXiTEWIglJOBAlEkQ2GgIXNhoBF4gAAiJDigMAsSOyEIAEq99+FbIai/+yGIv+FrIai/04EhayGov9OACyGiSyAbOJNhoBF4gAAiJDigEAsSOyEIAEw18PGbIai/+yGDEAshoksgGziTEWIglJOBAlEkQ2GgMXNhoCFzYaAReIAAIiQ4oEALEjshCABASqXH6yGov/shgxALIai/4WshqL/RayGov8OBIWshoksgGziTYaAReIAAIiQ4oBAIgAMCi9TEhBAAcoi//TQgAFKIv/uUiJNhoCVwIANhoBF4gAAiJDigIAiAAHKIv/i/67iYoAADEAKWQSRIkxG0H+Zio2GgCOAf5eAIAEQliOCYAEoeswIIAEea0piIAEmbQIFoAE7F/qQ4AECZ5c/YAEpLUDwTYaAI4H/jH+YP6+/v//JP9s/48A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,axfer)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      /**
       * the index
       */
      index: bigint | number
      /**
       * transfer tx of the token, receiver must be the pool account
       */
      transferTxn: AppMethodCallTransactionArgument
    }
    'computeLiquidity(uint64)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
    }
    'swap(uint64,uint64,uint64,axfer)void': {
      poolId: bigint | number
      from: bigint | number
      to: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,axfer)void': [poolId: bigint | number, index: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'computeLiquidity(uint64)void': [poolId: bigint | number]
    'swap(uint64,uint64,uint64,axfer)void': [poolId: bigint | number, from: bigint | number, to: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,axfer)void': void
  'computeLiquidity(uint64)void': void
  'swap(uint64,uint64,uint64,axfer)void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer)void' | 'addLiquidity', {
      argsObj: FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']
      returns: FactoryReturns['addLiquidity(uint64,uint64,axfer)void']
    }>
    & Record<'computeLiquidity(uint64)void' | 'computeLiquidity', {
      argsObj: FactoryArgs['obj']['computeLiquidity(uint64)void']
      argsTuple: FactoryArgs['tuple']['computeLiquidity(uint64)void']
      returns: FactoryReturns['computeLiquidity(uint64)void']
    }>
    & Record<'swap(uint64,uint64,uint64,axfer)void' | 'swap', {
      argsObj: FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']
      returns: FactoryReturns['swap(uint64,uint64,uint64,axfer)void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer)void ABI method
   *
   * Add one token as liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.index, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the computeLiquidity(uint64)void ABI method
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static computeLiquidity(params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'computeLiquidity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.from, params.args.to, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    computeLiquidity: (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.computeLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    computeLiquidity: (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.computeLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['addLiquidity(uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `computeLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    computeLiquidity: async (params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.computeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['computeLiquidity(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['swap(uint64,uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer)void method call against the Factory contract
       */
      addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a computeLiquidity(uint64)void method call against the Factory contract
       */
      computeLiquidity(params: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.computeLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64,uint64,axfer)void method call against the Factory contract
       */
      swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer)void ABI method.
   *
   * Add one token as liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['addLiquidity(uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the computeLiquidity(uint64)void ABI method.
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeLiquidity(params?: CallParams<FactoryArgs['obj']['computeLiquidity(uint64)void'] | FactoryArgs['tuple']['computeLiquidity(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['computeLiquidity(uint64)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['swap(uint64,uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

