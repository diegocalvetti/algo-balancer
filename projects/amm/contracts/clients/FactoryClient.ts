/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"Add one token as liquidity to the pool","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"index","type":"uint64","desc":"the index"},{"name":"transferTxn","type":"axfer","desc":"transfer tx of the token, receiver must be the pool account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getLiquidity","desc":"Compute the liquidity for the sender and send the expected LP","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"burnLiquidity","args":[{"name":"poolID","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"poolID","type":"uint64"},{"name":"from","type":"uint64"},{"name":"to","type":"uint64"},{"name":"transferTxn","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"opUp","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","desc":"*******************","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{"poolContractApprovalProgram":{"key":"cG9vbF9hcHByb3ZhbF9wcm9ncmFt","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:4","pc":[1,2,3,4,5,6,7,8]},{"teal":3,"source":"contracts/Factory.algo.ts:4","pc":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]},{"teal":15,"source":"contracts/Factory.algo.ts:4","pc":[46,47]},{"teal":16,"source":"contracts/Factory.algo.ts:4","pc":[48]},{"teal":17,"source":"contracts/Factory.algo.ts:4","pc":[49]},{"teal":18,"source":"contracts/Factory.algo.ts:4","pc":[50]},{"teal":19,"source":"contracts/Factory.algo.ts:4","pc":[51,52]},{"teal":20,"source":"contracts/Factory.algo.ts:4","pc":[53]},{"teal":21,"source":"contracts/Factory.algo.ts:4","pc":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]},{"teal":25,"source":"contracts/Factory.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[80]},{"teal":30,"source":"contracts/Factory.algo.ts:12","pc":[81,82,83]},{"teal":31,"source":"contracts/Factory.algo.ts:12","pc":[84]},{"teal":32,"source":"contracts/Factory.algo.ts:12","pc":[85]},{"teal":38,"source":"contracts/Factory.algo.ts:12","pc":[86,87,88]},{"teal":42,"source":"contracts/Factory.algo.ts:14","pc":[89]},{"teal":43,"source":"contracts/Factory.algo.ts:14","pc":[90,91,92]},{"teal":44,"source":"contracts/Factory.algo.ts:14","pc":[93,94]},{"teal":45,"source":"contracts/Factory.algo.ts:14","pc":[95]},{"teal":46,"source":"contracts/Factory.algo.ts:14","pc":[96]},{"teal":47,"source":"contracts/Factory.algo.ts:12","pc":[97]},{"teal":52,"source":"contracts/Factory.algo.ts:21","pc":[98,99,100]},{"teal":53,"source":"contracts/Factory.algo.ts:21","pc":[101]},{"teal":54,"source":"contracts/Factory.algo.ts:21","pc":[102]},{"teal":61,"source":"contracts/Factory.algo.ts:21","pc":[103,104,105]},{"teal":74,"source":"contracts/Factory.algo.ts:22","pc":[106]},{"teal":75,"source":"contracts/Factory.algo.ts:22","pc":[107]},{"teal":76,"source":"contracts/Factory.algo.ts:22","pc":[108,109]},{"teal":80,"source":"contracts/Factory.algo.ts:23","pc":[110]},{"teal":81,"source":"contracts/Factory.algo.ts:23","pc":[111,112]},{"teal":85,"source":"contracts/Factory.algo.ts:24","pc":[113]},{"teal":86,"source":"contracts/Factory.algo.ts:24","pc":[114]},{"teal":89,"source":"contracts/Factory.algo.ts:24","errorMessage":"box value does not exist: this.poolContractApprovalProgram.value","pc":[115]},{"teal":90,"source":"contracts/Factory.algo.ts:24","pc":[116,117]},{"teal":94,"source":"contracts/Factory.algo.ts:25","pc":[118,119,120]},{"teal":95,"source":"contracts/Factory.algo.ts:25","pc":[121,122]},{"teal":99,"source":"contracts/Factory.algo.ts:26","pc":[123,124]},{"teal":100,"source":"contracts/Factory.algo.ts:26","pc":[125,126]},{"teal":104,"source":"contracts/Factory.algo.ts:27","pc":[127,128]},{"teal":105,"source":"contracts/Factory.algo.ts:27","pc":[129,130]},{"teal":109,"source":"contracts/Factory.algo.ts:28","pc":[131,132]},{"teal":110,"source":"contracts/Factory.algo.ts:28","pc":[133,134]},{"teal":114,"source":"contracts/Factory.algo.ts:29","pc":[135]},{"teal":115,"source":"contracts/Factory.algo.ts:29","pc":[136,137]},{"teal":119,"source":"contracts/Factory.algo.ts:30","pc":[138,139,140,141]},{"teal":120,"source":"contracts/Factory.algo.ts:30","pc":[142,143]},{"teal":123,"source":"contracts/Factory.algo.ts:22","pc":[144]},{"teal":124,"source":"contracts/Factory.algo.ts:21","pc":[145]},{"teal":129,"source":"contracts/Factory.algo.ts:40","pc":[146,147,148,149,150,151]},{"teal":132,"source":"contracts/Factory.algo.ts:40","pc":[152,153,154]},{"teal":133,"source":"contracts/Factory.algo.ts:40","pc":[155,156,157]},{"teal":136,"source":"contracts/Factory.algo.ts:40","pc":[158,159,160]},{"teal":137,"source":"contracts/Factory.algo.ts:40","pc":[161,162,163]},{"teal":140,"source":"contracts/Factory.algo.ts:40","pc":[164,165,166]},{"teal":141,"source":"contracts/Factory.algo.ts:40","pc":[167]},{"teal":144,"source":"contracts/Factory.algo.ts:40","pc":[168,169,170]},{"teal":145,"source":"contracts/Factory.algo.ts:40","pc":[171]},{"teal":146,"source":"contracts/Factory.algo.ts:40","pc":[172]},{"teal":147,"source":"contracts/Factory.algo.ts:40","pc":[173]},{"teal":148,"source":"contracts/Factory.algo.ts:40","pc":[174]},{"teal":149,"source":"contracts/Factory.algo.ts:40","pc":[175]},{"teal":158,"source":"contracts/Factory.algo.ts:40","pc":[176,177,178]},{"teal":165,"source":"contracts/Factory.algo.ts:41","pc":[179]},{"teal":166,"source":"contracts/Factory.algo.ts:41","pc":[180]},{"teal":167,"source":"contracts/Factory.algo.ts:41","pc":[181,182]},{"teal":168,"source":"contracts/Factory.algo.ts:41","pc":[183,184,185,186,187,188]},{"teal":169,"source":"contracts/Factory.algo.ts:41","pc":[189,190]},{"teal":173,"source":"contracts/Factory.algo.ts:42","pc":[191,192]},{"teal":174,"source":"contracts/Factory.algo.ts:42","pc":[193,194]},{"teal":178,"source":"contracts/Factory.algo.ts:43","pc":[195,196]},{"teal":179,"source":"contracts/Factory.algo.ts:43","pc":[197]},{"teal":180,"source":"contracts/Factory.algo.ts:43","pc":[198]},{"teal":181,"source":"contracts/Factory.algo.ts:43","pc":[199,200]},{"teal":182,"source":"contracts/Factory.algo.ts:43","pc":[201]},{"teal":183,"source":"contracts/Factory.algo.ts:43","pc":[202]},{"teal":184,"source":"contracts/Factory.algo.ts:43","pc":[203,204,205]},{"teal":185,"source":"contracts/Factory.algo.ts:43","pc":[206]},{"teal":186,"source":"contracts/Factory.algo.ts:43","pc":[207]},{"teal":187,"source":"contracts/Factory.algo.ts:43","pc":[208,209]},{"teal":188,"source":"contracts/Factory.algo.ts:43","pc":[210,211]},{"teal":189,"source":"contracts/Factory.algo.ts:43","pc":[212]},{"teal":190,"source":"contracts/Factory.algo.ts:43","pc":[213]},{"teal":191,"source":"contracts/Factory.algo.ts:43","pc":[214,215]},{"teal":192,"source":"contracts/Factory.algo.ts:43","pc":[216]},{"teal":193,"source":"contracts/Factory.algo.ts:43","pc":[217]},{"teal":194,"source":"contracts/Factory.algo.ts:43","pc":[218,219,220]},{"teal":195,"source":"contracts/Factory.algo.ts:43","pc":[221]},{"teal":196,"source":"contracts/Factory.algo.ts:43","pc":[222]},{"teal":197,"source":"contracts/Factory.algo.ts:43","pc":[223,224]},{"teal":200,"source":"contracts/Factory.algo.ts:41","pc":[225]},{"teal":201,"source":"contracts/Factory.algo.ts:41","pc":[226,227]},{"teal":204,"source":"contracts/Factory.algo.ts:41","pc":[228]},{"teal":205,"source":"contracts/Factory.algo.ts:41","pc":[229,230]},{"teal":206,"source":"contracts/Factory.algo.ts:41","pc":[231]},{"teal":207,"source":"contracts/Factory.algo.ts:41","pc":[232]},{"teal":208,"source":"contracts/Factory.algo.ts:41","pc":[233,234]},{"teal":209,"source":"contracts/Factory.algo.ts:41","pc":[235,236,237]},{"teal":210,"source":"contracts/Factory.algo.ts:41","pc":[238]},{"teal":211,"source":"contracts/Factory.algo.ts:40","pc":[239]},{"teal":216,"source":"contracts/Factory.algo.ts:53","pc":[240,241]},{"teal":217,"source":"contracts/Factory.algo.ts:53","pc":[242]},{"teal":218,"source":"contracts/Factory.algo.ts:53","pc":[243]},{"teal":219,"source":"contracts/Factory.algo.ts:53","pc":[244]},{"teal":220,"source":"contracts/Factory.algo.ts:53","pc":[245,246]},{"teal":221,"source":"contracts/Factory.algo.ts:53","pc":[247]},{"teal":222,"source":"contracts/Factory.algo.ts:53","pc":[248]},{"teal":225,"source":"contracts/Factory.algo.ts:53","errorMessage":"argument 0 (transferTxn) for addLiquidity must be a axfer transaction","pc":[249]},{"teal":228,"source":"contracts/Factory.algo.ts:53","pc":[250,251,252]},{"teal":229,"source":"contracts/Factory.algo.ts:53","pc":[253]},{"teal":232,"source":"contracts/Factory.algo.ts:53","pc":[254,255,256]},{"teal":233,"source":"contracts/Factory.algo.ts:53","pc":[257]},{"teal":236,"source":"contracts/Factory.algo.ts:53","pc":[258,259,260]},{"teal":237,"source":"contracts/Factory.algo.ts:53","pc":[261]},{"teal":238,"source":"contracts/Factory.algo.ts:53","pc":[262]},{"teal":247,"source":"contracts/Factory.algo.ts:53","pc":[263,264,265]},{"teal":254,"source":"contracts/Factory.algo.ts:54","pc":[266]},{"teal":255,"source":"contracts/Factory.algo.ts:54","pc":[267]},{"teal":256,"source":"contracts/Factory.algo.ts:54","pc":[268,269]},{"teal":257,"source":"contracts/Factory.algo.ts:54","pc":[270,271,272,273,274,275]},{"teal":258,"source":"contracts/Factory.algo.ts:54","pc":[276,277]},{"teal":262,"source":"contracts/Factory.algo.ts:55","pc":[278,279]},{"teal":263,"source":"contracts/Factory.algo.ts:55","pc":[280,281]},{"teal":267,"source":"contracts/Factory.algo.ts:56","pc":[282,283]},{"teal":268,"source":"contracts/Factory.algo.ts:56","pc":[284]},{"teal":269,"source":"contracts/Factory.algo.ts:56","pc":[285,286]},{"teal":270,"source":"contracts/Factory.algo.ts:56","pc":[287,288]},{"teal":271,"source":"contracts/Factory.algo.ts:56","pc":[289,290]},{"teal":272,"source":"contracts/Factory.algo.ts:56","pc":[291]},{"teal":273,"source":"contracts/Factory.algo.ts:56","pc":[292,293]},{"teal":274,"source":"contracts/Factory.algo.ts:56","pc":[294,295]},{"teal":275,"source":"contracts/Factory.algo.ts:56","pc":[296,297]},{"teal":276,"source":"contracts/Factory.algo.ts:56","pc":[298,299]},{"teal":279,"source":"contracts/Factory.algo.ts:54","pc":[300]},{"teal":280,"source":"contracts/Factory.algo.ts:54","pc":[301,302]},{"teal":283,"source":"contracts/Factory.algo.ts:54","pc":[303]},{"teal":284,"source":"contracts/Factory.algo.ts:53","pc":[304]},{"teal":289,"source":"contracts/Factory.algo.ts:64","pc":[305,306,307]},{"teal":290,"source":"contracts/Factory.algo.ts:64","pc":[308]},{"teal":293,"source":"contracts/Factory.algo.ts:64","pc":[309,310,311]},{"teal":294,"source":"contracts/Factory.algo.ts:64","pc":[312]},{"teal":295,"source":"contracts/Factory.algo.ts:64","pc":[313]},{"teal":302,"source":"contracts/Factory.algo.ts:64","pc":[314,315,316]},{"teal":309,"source":"contracts/Factory.algo.ts:65","pc":[317]},{"teal":310,"source":"contracts/Factory.algo.ts:65","pc":[318]},{"teal":311,"source":"contracts/Factory.algo.ts:65","pc":[319,320]},{"teal":312,"source":"contracts/Factory.algo.ts:65","pc":[321,322,323,324,325,326]},{"teal":313,"source":"contracts/Factory.algo.ts:65","pc":[327,328]},{"teal":317,"source":"contracts/Factory.algo.ts:66","pc":[329,330]},{"teal":318,"source":"contracts/Factory.algo.ts:66","pc":[331,332]},{"teal":322,"source":"contracts/Factory.algo.ts:67","pc":[333,334]},{"teal":323,"source":"contracts/Factory.algo.ts:67","pc":[335,336]},{"teal":326,"source":"contracts/Factory.algo.ts:65","pc":[337]},{"teal":327,"source":"contracts/Factory.algo.ts:65","pc":[338,339]},{"teal":330,"source":"contracts/Factory.algo.ts:65","pc":[340]},{"teal":331,"source":"contracts/Factory.algo.ts:64","pc":[341]},{"teal":336,"source":"contracts/Factory.algo.ts:71","pc":[342,343]},{"teal":337,"source":"contracts/Factory.algo.ts:71","pc":[344]},{"teal":338,"source":"contracts/Factory.algo.ts:71","pc":[345]},{"teal":339,"source":"contracts/Factory.algo.ts:71","pc":[346]},{"teal":340,"source":"contracts/Factory.algo.ts:71","pc":[347,348]},{"teal":341,"source":"contracts/Factory.algo.ts:71","pc":[349]},{"teal":342,"source":"contracts/Factory.algo.ts:71","pc":[350]},{"teal":345,"source":"contracts/Factory.algo.ts:71","errorMessage":"argument 0 (transferTxn) for burnLiquidity must be a axfer transaction","pc":[351]},{"teal":348,"source":"contracts/Factory.algo.ts:71","pc":[352,353,354]},{"teal":349,"source":"contracts/Factory.algo.ts:71","pc":[355]},{"teal":352,"source":"contracts/Factory.algo.ts:71","pc":[356,357,358]},{"teal":353,"source":"contracts/Factory.algo.ts:71","pc":[359]},{"teal":354,"source":"contracts/Factory.algo.ts:71","pc":[360]},{"teal":358,"source":"contracts/Factory.algo.ts:71","pc":[361,362,363]},{"teal":365,"source":"contracts/Factory.algo.ts:72","pc":[364]},{"teal":366,"source":"contracts/Factory.algo.ts:72","pc":[365]},{"teal":367,"source":"contracts/Factory.algo.ts:72","pc":[366,367]},{"teal":368,"source":"contracts/Factory.algo.ts:72","pc":[368,369,370,371,372,373]},{"teal":369,"source":"contracts/Factory.algo.ts:72","pc":[374,375]},{"teal":373,"source":"contracts/Factory.algo.ts:73","pc":[376,377]},{"teal":374,"source":"contracts/Factory.algo.ts:73","pc":[378,379]},{"teal":378,"source":"contracts/Factory.algo.ts:74","pc":[380,381]},{"teal":379,"source":"contracts/Factory.algo.ts:74","pc":[382,383]},{"teal":380,"source":"contracts/Factory.algo.ts:74","pc":[384,385]},{"teal":381,"source":"contracts/Factory.algo.ts:74","pc":[386,387]},{"teal":382,"source":"contracts/Factory.algo.ts:74","pc":[388]},{"teal":383,"source":"contracts/Factory.algo.ts:74","pc":[389,390]},{"teal":386,"source":"contracts/Factory.algo.ts:72","pc":[391]},{"teal":387,"source":"contracts/Factory.algo.ts:72","pc":[392,393]},{"teal":390,"source":"contracts/Factory.algo.ts:72","pc":[394]},{"teal":391,"source":"contracts/Factory.algo.ts:71","pc":[395]},{"teal":396,"source":"contracts/Factory.algo.ts:78","pc":[396,397]},{"teal":397,"source":"contracts/Factory.algo.ts:78","pc":[398]},{"teal":398,"source":"contracts/Factory.algo.ts:78","pc":[399]},{"teal":399,"source":"contracts/Factory.algo.ts:78","pc":[400]},{"teal":400,"source":"contracts/Factory.algo.ts:78","pc":[401,402]},{"teal":401,"source":"contracts/Factory.algo.ts:78","pc":[403]},{"teal":402,"source":"contracts/Factory.algo.ts:78","pc":[404]},{"teal":405,"source":"contracts/Factory.algo.ts:78","errorMessage":"argument 0 (transferTxn) for swap must be a axfer transaction","pc":[405]},{"teal":408,"source":"contracts/Factory.algo.ts:78","pc":[406,407,408]},{"teal":409,"source":"contracts/Factory.algo.ts:78","pc":[409]},{"teal":412,"source":"contracts/Factory.algo.ts:78","pc":[410,411,412]},{"teal":413,"source":"contracts/Factory.algo.ts:78","pc":[413]},{"teal":416,"source":"contracts/Factory.algo.ts:78","pc":[414,415,416]},{"teal":417,"source":"contracts/Factory.algo.ts:78","pc":[417]},{"teal":420,"source":"contracts/Factory.algo.ts:78","pc":[418,419,420]},{"teal":421,"source":"contracts/Factory.algo.ts:78","pc":[421]},{"teal":422,"source":"contracts/Factory.algo.ts:78","pc":[422]},{"teal":426,"source":"contracts/Factory.algo.ts:78","pc":[423,424,425]},{"teal":433,"source":"contracts/Factory.algo.ts:79","pc":[426]},{"teal":434,"source":"contracts/Factory.algo.ts:79","pc":[427]},{"teal":435,"source":"contracts/Factory.algo.ts:79","pc":[428,429]},{"teal":436,"source":"contracts/Factory.algo.ts:79","pc":[430,431,432,433,434,435]},{"teal":437,"source":"contracts/Factory.algo.ts:79","pc":[436,437]},{"teal":441,"source":"contracts/Factory.algo.ts:80","pc":[438,439]},{"teal":442,"source":"contracts/Factory.algo.ts:80","pc":[440,441]},{"teal":446,"source":"contracts/Factory.algo.ts:81","pc":[442,443]},{"teal":447,"source":"contracts/Factory.algo.ts:81","pc":[444,445]},{"teal":448,"source":"contracts/Factory.algo.ts:81","pc":[446,447]},{"teal":449,"source":"contracts/Factory.algo.ts:81","pc":[448]},{"teal":450,"source":"contracts/Factory.algo.ts:81","pc":[449,450]},{"teal":451,"source":"contracts/Factory.algo.ts:81","pc":[451,452]},{"teal":452,"source":"contracts/Factory.algo.ts:81","pc":[453]},{"teal":453,"source":"contracts/Factory.algo.ts:81","pc":[454,455]},{"teal":454,"source":"contracts/Factory.algo.ts:81","pc":[456,457]},{"teal":455,"source":"contracts/Factory.algo.ts:81","pc":[458,459]},{"teal":456,"source":"contracts/Factory.algo.ts:81","pc":[460]},{"teal":457,"source":"contracts/Factory.algo.ts:81","pc":[461,462]},{"teal":460,"source":"contracts/Factory.algo.ts:79","pc":[463]},{"teal":461,"source":"contracts/Factory.algo.ts:79","pc":[464,465]},{"teal":464,"source":"contracts/Factory.algo.ts:79","pc":[466]},{"teal":465,"source":"contracts/Factory.algo.ts:78","pc":[467]},{"teal":470,"source":"contracts/Factory.algo.ts:85","pc":[468,469,470]},{"teal":471,"source":"contracts/Factory.algo.ts:85","pc":[471]},{"teal":472,"source":"contracts/Factory.algo.ts:85","pc":[472]},{"teal":476,"source":"contracts/Factory.algo.ts:85","pc":[473,474,475]},{"teal":477,"source":"contracts/Factory.algo.ts:85","pc":[476]},{"teal":482,"source":"contracts/Factory.algo.ts:91","pc":[477,478,479]},{"teal":483,"source":"contracts/Factory.algo.ts:91","pc":[480]},{"teal":486,"source":"contracts/Factory.algo.ts:91","pc":[481,482,483]},{"teal":487,"source":"contracts/Factory.algo.ts:91","pc":[484]},{"teal":488,"source":"contracts/Factory.algo.ts:91","pc":[485]},{"teal":496,"source":"contracts/Factory.algo.ts:91","pc":[486,487,488]},{"teal":500,"source":"contracts/Factory.algo.ts:92","pc":[489,490,491]},{"teal":505,"source":"contracts/Factory.algo.ts:94","pc":[492]},{"teal":506,"source":"contracts/Factory.algo.ts:94","pc":[493]},{"teal":507,"source":"contracts/Factory.algo.ts:94","pc":[494]},{"teal":508,"source":"contracts/Factory.algo.ts:94","pc":[495]},{"teal":509,"source":"contracts/Factory.algo.ts:94","pc":[496,497,498]},{"teal":514,"source":"contracts/Factory.algo.ts:95","pc":[499]},{"teal":515,"source":"contracts/Factory.algo.ts:95","pc":[500,501]},{"teal":516,"source":"contracts/Factory.algo.ts:95","pc":[502]},{"teal":517,"source":"contracts/Factory.algo.ts:94","pc":[503,504,505]},{"teal":522,"source":"contracts/Factory.algo.ts:97","pc":[506]},{"teal":523,"source":"contracts/Factory.algo.ts:97","pc":[507,508]},{"teal":524,"source":"contracts/Factory.algo.ts:97","pc":[509]},{"teal":525,"source":"contracts/Factory.algo.ts:97","pc":[510]},{"teal":528,"source":"contracts/Factory.algo.ts:91","pc":[511]},{"teal":533,"source":"contracts/Factory.algo.ts:101","pc":[512,513,514]},{"teal":534,"source":"contracts/Factory.algo.ts:101","pc":[515,516,517]},{"teal":537,"source":"contracts/Factory.algo.ts:101","pc":[518,519,520]},{"teal":538,"source":"contracts/Factory.algo.ts:101","pc":[521]},{"teal":541,"source":"contracts/Factory.algo.ts:101","pc":[522,523,524]},{"teal":542,"source":"contracts/Factory.algo.ts:101","pc":[525]},{"teal":543,"source":"contracts/Factory.algo.ts:101","pc":[526]},{"teal":547,"source":"contracts/Factory.algo.ts:101","pc":[527,528,529]},{"teal":551,"source":"contracts/Factory.algo.ts:102","pc":[530,531,532]},{"teal":555,"source":"contracts/Factory.algo.ts:104","pc":[533]},{"teal":556,"source":"contracts/Factory.algo.ts:104","pc":[534,535]},{"teal":557,"source":"contracts/Factory.algo.ts:104","pc":[536,537]},{"teal":558,"source":"contracts/Factory.algo.ts:104","pc":[538]},{"teal":559,"source":"contracts/Factory.algo.ts:101","pc":[539]},{"teal":567,"source":"contracts/Factory.algo.ts:111","pc":[540,541,542]},{"teal":571,"source":"contracts/Factory.algo.ts:112","pc":[543,544]},{"teal":572,"source":"contracts/Factory.algo.ts:112","pc":[545]},{"teal":573,"source":"contracts/Factory.algo.ts:112","pc":[546]},{"teal":574,"source":"contracts/Factory.algo.ts:112","pc":[547]},{"teal":577,"source":"contracts/Factory.algo.ts:112","errorMessage":"only the manager can call this method","pc":[548]},{"teal":578,"source":"contracts/Factory.algo.ts:111","pc":[549]},{"teal":581,"source":"contracts/Factory.algo.ts:4","pc":[550,551]},{"teal":582,"source":"contracts/Factory.algo.ts:4","pc":[552,553,554]},{"teal":583,"source":"contracts/Factory.algo.ts:4","pc":[555]},{"teal":584,"source":"contracts/Factory.algo.ts:4","pc":[556,557,558]},{"teal":585,"source":"contracts/Factory.algo.ts:4","pc":[559,560,561,562]},{"teal":588,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[563]},{"teal":591,"source":"contracts/Factory.algo.ts:4","pc":[564,565,566,567,568,569]},{"teal":592,"source":"contracts/Factory.algo.ts:4","pc":[570,571,572,573,574,575]},{"teal":593,"source":"contracts/Factory.algo.ts:4","pc":[576,577,578,579,580,581]},{"teal":594,"source":"contracts/Factory.algo.ts:4","pc":[582,583,584,585,586,587]},{"teal":595,"source":"contracts/Factory.algo.ts:4","pc":[588,589,590,591,592,593]},{"teal":596,"source":"contracts/Factory.algo.ts:4","pc":[594,595,596,597,598,599]},{"teal":597,"source":"contracts/Factory.algo.ts:4","pc":[600,601,602,603,604,605]},{"teal":598,"source":"contracts/Factory.algo.ts:4","pc":[606,607,608,609,610,611]},{"teal":599,"source":"contracts/Factory.algo.ts:4","pc":[612,613,614,615,616,617]},{"teal":600,"source":"contracts/Factory.algo.ts:4","pc":[618,619,620]},{"teal":601,"source":"contracts/Factory.algo.ts:4","pc":[621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640]},{"teal":604,"source":"contracts/Factory.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[641]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDYgMCA0IDIgOApieXRlY2Jsb2NrIDB4NzA2ZjZmNmM1ZjYxNzA3MDcyNmY3NjYxNmM1ZjcwNzI2ZjY3NzI2MTZkIDB4NmQ2MTZlNjE2NzY1NzIgMHhiODQ0N2IzNgoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMgovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50YyAxIC8vIDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKLy8KLy8gY3JlYXRlQXBwbGljYXRpb24gbWV0aG9kIGNhbGxlZCBhdCBjcmVhdGlvbgpjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MTQKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IHRoaXMuYXBwLmNyZWF0b3IKCWJ5dGVjIDEgLy8gICJtYW5hZ2VyIgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjcmVhdGVQb29sKCl2b2lkCiphYmlfcm91dGVfY3JlYXRlUG9vbDoKCS8vIGV4ZWN1dGUgY3JlYXRlUG9vbCgpdm9pZAoJY2FsbHN1YiBjcmVhdGVQb29sCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVQb29sKCk6IHZvaWQKLy8KLy8gRGVwbG95IHRoZSBwb29sIGNvbnRyYWN0LCBjb21waWxlZCB0ZWFsIG9mIHRoZSBjb250cmFjdAovLyBtdXN0IGJlIGxvYWRlZCBpbiBwb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0KY3JlYXRlUG9vbDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MjIKCS8vIHNlbmRBcHBDYWxsKHsKCS8vICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLk5vT3AsCgkvLyAgICAgICBhcHByb3ZhbFByb2dyYW06IHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlLAoJLy8gICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IEJhbGFuY2VkUG9vbFYyLmNsZWFyUHJvZ3JhbSgpLAoJLy8gICAgICAgZ2xvYmFsTnVtVWludDogQmFsYW5jZWRQb29sVjIuc2NoZW1hLmdsb2JhbC5udW1VaW50LAoJLy8gICAgICAgZ2xvYmFsTnVtQnl0ZVNsaWNlOiBCYWxhbmNlZFBvb2xWMi5zY2hlbWEuZ2xvYmFsLm51bUJ5dGVTbGljZSwKCS8vICAgICAgIGV4dHJhUHJvZ3JhbVBhZ2VzOiAzLAoJLy8gICAgICAgYXBwbGljYXRpb25BcmdzOiBbbWV0aG9kKCdjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCcpXSwKCS8vICAgICAgIGZlZTogMTAwXzAwMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoyMwoJLy8gb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uTm9PcAoJaW50YyAyIC8vICBOb09wCglpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MjQKCS8vIGFwcHJvdmFsUHJvZ3JhbTogdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0udmFsdWUKCWJ5dGVjIDAgLy8gICJwb29sX2FwcHJvdmFsX3Byb2dyYW0iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS52YWx1ZQoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6MjUKCS8vIGNsZWFyU3RhdGVQcm9ncmFtOiBCYWxhbmNlZFBvb2xWMi5jbGVhclByb2dyYW0oKQoJcHVzaGJ5dGVzIDB4MGEKCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjI2CgkvLyBnbG9iYWxOdW1VaW50OiBCYWxhbmNlZFBvb2xWMi5zY2hlbWEuZ2xvYmFsLm51bVVpbnQKCWludGMgNCAvLyAyCglpdHhuX2ZpZWxkIEdsb2JhbE51bVVpbnQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjI3CgkvLyBnbG9iYWxOdW1CeXRlU2xpY2U6IEJhbGFuY2VkUG9vbFYyLnNjaGVtYS5nbG9iYWwubnVtQnl0ZVNsaWNlCglpbnRjIDQgLy8gMgoJaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjI4CgkvLyBleHRyYVByb2dyYW1QYWdlczogMwoJcHVzaGludCAzCglpdHhuX2ZpZWxkIEV4dHJhUHJvZ3JhbVBhZ2VzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoyOQoJLy8gYXBwbGljYXRpb25BcmdzOiBbbWV0aG9kKCdjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCcpXQoJYnl0ZWMgMiAvLyAgbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czozMAoJLy8gZmVlOiAxMDBfMDAwCglwdXNoaW50IDEwMF8wMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBpbml0UG9vbCh1aW50NjQsdWludDY0W10sdWludDY0W10pdWludDY0CiphYmlfcm91dGVfaW5pdFBvb2w6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCXB1c2hieXRlcyAweDE1MWY3Yzc1CgoJLy8gd2VpZ2h0czogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gYXNzZXRJZHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHBvb2xJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBpbml0UG9vbCh1aW50NjQsdWludDY0W10sdWludDY0W10pdWludDY0CgljYWxsc3ViIGluaXRQb29sCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaW5pdFBvb2wocG9vbElEOiBBcHBJRCwgYXNzZXRJZHM6IEFzc2V0SURbXSwgd2VpZ2h0czogdWludDY0W10pOiBBc3NldElECi8vCi8vIEluaXRpYWxpemUgdGhlIHBvb2wgd2l0aCB0aGUgZ2l2ZW4gYXNzZXRzICYgd2VpZ2h0cwovLyBAcGFyYW0ge0FwcElEfSBwb29sSUQgLSBQb29sIEFwcCBJRAovLyBAcGFyYW0ge0Fzc2V0SURbXX0gYXNzZXRJZHMKLy8gQHBhcmFtIHt1aW50NjRbXX0gd2VpZ2h0cwppbml0UG9vbDoKCXByb3RvIDMgMQoKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6NDEKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQmFsYW5jZWRQb29sVjIucHJvdG90eXBlLmJvb3RzdHJhcCwgQXNzZXRJRD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogcG9vbElELAoJLy8gICAgICAgbWV0aG9kQXJnczogW2Fzc2V0SWRzLCB3ZWlnaHRzXSwKCS8vICAgICB9KTsKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4ZTYzNWZkYjUgLy8gbWV0aG9kICJib290c3RyYXAodWludDY0W10sdWludDY0W10pdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjQyCgkvLyBhcHBsaWNhdGlvbklEOiBwb29sSUQKCWZyYW1lX2RpZyAtMSAvLyBwb29sSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjQzCgkvLyBtZXRob2RBcmdzOiBbYXNzZXRJZHMsIHdlaWdodHNdCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJZHM6IEFzc2V0SURbXQoJZHVwCglsZW4KCWludGMgNSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0zIC8vIHdlaWdodHM6IHVpbnQ2NFtdCglkdXAKCWxlbgoJaW50YyA1IC8vIDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDAgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglidG9pCglyZXRzdWIKCi8vIGFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGF4ZmVyKXZvaWQKKmFiaV9yb3V0ZV9hZGRMaXF1aWRpdHk6CgkvLyB0cmFuc2ZlclR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAzIC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwICh0cmFuc2ZlclR4bikgZm9yIGFkZExpcXVpZGl0eSBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBwb29sSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYWRkTGlxdWlkaXR5KHVpbnQ2NCx1aW50NjQsYXhmZXIpdm9pZAoJY2FsbHN1YiBhZGRMaXF1aWRpdHkKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFkZExpcXVpZGl0eShwb29sSUQ6IEFwcElELCBpbmRleDogdWludDY0LCB0cmFuc2ZlclR4bjogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKLy8KLy8gQWRkIG9uZSB0b2tlbiBhcyBsaXF1aWRpdHkgdG8gdGhlIHBvb2wKLy8gQHBhcmFtIHtBcHBJRH0gcG9vbElEIC0gUG9vbCBBcHAgSUQKLy8gQHBhcmFtIHt1aW50NjR9IGluZGV4IC0gdGhlIGluZGV4Ci8vIEBwYXJhbSB7QXNzZXRUcmFuc2ZlclR4bn0gdHJhbnNmZXJUeG4gLSB0cmFuc2ZlciB0eCBvZiB0aGUgdG9rZW4sIHJlY2VpdmVyIG11c3QgYmUgdGhlIHBvb2wgYWNjb3VudAphZGRMaXF1aWRpdHk6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjU0CgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQmFsYW5jZWRQb29sVjIucHJvdG90eXBlLmFkZExpcXVpZGl0eT4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogcG9vbElELAoJLy8gICAgICAgbWV0aG9kQXJnczogW2luZGV4LCB0cmFuc2ZlclR4bi5hc3NldEFtb3VudCwgdHJhbnNmZXJUeG4uc2VuZGVyXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHhhYmRmN2UxNSAvLyBtZXRob2QgImFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo1NQoJLy8gYXBwbGljYXRpb25JRDogcG9vbElECglmcmFtZV9kaWcgLTEgLy8gcG9vbElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo1NgoJLy8gbWV0aG9kQXJnczogW2luZGV4LCB0cmFuc2ZlclR4bi5hc3NldEFtb3VudCwgdHJhbnNmZXJUeG4uc2VuZGVyXQoJZnJhbWVfZGlnIC0yIC8vIGluZGV4OiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTMgLy8gdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0zIC8vIHRyYW5zZmVyVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBnZXRMaXF1aWRpdHkodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9nZXRMaXF1aWRpdHk6CgkvLyBwb29sSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZ2V0TGlxdWlkaXR5KHVpbnQ2NCl2b2lkCgljYWxsc3ViIGdldExpcXVpZGl0eQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2V0TGlxdWlkaXR5KHBvb2xJRDogQXBwSUQpOiB2b2lkCi8vCi8vIENvbXB1dGUgdGhlIGxpcXVpZGl0eSBmb3IgdGhlIHNlbmRlciBhbmQgc2VuZCB0aGUgZXhwZWN0ZWQgTFAKLy8gQHBhcmFtIHtBcHBJRH0gcG9vbElEIC0gUG9vbCBBcHAgSUQKZ2V0TGlxdWlkaXR5OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo2NQoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEJhbGFuY2VkUG9vbFYyLnByb3RvdHlwZS5nZXRMaXF1aWRpdHk+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHBvb2xJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXJdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweGRmYWI3MDYzIC8vIG1ldGhvZCAiZ2V0TGlxdWlkaXR5KGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo2NgoJLy8gYXBwbGljYXRpb25JRDogcG9vbElECglmcmFtZV9kaWcgLTEgLy8gcG9vbElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo2NwoJLy8gbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlcl0KCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBidXJuTGlxdWlkaXR5KHVpbnQ2NCxheGZlcil2b2lkCiphYmlfcm91dGVfYnVybkxpcXVpZGl0eToKCS8vIHRyYW5zZmVyVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDMgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHRyYW5zZmVyVHhuKSBmb3IgYnVybkxpcXVpZGl0eSBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHBvb2xJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBidXJuTGlxdWlkaXR5KHVpbnQ2NCxheGZlcil2b2lkCgljYWxsc3ViIGJ1cm5MaXF1aWRpdHkKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJ1cm5MaXF1aWRpdHkocG9vbElEOiBBcHBJRCwgdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkCmJ1cm5MaXF1aWRpdHk6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjcyCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQmFsYW5jZWRQb29sVjIucHJvdG90eXBlLmJ1cm5MaXF1aWRpdHk+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHBvb2xJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50XSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHgzZmIxZDA5YiAvLyBtZXRob2QgImJ1cm5MaXF1aWRpdHkoYWRkcmVzcyx1aW50NjQpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo3MwoJLy8gYXBwbGljYXRpb25JRDogcG9vbElECglmcmFtZV9kaWcgLTEgLy8gcG9vbElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo3NAoJLy8gbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlciwgdHJhbnNmZXJUeG4uYXNzZXRBbW91bnRdCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIHRyYW5zZmVyVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDIgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHN3YXAodWludDY0LHVpbnQ2NCx1aW50NjQsYXhmZXIpdm9pZAoqYWJpX3JvdXRlX3N3YXA6CgkvLyB0cmFuc2ZlclR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAzIC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwICh0cmFuc2ZlclR4bikgZm9yIHN3YXAgbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyB0bzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gZnJvbTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gcG9vbElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHN3YXAodWludDY0LHVpbnQ2NCx1aW50NjQsYXhmZXIpdm9pZAoJY2FsbHN1YiBzd2FwCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzd2FwKHBvb2xJRDogQXBwSUQsIGZyb206IHVpbnQ2NCwgdG86IHVpbnQ2NCwgdHJhbnNmZXJUeG46IEFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkCnN3YXA6Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHMvRmFjdG9yeS5hbGdvLnRzOjc5CgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQmFsYW5jZWRQb29sVjIucHJvdG90eXBlLnN3YXA+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHBvb2xJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIGZyb20sIHRvLCB0cmFuc2ZlclR4bi5hc3NldEFtb3VudF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4MDRhYTVjN2UgLy8gbWV0aG9kICJzd2FwKGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo4MAoJLy8gYXBwbGljYXRpb25JRDogcG9vbElECglmcmFtZV9kaWcgLTEgLy8gcG9vbElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo4MQoJLy8gbWV0aG9kQXJnczogW3RoaXMudHhuLnNlbmRlciwgZnJvbSwgdG8sIHRyYW5zZmVyVHhuLmFzc2V0QW1vdW50XQoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBmcm9tOiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTMgLy8gdG86IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtNCAvLyB0cmFuc2ZlclR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBvcFVwKCl2b2lkCiphYmlfcm91dGVfb3BVcDoKCS8vIGV4ZWN1dGUgb3BVcCgpdm9pZAoJY2FsbHN1YiBvcFVwCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBvcFVwKCk6IHZvaWQKb3BVcDoKCXByb3RvIDAgMAoJcmV0c3ViCgovLyBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW06CgkvLyBwcm9ncmFtU2l6ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0KXZvaWQKCWNhbGxzdWIgTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0ocHJvZ3JhbVNpemU6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gKioqKioqKioqKioqKioqKioqKgovLyBNQU5BR0VSCi8vICoqKioqKioqKioqKioqKioqKioKTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo5MgoJLy8gdGhpcy5hc3NlcnRJc01hbmFnZXIoKQoJY2FsbHN1YiBhc3NlcnRJc01hbmFnZXIKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo5NAoJLy8gdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0uZXhpc3RzCglieXRlYyAwIC8vICAicG9vbF9hcHByb3ZhbF9wcm9ncmFtIgoJYm94X2xlbgoJc3dhcAoJcG9wCglieiAqaWYwX2Vsc2UKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9GYWN0b3J5LmFsZ28udHM6OTUKCS8vIHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnJlc2l6ZShwcm9ncmFtU2l6ZSkKCWJ5dGVjIDAgLy8gICJwb29sX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJYm94X3Jlc2l6ZQoJYiAqaWYwX2VuZAoKKmlmMF9lbHNlOgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czo5NwoJLy8gdGhpcy5wb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0uY3JlYXRlKHByb2dyYW1TaXplKQoJYnl0ZWMgMCAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWZyYW1lX2RpZyAtMSAvLyBwcm9ncmFtU2l6ZTogdWludDY0Cglib3hfY3JlYXRlCglwb3AKCippZjBfZW5kOgoJcmV0c3ViCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQsYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCS8vIGRhdGE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBvZmZzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkCgljYWxsc3ViIE1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbShvZmZzZXQ6IHVpbnQ2NCwgZGF0YTogYnl0ZXMpOiB2b2lkCk1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMDIKCS8vIHRoaXMuYXNzZXJ0SXNNYW5hZ2VyKCkKCWNhbGxzdWIgYXNzZXJ0SXNNYW5hZ2VyCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMDQKCS8vIHRoaXMucG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnJlcGxhY2Uob2Zmc2V0LCBkYXRhKQoJYnl0ZWMgMCAvLyAgInBvb2xfYXBwcm92YWxfcHJvZ3JhbSIKCWZyYW1lX2RpZyAtMSAvLyBvZmZzZXQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGRhdGE6IGJ5dGVzCglib3hfcmVwbGFjZQoJcmV0c3ViCgovLyBhc3NlcnRJc01hbmFnZXIoKTogdm9pZAovLwovLyAqKioqKioqKioqKioqKioqKioqCi8vIFNVQlJPVVRJTkVTCi8vICoqKioqKioqKioqKioqKioqKioKYXNzZXJ0SXNNYW5hZ2VyOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0ZhY3RvcnkuYWxnby50czoxMTIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSwgJ29ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgMSAvLyAgIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJdHhuIE51bUFwcEFyZ3MKCWJ6ICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWJ5dGVjIDIgLy8gIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg0MjU4OGUwOSAvLyBtZXRob2QgImNyZWF0ZVBvb2woKXZvaWQiCglwdXNoYnl0ZXMgMHhhMWViMzAyMCAvLyBtZXRob2QgImluaXRQb29sKHVpbnQ2NCx1aW50NjRbXSx1aW50NjRbXSl1aW50NjQiCglwdXNoYnl0ZXMgMHg3OWFkMjk4OCAvLyBtZXRob2QgImFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0LGF4ZmVyKXZvaWQiCglwdXNoYnl0ZXMgMHg5YmMwYWM1ZCAvLyBtZXRob2QgImdldExpcXVpZGl0eSh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGZjNjA5YmFlIC8vIG1ldGhvZCAiYnVybkxpcXVpZGl0eSh1aW50NjQsYXhmZXIpdm9pZCIKCXB1c2hieXRlcyAweGVjNWZlYTQzIC8vIG1ldGhvZCAic3dhcCh1aW50NjQsdWludDY0LHVpbnQ2NCxheGZlcil2b2lkIgoJcHVzaGJ5dGVzIDB4ODU0ZGVkZTAgLy8gbWV0aG9kICJvcFVwKCl2b2lkIgoJcHVzaGJ5dGVzIDB4MDk5ZTVjZmQgLy8gbWV0aG9kICJNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhhNGI1MDNjMSAvLyBtZXRob2QgIk1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCxieXRlW10pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlUG9vbCAqYWJpX3JvdXRlX2luaXRQb29sICphYmlfcm91dGVfYWRkTGlxdWlkaXR5ICphYmlfcm91dGVfZ2V0TGlxdWlkaXR5ICphYmlfcm91dGVfYnVybkxpcXVpZGl0eSAqYWJpX3JvdXRlX3N3YXAgKmFiaV9yb3V0ZV9vcFVwICphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtICphYmlfcm91dGVfTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQYABAIIJgMVcG9vbF9hcHByb3ZhbF9wcm9ncmFtB21hbmFnZXIEuER7NjEYFCMLMRkIjQwB5AAAAAAAAAAAAAAB1gAAAAAAAAAAAAAAiAACIkOKAAApNjIAcgdIZ4mIAAIiQ4oAALEjshAkshkovkSyHoABCrIfIQSyNCEEsjWBA7I4KrIagaCNBrIBs4mABBUffHU2GgNXAgA2GgJXAgA2GgEXiAAFFlCwIkOKAwGxI7IQgATmNf21shqL/7IYi/5JFSEFChZXBgJMULIai/1JFSEFChZXBgJMULIaJLIBs7Q7IgnFOlcEABeJMRYiCUk4ECUSRDYaAhc2GgEXiAACIkOKAwCxI7IQgASr334VshqL/7IYi/4WshqL/TgSFrIai/04ALIaJLIBs4k2GgEXiAACIkOKAQCxI7IQgATfq3BjshqL/7IYMQCyGiSyAbOJMRYiCUk4ECUSRDYaAReIAAIiQ4oCALEjshCABD+x0JuyGov/shgxALIai/44EhayGiSyAbOJMRYiCUk4ECUSRDYaAxc2GgIXNhoBF4gAAiJDigQAsSOyEIAEBKpcfrIai/+yGDEAshqL/hayGov9FrIai/w4EhayGiSyAbOJiAACIkOKAACJNhoBF4gAAiJDigEAiAAwKL1MSEEAByiL/9NCAAUoi/+5SIk2GgJXAgA2GgEXiAACIkOKAgCIAAcoi/+L/ruJigAAMQApZBJEiTEbQf4mKjYaAI4B/h4AgARCWI4JgASh6zAggAR5rSmIgASbwKxdgAT8YJuugATsX+pDgASFTe3ggAQJnlz9gASktQPBNhoAjgn94f4R/m/+sP7V/wv/U/9c/38A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'addLiquidity(uint64,uint64,axfer)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      /**
       * the index
       */
      index: bigint | number
      /**
       * transfer tx of the token, receiver must be the pool account
       */
      transferTxn: AppMethodCallTransactionArgument
    }
    'getLiquidity(uint64)void': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
    }
    'burnLiquidity(uint64,axfer)void': {
      poolId: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'swap(uint64,uint64,uint64,axfer)void': {
      poolId: bigint | number
      from: bigint | number
      to: bigint | number
      transferTxn: AppMethodCallTransactionArgument
    }
    'opUp()void': Record<string, never>
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'addLiquidity(uint64,uint64,axfer)void': [poolId: bigint | number, index: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'getLiquidity(uint64)void': [poolId: bigint | number]
    'burnLiquidity(uint64,axfer)void': [poolId: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'swap(uint64,uint64,uint64,axfer)void': [poolId: bigint | number, from: bigint | number, to: bigint | number, transferTxn: AppMethodCallTransactionArgument]
    'opUp()void': []
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'addLiquidity(uint64,uint64,axfer)void': void
  'getLiquidity(uint64)void': void
  'burnLiquidity(uint64,axfer)void': void
  'swap(uint64,uint64,uint64,axfer)void': void
  'opUp()void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer)void' | 'addLiquidity', {
      argsObj: FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']
      returns: FactoryReturns['addLiquidity(uint64,uint64,axfer)void']
    }>
    & Record<'getLiquidity(uint64)void' | 'getLiquidity', {
      argsObj: FactoryArgs['obj']['getLiquidity(uint64)void']
      argsTuple: FactoryArgs['tuple']['getLiquidity(uint64)void']
      returns: FactoryReturns['getLiquidity(uint64)void']
    }>
    & Record<'burnLiquidity(uint64,axfer)void' | 'burnLiquidity', {
      argsObj: FactoryArgs['obj']['burnLiquidity(uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']
      returns: FactoryReturns['burnLiquidity(uint64,axfer)void']
    }>
    & Record<'swap(uint64,uint64,uint64,axfer)void' | 'swap', {
      argsObj: FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void']
      argsTuple: FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']
      returns: FactoryReturns['swap(uint64,uint64,uint64,axfer)void']
    }>
    & Record<'opUp()void' | 'opUp', {
      argsObj: FactoryArgs['obj']['opUp()void']
      argsTuple: FactoryArgs['tuple']['opUp()void']
      returns: FactoryReturns['opUp()void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {
        poolContractApprovalProgram: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer)void ABI method
   *
   * Add one token as liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.index, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the getLiquidity(uint64)void ABI method
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLiquidity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the burnLiquidity(uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnLiquidity(uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.from, params.args.to, params.args.transferTxn],
    }
  }
  /**
   * Constructs a no op call for the opUp()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opUp()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLiquidity: (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnLiquidity: (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.burnLiquidity(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `addLiquidity(uint64,uint64,axfer)void` ABI method.
     *
     * Add one token as liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['addLiquidity(uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getLiquidity(uint64)void` ABI method.
     *
     * Compute the liquidity for the sender and send the expected LP
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLiquidity: async (params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getLiquidity(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `burnLiquidity(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnLiquidity: async (params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.burnLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['burnLiquidity(uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `swap(uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['swap(uint64,uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['opUp()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          poolContractApprovalProgram: new BinaryStateValue(result.poolContractApprovalProgram),
        }
      },
      /**
       * Get the current value of the poolContractApprovalProgram key in box state
       */
      poolContractApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("poolContractApprovalProgram")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer)void method call against the Factory contract
       */
      addLiquidity(params: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLiquidity(uint64)void method call against the Factory contract
       */
      getLiquidity(params: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnLiquidity(uint64,axfer)void method call against the Factory contract
       */
      burnLiquidity(params: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64,uint64,axfer)void method call against the Factory contract
       */
      swap(params: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opUp()void method call against the Factory contract
       */
      opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the Factory contract
       */
      managerUpdatePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer)void ABI method.
   *
   * Add one token as liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<FactoryArgs['obj']['addLiquidity(uint64,uint64,axfer)void'] | FactoryArgs['tuple']['addLiquidity(uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['addLiquidity(uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the getLiquidity(uint64)void ABI method.
   *
   * Compute the liquidity for the sender and send the expected LP
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLiquidity(params?: CallParams<FactoryArgs['obj']['getLiquidity(uint64)void'] | FactoryArgs['tuple']['getLiquidity(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['getLiquidity(uint64)void'] | undefined]>

  /**
   * Calls the burnLiquidity(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLiquidity(params?: CallParams<FactoryArgs['obj']['burnLiquidity(uint64,axfer)void'] | FactoryArgs['tuple']['burnLiquidity(uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['burnLiquidity(uint64,axfer)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<FactoryArgs['obj']['swap(uint64,uint64,uint64,axfer)void'] | FactoryArgs['tuple']['swap(uint64,uint64,uint64,axfer)void']>): FactoryComposer<[...TReturns, FactoryReturns['swap(uint64,uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the opUp()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']>): FactoryComposer<[...TReturns, FactoryReturns['opUp()void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | FactoryArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

