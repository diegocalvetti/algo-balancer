/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Factory","desc":"","methods":[{"name":"createApplication","desc":"createApplication method called at creation","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createPool","desc":"Deploy the pool contract, compiled teal of the contract\nmust be loaded in poolContractApprovalProgram","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initPool","desc":"Initialize the pool with the given assets & weights","args":[{"name":"poolID","type":"uint64","desc":"Pool App ID"},{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"opUp","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","desc":"*******************","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPool","readonly":true,"args":[{"name":"assetIds","type":"uint64[]"},{"name":"weights","type":"uint64[]"}],"returns":{"type":"(uint64,uint64[],uint64[])","struct":"Pool"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Pool":[{"name":"id","type":"uint64"},{"name":"assets","type":"uint64[]"},{"name":"weights","type":"uint64[]"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"poolContractApprovalProgram":{"keyType":"uint64","valueType":"AVMBytes","prefix":"pool_approval_program_page_"},"pools":{"keyType":"byte[32]","valueType":"Pool","prefix":"pools_"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Factory.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/Factory.algo.ts:10","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts/Factory.algo.ts:10","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65]},{"teal":15,"source":"contracts/Factory.algo.ts:10","pc":[66,67]},{"teal":16,"source":"contracts/Factory.algo.ts:10","pc":[68]},{"teal":17,"source":"contracts/Factory.algo.ts:10","pc":[69]},{"teal":18,"source":"contracts/Factory.algo.ts:10","pc":[70]},{"teal":19,"source":"contracts/Factory.algo.ts:10","pc":[71,72]},{"teal":20,"source":"contracts/Factory.algo.ts:10","pc":[73]},{"teal":21,"source":"contracts/Factory.algo.ts:10","pc":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]},{"teal":25,"source":"contracts/Factory.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[100]},{"teal":30,"source":"contracts/Factory.algo.ts:23","pc":[101,102,103]},{"teal":31,"source":"contracts/Factory.algo.ts:23","pc":[104]},{"teal":32,"source":"contracts/Factory.algo.ts:23","pc":[105]},{"teal":38,"source":"contracts/Factory.algo.ts:23","pc":[106,107,108]},{"teal":42,"source":"contracts/Factory.algo.ts:25","pc":[109]},{"teal":43,"source":"contracts/Factory.algo.ts:25","pc":[110,111,112]},{"teal":44,"source":"contracts/Factory.algo.ts:25","pc":[113,114]},{"teal":45,"source":"contracts/Factory.algo.ts:25","pc":[115]},{"teal":46,"source":"contracts/Factory.algo.ts:25","pc":[116]},{"teal":47,"source":"contracts/Factory.algo.ts:23","pc":[117]},{"teal":52,"source":"contracts/Factory.algo.ts:32","pc":[118,119,120]},{"teal":53,"source":"contracts/Factory.algo.ts:32","pc":[121]},{"teal":54,"source":"contracts/Factory.algo.ts:32","pc":[122]},{"teal":61,"source":"contracts/Factory.algo.ts:32","pc":[123,124,125]},{"teal":64,"source":"contracts/Factory.algo.ts:32","pc":[126]},{"teal":68,"source":"contracts/Factory.algo.ts:33","pc":[127]},{"teal":69,"source":"contracts/Factory.algo.ts:33","pc":[128,129]},{"teal":74,"source":"contracts/Factory.algo.ts:33","pc":[130,131]},{"teal":75,"source":"contracts/Factory.algo.ts:33","pc":[132]},{"teal":76,"source":"contracts/Factory.algo.ts:33","pc":[133]},{"teal":77,"source":"contracts/Factory.algo.ts:33","pc":[134,135,136]},{"teal":82,"source":"contracts/Factory.algo.ts:34","pc":[137]},{"teal":83,"source":"contracts/Factory.algo.ts:34","pc":[138,139]},{"teal":84,"source":"contracts/Factory.algo.ts:34","pc":[140]},{"teal":85,"source":"contracts/Factory.algo.ts:34","pc":[141]},{"teal":86,"source":"contracts/Factory.algo.ts:34","pc":[142]},{"teal":87,"source":"contracts/Factory.algo.ts:34","pc":[143]},{"teal":88,"source":"contracts/Factory.algo.ts:34","pc":[144]},{"teal":89,"source":"contracts/Factory.algo.ts:34","pc":[145]},{"teal":90,"source":"contracts/Factory.algo.ts:34","pc":[146,147,148]},{"teal":95,"source":"contracts/Factory.algo.ts:35","pc":[149]},{"teal":96,"source":"contracts/Factory.algo.ts:35","pc":[150,151]},{"teal":97,"source":"contracts/Factory.algo.ts:35","pc":[152]},{"teal":98,"source":"contracts/Factory.algo.ts:35","pc":[153]},{"teal":99,"source":"contracts/Factory.algo.ts:35","pc":[154]},{"teal":100,"source":"contracts/Factory.algo.ts:35","pc":[155]},{"teal":101,"source":"contracts/Factory.algo.ts:35","pc":[156]},{"teal":102,"source":"contracts/Factory.algo.ts:35","pc":[157]},{"teal":103,"source":"contracts/Factory.algo.ts:35","pc":[158]},{"teal":110,"source":"contracts/Factory.algo.ts:33","pc":[159,160]},{"teal":111,"source":"contracts/Factory.algo.ts:33","pc":[161]},{"teal":112,"source":"contracts/Factory.algo.ts:33","pc":[162]},{"teal":113,"source":"contracts/Factory.algo.ts:33","pc":[163,164]},{"teal":114,"source":"contracts/Factory.algo.ts:33","pc":[165,166,167]},{"teal":137,"source":"contracts/Factory.algo.ts:39","pc":[168]},{"teal":138,"source":"contracts/Factory.algo.ts:39","pc":[169]},{"teal":139,"source":"contracts/Factory.algo.ts:39","pc":[170,171]},{"teal":143,"source":"contracts/Factory.algo.ts:40","pc":[172]},{"teal":144,"source":"contracts/Factory.algo.ts:40","pc":[173,174]},{"teal":157,"source":"contracts/Factory.algo.ts:42","pc":[175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211]},{"teal":158,"source":"contracts/Factory.algo.ts:42","pc":[212]},{"teal":161,"source":"contracts/Factory.algo.ts:42","errorMessage":"box value does not exist: this.poolContractApprovalProgram(0).value","pc":[213]},{"teal":162,"source":"contracts/Factory.algo.ts:42","pc":[214,215]},{"teal":163,"source":"contracts/Factory.algo.ts:43","pc":[216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252]},{"teal":164,"source":"contracts/Factory.algo.ts:43","pc":[253]},{"teal":167,"source":"contracts/Factory.algo.ts:43","errorMessage":"box value does not exist: this.poolContractApprovalProgram(1).value","pc":[254]},{"teal":168,"source":"contracts/Factory.algo.ts:43","pc":[255,256]},{"teal":169,"source":"contracts/Factory.algo.ts:44","pc":[257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293]},{"teal":170,"source":"contracts/Factory.algo.ts:44","pc":[294]},{"teal":173,"source":"contracts/Factory.algo.ts:44","errorMessage":"box value does not exist: this.poolContractApprovalProgram(2).value","pc":[295]},{"teal":174,"source":"contracts/Factory.algo.ts:44","pc":[296,297]},{"teal":175,"source":"contracts/Factory.algo.ts:45","pc":[298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334]},{"teal":176,"source":"contracts/Factory.algo.ts:45","pc":[335]},{"teal":179,"source":"contracts/Factory.algo.ts:45","errorMessage":"box value does not exist: this.poolContractApprovalProgram(3).value","pc":[336]},{"teal":180,"source":"contracts/Factory.algo.ts:45","pc":[337,338]},{"teal":181,"source":"contracts/Factory.algo.ts:46","pc":[339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375]},{"teal":182,"source":"contracts/Factory.algo.ts:46","pc":[376]},{"teal":185,"source":"contracts/Factory.algo.ts:46","errorMessage":"box value does not exist: this.poolContractApprovalProgram(4).value","pc":[377]},{"teal":186,"source":"contracts/Factory.algo.ts:46","pc":[378,379]},{"teal":187,"source":"contracts/Factory.algo.ts:47","pc":[380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416]},{"teal":188,"source":"contracts/Factory.algo.ts:47","pc":[417]},{"teal":191,"source":"contracts/Factory.algo.ts:47","errorMessage":"box value does not exist: this.poolContractApprovalProgram(5).value","pc":[418]},{"teal":192,"source":"contracts/Factory.algo.ts:47","pc":[419,420]},{"teal":193,"source":"contracts/Factory.algo.ts:48","pc":[421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457]},{"teal":194,"source":"contracts/Factory.algo.ts:48","pc":[458]},{"teal":197,"source":"contracts/Factory.algo.ts:48","errorMessage":"box value does not exist: this.poolContractApprovalProgram(6).value","pc":[459]},{"teal":198,"source":"contracts/Factory.algo.ts:48","pc":[460,461]},{"teal":199,"source":"contracts/Factory.algo.ts:49","pc":[462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498]},{"teal":200,"source":"contracts/Factory.algo.ts:49","pc":[499]},{"teal":203,"source":"contracts/Factory.algo.ts:49","errorMessage":"box value does not exist: this.poolContractApprovalProgram(7).value","pc":[500]},{"teal":204,"source":"contracts/Factory.algo.ts:49","pc":[501,502]},{"teal":208,"source":"contracts/Factory.algo.ts:51","pc":[503,504,505]},{"teal":209,"source":"contracts/Factory.algo.ts:51","pc":[506,507]},{"teal":213,"source":"contracts/Factory.algo.ts:52","pc":[508,509]},{"teal":214,"source":"contracts/Factory.algo.ts:52","pc":[510,511]},{"teal":218,"source":"contracts/Factory.algo.ts:53","pc":[512,513]},{"teal":219,"source":"contracts/Factory.algo.ts:53","pc":[514,515]},{"teal":223,"source":"contracts/Factory.algo.ts:54","pc":[516,517]},{"teal":224,"source":"contracts/Factory.algo.ts:54","pc":[518,519]},{"teal":228,"source":"contracts/Factory.algo.ts:55","pc":[520,521]},{"teal":229,"source":"contracts/Factory.algo.ts:55","pc":[522,523]},{"teal":233,"source":"contracts/Factory.algo.ts:56","pc":[524,525,526,527]},{"teal":234,"source":"contracts/Factory.algo.ts:56","pc":[528,529]},{"teal":237,"source":"contracts/Factory.algo.ts:39","pc":[530]},{"teal":238,"source":"contracts/Factory.algo.ts:32","pc":[531]},{"teal":243,"source":"contracts/Factory.algo.ts:66","pc":[532,533]},{"teal":246,"source":"contracts/Factory.algo.ts:66","pc":[534,535,536]},{"teal":247,"source":"contracts/Factory.algo.ts:66","pc":[537,538,539]},{"teal":250,"source":"contracts/Factory.algo.ts:66","pc":[540,541,542]},{"teal":251,"source":"contracts/Factory.algo.ts:66","pc":[543,544,545]},{"teal":254,"source":"contracts/Factory.algo.ts:66","pc":[546,547,548]},{"teal":255,"source":"contracts/Factory.algo.ts:66","pc":[549]},{"teal":258,"source":"contracts/Factory.algo.ts:66","pc":[550,551,552]},{"teal":259,"source":"contracts/Factory.algo.ts:66","pc":[553]},{"teal":260,"source":"contracts/Factory.algo.ts:66","pc":[554]},{"teal":261,"source":"contracts/Factory.algo.ts:66","pc":[555]},{"teal":262,"source":"contracts/Factory.algo.ts:66","pc":[556]},{"teal":263,"source":"contracts/Factory.algo.ts:66","pc":[557]},{"teal":272,"source":"contracts/Factory.algo.ts:66","pc":[558,559,560]},{"teal":275,"source":"contracts/Factory.algo.ts:66","pc":[561]},{"teal":279,"source":"contracts/Factory.algo.ts:68","pc":[562,563]},{"teal":280,"source":"contracts/Factory.algo.ts:68","pc":[564]},{"teal":281,"source":"contracts/Factory.algo.ts:68","pc":[565]},{"teal":282,"source":"contracts/Factory.algo.ts:68","pc":[566]},{"teal":283,"source":"contracts/Factory.algo.ts:68","pc":[567,568]},{"teal":284,"source":"contracts/Factory.algo.ts:68","pc":[569]},{"teal":287,"source":"contracts/Factory.algo.ts:68","errorMessage":"At least 2 tokens needed","pc":[570]},{"teal":291,"source":"contracts/Factory.algo.ts:69","pc":[571,572]},{"teal":292,"source":"contracts/Factory.algo.ts:69","pc":[573]},{"teal":293,"source":"contracts/Factory.algo.ts:69","pc":[574]},{"teal":294,"source":"contracts/Factory.algo.ts:69","pc":[575]},{"teal":295,"source":"contracts/Factory.algo.ts:69","pc":[576,577]},{"teal":296,"source":"contracts/Factory.algo.ts:69","pc":[578]},{"teal":297,"source":"contracts/Factory.algo.ts:69","pc":[579]},{"teal":298,"source":"contracts/Factory.algo.ts:69","pc":[580]},{"teal":299,"source":"contracts/Factory.algo.ts:69","pc":[581]},{"teal":302,"source":"contracts/Factory.algo.ts:69","errorMessage":"Weights and Assets length must be the same","pc":[582]},{"teal":306,"source":"contracts/Factory.algo.ts:71","pc":[583,584]},{"teal":307,"source":"contracts/Factory.algo.ts:71","pc":[585,586]},{"teal":308,"source":"contracts/Factory.algo.ts:71","pc":[587,588,589]},{"teal":309,"source":"contracts/Factory.algo.ts:71","pc":[590,591]},{"teal":313,"source":"contracts/Factory.algo.ts:73","pc":[592]},{"teal":314,"source":"contracts/Factory.algo.ts:73","pc":[593,594]},{"teal":315,"source":"contracts/Factory.algo.ts:73","pc":[595]},{"teal":316,"source":"contracts/Factory.algo.ts:73","pc":[596]},{"teal":317,"source":"contracts/Factory.algo.ts:73","pc":[597]},{"teal":318,"source":"contracts/Factory.algo.ts:73","pc":[598]},{"teal":319,"source":"contracts/Factory.algo.ts:73","pc":[599]},{"teal":322,"source":"contracts/Factory.algo.ts:73","errorMessage":"This pool already exists","pc":[600]},{"teal":326,"source":"contracts/Factory.algo.ts:75","pc":[601]},{"teal":327,"source":"contracts/Factory.algo.ts:75","pc":[602,603]},{"teal":328,"source":"contracts/Factory.algo.ts:75","pc":[604]},{"teal":329,"source":"contracts/Factory.algo.ts:75","pc":[605]},{"teal":330,"source":"contracts/Factory.algo.ts:75","pc":[606]},{"teal":331,"source":"contracts/Factory.algo.ts:75","pc":[607]},{"teal":332,"source":"contracts/Factory.algo.ts:75","pc":[608]},{"teal":333,"source":"contracts/Factory.algo.ts:75","pc":[609]},{"teal":334,"source":"contracts/Factory.algo.ts:75","pc":[610,611,612,613]},{"teal":335,"source":"contracts/Factory.algo.ts:75","pc":[614,615]},{"teal":336,"source":"contracts/Factory.algo.ts:75","pc":[616]},{"teal":337,"source":"contracts/Factory.algo.ts:75","pc":[617,618,619]},{"teal":338,"source":"contracts/Factory.algo.ts:75","pc":[620,621]},{"teal":339,"source":"contracts/Factory.algo.ts:75","pc":[622]},{"teal":340,"source":"contracts/Factory.algo.ts:75","pc":[623]},{"teal":341,"source":"contracts/Factory.algo.ts:75","pc":[624]},{"teal":342,"source":"contracts/Factory.algo.ts:75","pc":[625]},{"teal":343,"source":"contracts/Factory.algo.ts:75","pc":[626]},{"teal":344,"source":"contracts/Factory.algo.ts:75","pc":[627,628,629]},{"teal":345,"source":"contracts/Factory.algo.ts:75","pc":[630]},{"teal":346,"source":"contracts/Factory.algo.ts:75","pc":[631]},{"teal":347,"source":"contracts/Factory.algo.ts:75","pc":[632,633,634]},{"teal":348,"source":"contracts/Factory.algo.ts:75","pc":[635,636]},{"teal":349,"source":"contracts/Factory.algo.ts:75","pc":[637]},{"teal":350,"source":"contracts/Factory.algo.ts:75","pc":[638]},{"teal":351,"source":"contracts/Factory.algo.ts:75","pc":[639]},{"teal":352,"source":"contracts/Factory.algo.ts:75","pc":[640]},{"teal":353,"source":"contracts/Factory.algo.ts:75","pc":[641]},{"teal":354,"source":"contracts/Factory.algo.ts:75","pc":[642,643,644]},{"teal":355,"source":"contracts/Factory.algo.ts:75","pc":[645]},{"teal":356,"source":"contracts/Factory.algo.ts:75","pc":[646]},{"teal":357,"source":"contracts/Factory.algo.ts:75","pc":[647,648,649]},{"teal":358,"source":"contracts/Factory.algo.ts:75","pc":[650]},{"teal":359,"source":"contracts/Factory.algo.ts:75","pc":[651]},{"teal":360,"source":"contracts/Factory.algo.ts:75","pc":[652]},{"teal":367,"source":"contracts/Factory.algo.ts:77","pc":[653]},{"teal":368,"source":"contracts/Factory.algo.ts:77","pc":[654]},{"teal":369,"source":"contracts/Factory.algo.ts:77","pc":[655,656]},{"teal":370,"source":"contracts/Factory.algo.ts:77","pc":[657,658,659,660,661,662]},{"teal":371,"source":"contracts/Factory.algo.ts:77","pc":[663,664]},{"teal":375,"source":"contracts/Factory.algo.ts:78","pc":[665,666]},{"teal":376,"source":"contracts/Factory.algo.ts:78","pc":[667,668]},{"teal":380,"source":"contracts/Factory.algo.ts:79","pc":[669,670]},{"teal":381,"source":"contracts/Factory.algo.ts:79","pc":[671]},{"teal":382,"source":"contracts/Factory.algo.ts:79","pc":[672]},{"teal":383,"source":"contracts/Factory.algo.ts:79","pc":[673]},{"teal":384,"source":"contracts/Factory.algo.ts:79","pc":[674]},{"teal":385,"source":"contracts/Factory.algo.ts:79","pc":[675]},{"teal":386,"source":"contracts/Factory.algo.ts:79","pc":[676,677,678]},{"teal":387,"source":"contracts/Factory.algo.ts:79","pc":[679]},{"teal":388,"source":"contracts/Factory.algo.ts:79","pc":[680]},{"teal":389,"source":"contracts/Factory.algo.ts:79","pc":[681,682]},{"teal":390,"source":"contracts/Factory.algo.ts:79","pc":[683,684]},{"teal":391,"source":"contracts/Factory.algo.ts:79","pc":[685]},{"teal":392,"source":"contracts/Factory.algo.ts:79","pc":[686]},{"teal":393,"source":"contracts/Factory.algo.ts:79","pc":[687]},{"teal":394,"source":"contracts/Factory.algo.ts:79","pc":[688]},{"teal":395,"source":"contracts/Factory.algo.ts:79","pc":[689]},{"teal":396,"source":"contracts/Factory.algo.ts:79","pc":[690,691,692]},{"teal":397,"source":"contracts/Factory.algo.ts:79","pc":[693]},{"teal":398,"source":"contracts/Factory.algo.ts:79","pc":[694]},{"teal":399,"source":"contracts/Factory.algo.ts:79","pc":[695,696]},{"teal":402,"source":"contracts/Factory.algo.ts:77","pc":[697]},{"teal":403,"source":"contracts/Factory.algo.ts:77","pc":[698,699]},{"teal":406,"source":"contracts/Factory.algo.ts:77","pc":[700]},{"teal":407,"source":"contracts/Factory.algo.ts:77","pc":[701,702]},{"teal":408,"source":"contracts/Factory.algo.ts:77","pc":[703]},{"teal":409,"source":"contracts/Factory.algo.ts:77","pc":[704]},{"teal":410,"source":"contracts/Factory.algo.ts:77","pc":[705,706]},{"teal":411,"source":"contracts/Factory.algo.ts:77","pc":[707,708,709]},{"teal":412,"source":"contracts/Factory.algo.ts:77","pc":[710]},{"teal":415,"source":"contracts/Factory.algo.ts:66","pc":[711,712]},{"teal":416,"source":"contracts/Factory.algo.ts:66","pc":[713]},{"teal":421,"source":"contracts/Factory.algo.ts:83","pc":[714,715,716]},{"teal":422,"source":"contracts/Factory.algo.ts:83","pc":[717]},{"teal":423,"source":"contracts/Factory.algo.ts:83","pc":[718]},{"teal":427,"source":"contracts/Factory.algo.ts:83","pc":[719,720,721]},{"teal":428,"source":"contracts/Factory.algo.ts:83","pc":[722]},{"teal":433,"source":"contracts/Factory.algo.ts:88","pc":[723,724,725]},{"teal":434,"source":"contracts/Factory.algo.ts:88","pc":[726,727,728]},{"teal":437,"source":"contracts/Factory.algo.ts:88","pc":[729,730,731]},{"teal":438,"source":"contracts/Factory.algo.ts:88","pc":[732]},{"teal":441,"source":"contracts/Factory.algo.ts:88","pc":[733,734,735]},{"teal":442,"source":"contracts/Factory.algo.ts:88","pc":[736]},{"teal":443,"source":"contracts/Factory.algo.ts:88","pc":[737]},{"teal":451,"source":"contracts/Factory.algo.ts:88","pc":[738,739,740]},{"teal":454,"source":"contracts/Factory.algo.ts:88","pc":[741]},{"teal":458,"source":"contracts/Factory.algo.ts:89","pc":[742,743,744]},{"teal":462,"source":"contracts/Factory.algo.ts:91","pc":[745,746]},{"teal":463,"source":"contracts/Factory.algo.ts:91","pc":[747,748]},{"teal":464,"source":"contracts/Factory.algo.ts:91","pc":[749]},{"teal":465,"source":"contracts/Factory.algo.ts:91","pc":[750]},{"teal":466,"source":"contracts/Factory.algo.ts:91","pc":[751]},{"teal":467,"source":"contracts/Factory.algo.ts:91","pc":[752,753]},{"teal":468,"source":"contracts/Factory.algo.ts:91","pc":[754]},{"teal":469,"source":"contracts/Factory.algo.ts:91","pc":[755,756]},{"teal":473,"source":"contracts/Factory.algo.ts:92","pc":[757]},{"teal":474,"source":"contracts/Factory.algo.ts:92","pc":[758,759]},{"teal":475,"source":"contracts/Factory.algo.ts:92","pc":[760]},{"teal":476,"source":"contracts/Factory.algo.ts:92","pc":[761]},{"teal":477,"source":"contracts/Factory.algo.ts:92","pc":[762]},{"teal":478,"source":"contracts/Factory.algo.ts:92","pc":[763]},{"teal":479,"source":"contracts/Factory.algo.ts:92","pc":[764]},{"teal":480,"source":"contracts/Factory.algo.ts:92","pc":[765,766]},{"teal":481,"source":"contracts/Factory.algo.ts:92","pc":[767]},{"teal":482,"source":"contracts/Factory.algo.ts:88","pc":[768]},{"teal":490,"source":"contracts/Factory.algo.ts:99","pc":[769,770,771]},{"teal":494,"source":"contracts/Factory.algo.ts:100","pc":[772,773]},{"teal":495,"source":"contracts/Factory.algo.ts:100","pc":[774]},{"teal":496,"source":"contracts/Factory.algo.ts:100","pc":[775]},{"teal":497,"source":"contracts/Factory.algo.ts:100","pc":[776]},{"teal":500,"source":"contracts/Factory.algo.ts:100","errorMessage":"only the manager can call this method","pc":[777]},{"teal":501,"source":"contracts/Factory.algo.ts:99","pc":[778]},{"teal":505,"source":"contracts/Factory.algo.ts:103","pc":[779,780,781]},{"teal":508,"source":"contracts/Factory.algo.ts:103","pc":[782]},{"teal":509,"source":"contracts/Factory.algo.ts:103","pc":[783]},{"teal":513,"source":"contracts/Factory.algo.ts:104","pc":[784]},{"teal":514,"source":"contracts/Factory.algo.ts:104","pc":[785,786]},{"teal":518,"source":"contracts/Factory.algo.ts:106","pc":[787]},{"teal":519,"source":"contracts/Factory.algo.ts:106","pc":[788,789]},{"teal":524,"source":"contracts/Factory.algo.ts:106","pc":[790,791]},{"teal":525,"source":"contracts/Factory.algo.ts:106","pc":[792,793]},{"teal":526,"source":"contracts/Factory.algo.ts:106","pc":[794]},{"teal":527,"source":"contracts/Factory.algo.ts:106","pc":[795]},{"teal":528,"source":"contracts/Factory.algo.ts:106","pc":[796]},{"teal":529,"source":"contracts/Factory.algo.ts:106","pc":[797]},{"teal":530,"source":"contracts/Factory.algo.ts:106","pc":[798,799,800]},{"teal":534,"source":"contracts/Factory.algo.ts:107","pc":[801,802]},{"teal":535,"source":"contracts/Factory.algo.ts:107","pc":[803,804]},{"teal":536,"source":"contracts/Factory.algo.ts:107","pc":[805,806]},{"teal":537,"source":"contracts/Factory.algo.ts:107","pc":[807]},{"teal":538,"source":"contracts/Factory.algo.ts:107","pc":[808,809]},{"teal":539,"source":"contracts/Factory.algo.ts:107","pc":[810]},{"teal":540,"source":"contracts/Factory.algo.ts:107","pc":[811]},{"teal":541,"source":"contracts/Factory.algo.ts:107","pc":[812]},{"teal":542,"source":"contracts/Factory.algo.ts:107","pc":[813,814]},{"teal":543,"source":"contracts/Factory.algo.ts:107","pc":[815]},{"teal":544,"source":"contracts/Factory.algo.ts:107","pc":[816]},{"teal":545,"source":"contracts/Factory.algo.ts:107","pc":[817]},{"teal":546,"source":"contracts/Factory.algo.ts:107","pc":[818]},{"teal":547,"source":"contracts/Factory.algo.ts:107","pc":[819]},{"teal":548,"source":"contracts/Factory.algo.ts:107","pc":[820]},{"teal":549,"source":"contracts/Factory.algo.ts:107","pc":[821,822]},{"teal":553,"source":"contracts/Factory.algo.ts:108","pc":[823,824]},{"teal":554,"source":"contracts/Factory.algo.ts:108","pc":[825,826]},{"teal":555,"source":"contracts/Factory.algo.ts:108","pc":[827,828]},{"teal":556,"source":"contracts/Factory.algo.ts:108","pc":[829]},{"teal":557,"source":"contracts/Factory.algo.ts:108","pc":[830,831]},{"teal":558,"source":"contracts/Factory.algo.ts:108","pc":[832]},{"teal":559,"source":"contracts/Factory.algo.ts:108","pc":[833]},{"teal":560,"source":"contracts/Factory.algo.ts:108","pc":[834]},{"teal":561,"source":"contracts/Factory.algo.ts:108","pc":[835,836]},{"teal":562,"source":"contracts/Factory.algo.ts:108","pc":[837]},{"teal":563,"source":"contracts/Factory.algo.ts:108","pc":[838]},{"teal":564,"source":"contracts/Factory.algo.ts:108","pc":[839]},{"teal":565,"source":"contracts/Factory.algo.ts:108","pc":[840]},{"teal":566,"source":"contracts/Factory.algo.ts:108","pc":[841]},{"teal":567,"source":"contracts/Factory.algo.ts:108","pc":[842]},{"teal":568,"source":"contracts/Factory.algo.ts:108","pc":[843,844]},{"teal":573,"source":"contracts/Factory.algo.ts:106","pc":[845,846]},{"teal":574,"source":"contracts/Factory.algo.ts:106","pc":[847]},{"teal":575,"source":"contracts/Factory.algo.ts:106","pc":[848]},{"teal":576,"source":"contracts/Factory.algo.ts:106","pc":[849,850]},{"teal":577,"source":"contracts/Factory.algo.ts:106","pc":[851,852,853]},{"teal":582,"source":"contracts/Factory.algo.ts:111","pc":[854,855]},{"teal":583,"source":"contracts/Factory.algo.ts:111","pc":[856]},{"teal":586,"source":"contracts/Factory.algo.ts:103","pc":[857,858]},{"teal":589,"source":"contracts/Factory.algo.ts:103","pc":[859,860]},{"teal":590,"source":"contracts/Factory.algo.ts:103","pc":[861]},{"teal":594,"source":"contracts/Factory.algo.ts:114","pc":[862,863,864]},{"teal":598,"source":"contracts/Factory.algo.ts:115","pc":[865,866]},{"teal":599,"source":"contracts/Factory.algo.ts:115","pc":[867,868]},{"teal":600,"source":"contracts/Factory.algo.ts:115","pc":[869]},{"teal":601,"source":"contracts/Factory.algo.ts:115","pc":[870,871,872]},{"teal":602,"source":"contracts/Factory.algo.ts:115","pc":[873,874]},{"teal":603,"source":"contracts/Factory.algo.ts:115","pc":[875,876,877]},{"teal":606,"source":"contracts/Factory.algo.ts:115","pc":[878,879]},{"teal":609,"source":"contracts/Factory.algo.ts:114","pc":[880]},{"teal":614,"source":"contracts/Factory.algo.ts:118","pc":[881,882]},{"teal":617,"source":"contracts/Factory.algo.ts:119","pc":[883,884,885]},{"teal":618,"source":"contracts/Factory.algo.ts:119","pc":[886,887,888]},{"teal":621,"source":"contracts/Factory.algo.ts:119","pc":[889,890,891]},{"teal":622,"source":"contracts/Factory.algo.ts:119","pc":[892,893,894]},{"teal":625,"source":"contracts/Factory.algo.ts:118","pc":[895,896,897]},{"teal":626,"source":"contracts/Factory.algo.ts:118","pc":[898]},{"teal":627,"source":"contracts/Factory.algo.ts:118","pc":[899]},{"teal":628,"source":"contracts/Factory.algo.ts:118","pc":[900]},{"teal":629,"source":"contracts/Factory.algo.ts:118","pc":[901]},{"teal":633,"source":"contracts/Factory.algo.ts:118","pc":[902,903,904]},{"teal":636,"source":"contracts/Factory.algo.ts:118","pc":[905]},{"teal":640,"source":"contracts/Factory.algo.ts:120","pc":[906,907]},{"teal":641,"source":"contracts/Factory.algo.ts:120","pc":[908,909]},{"teal":642,"source":"contracts/Factory.algo.ts:120","pc":[910,911,912]},{"teal":643,"source":"contracts/Factory.algo.ts:120","pc":[913,914]},{"teal":647,"source":"contracts/Factory.algo.ts:121","pc":[915]},{"teal":648,"source":"contracts/Factory.algo.ts:121","pc":[916,917]},{"teal":649,"source":"contracts/Factory.algo.ts:121","pc":[918]},{"teal":650,"source":"contracts/Factory.algo.ts:121","pc":[919]},{"teal":653,"source":"contracts/Factory.algo.ts:121","errorMessage":"box value does not exist: this.pools(hash).value","pc":[920]},{"teal":656,"source":"contracts/Factory.algo.ts:118","pc":[921,922]},{"teal":657,"source":"contracts/Factory.algo.ts:118","pc":[923]},{"teal":660,"source":"contracts/Factory.algo.ts:10","pc":[924,925]},{"teal":661,"source":"contracts/Factory.algo.ts:10","pc":[926,927,928]},{"teal":662,"source":"contracts/Factory.algo.ts:10","pc":[929,930]},{"teal":663,"source":"contracts/Factory.algo.ts:10","pc":[931,932,933]},{"teal":664,"source":"contracts/Factory.algo.ts:10","pc":[934,935,936,937]},{"teal":667,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[938]},{"teal":670,"source":"contracts/Factory.algo.ts:10","pc":[939,940,941,942,943,944]},{"teal":671,"source":"contracts/Factory.algo.ts:10","pc":[945,946,947,948,949,950]},{"teal":672,"source":"contracts/Factory.algo.ts:10","pc":[951,952,953,954,955,956]},{"teal":673,"source":"contracts/Factory.algo.ts:10","pc":[957,958,959,960,961,962]},{"teal":674,"source":"contracts/Factory.algo.ts:10","pc":[963,964,965,966,967,968]},{"teal":675,"source":"contracts/Factory.algo.ts:10","pc":[969,970,971]},{"teal":676,"source":"contracts/Factory.algo.ts:10","pc":[972,973,974,975,976,977,978,979,980,981,982,983]},{"teal":679,"source":"contracts/Factory.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[984]},{"teal":682,"source":"contracts/Factory.algo.ts:10","pc":[985,986,987]},{"teal":683,"source":"contracts/Factory.algo.ts:10","pc":[988,989]},{"teal":684,"source":"contracts/Factory.algo.ts:10","pc":[990,991]},{"teal":685,"source":"contracts/Factory.algo.ts:10","pc":[992]},{"teal":686,"source":"contracts/Factory.algo.ts:10","pc":[993,994]},{"teal":687,"source":"contracts/Factory.algo.ts:10","pc":[995,996]},{"teal":688,"source":"contracts/Factory.algo.ts:10","pc":[997]},{"teal":691,"source":"contracts/Factory.algo.ts:10","pc":[998,999,1000]},{"teal":692,"source":"contracts/Factory.algo.ts:10","pc":[1001,1002]},{"teal":693,"source":"contracts/Factory.algo.ts:10","pc":[1003,1004]},{"teal":694,"source":"contracts/Factory.algo.ts:10","pc":[1005]},{"teal":695,"source":"contracts/Factory.algo.ts:10","pc":[1006,1007]},{"teal":696,"source":"contracts/Factory.algo.ts:10","pc":[1008,1009]},{"teal":697,"source":"contracts/Factory.algo.ts:10","pc":[1010]},{"teal":698,"source":"contracts/Factory.algo.ts:10","pc":[1011]},{"teal":699,"source":"contracts/Factory.algo.ts:10","pc":[1012,1013]},{"teal":700,"source":"contracts/Factory.algo.ts:10","pc":[1014]},{"teal":701,"source":"contracts/Factory.algo.ts:10","pc":[1015]},{"teal":702,"source":"contracts/Factory.algo.ts:10","pc":[1016]},{"teal":703,"source":"contracts/Factory.algo.ts:10","pc":[1017,1018,1019]},{"teal":704,"source":"contracts/Factory.algo.ts:10","pc":[1020,1021]},{"teal":705,"source":"contracts/Factory.algo.ts:10","pc":[1022,1023]},{"teal":706,"source":"contracts/Factory.algo.ts:10","pc":[1024]},{"teal":707,"source":"contracts/Factory.algo.ts:10","pc":[1025]},{"teal":708,"source":"contracts/Factory.algo.ts:10","pc":[1026,1027]},{"teal":709,"source":"contracts/Factory.algo.ts:10","pc":[1028,1029]},{"teal":710,"source":"contracts/Factory.algo.ts:10","pc":[1030,1031]},{"teal":711,"source":"contracts/Factory.algo.ts:10","pc":[1032,1033]},{"teal":712,"source":"contracts/Factory.algo.ts:10","pc":[1034]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGCAEABoAgAiYGABtwb29sX2FwcHJvdmFsX3Byb2dyYW1fcGFnZV8GcG9vbHNfB21hbmFnZXIEuER7NgQVH3x1MRgUJQsxGQiNDANHAAAAAAAAAAAAAAM4AAAAAAAAAAAAAACIAAIjQ4oAACs2MgByB0hniYgAAiNDigAAKCSMAIsAIgxBAB8piwAWUL1MSBRBAAopiwAWUEm8SCi/iwAjCIwAQv/asSWyECSyGYAjcG9vbF9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VfAAAAAAAAAAC+RLJAgCNwb29sX2FwcHJvdmFsX3Byb2dyYW1fcGFnZV8AAAAAAAAAAb5EskCAI3Bvb2xfYXBwcm92YWxfcHJvZ3JhbV9wYWdlXwAAAAAAAAACvkSyQIAjcG9vbF9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VfAAAAAAAAAAO+RLJAgCNwb29sX2FwcHJvdmFsX3Byb2dyYW1fcGFnZV8AAAAAAAAABL5EskCAI3Bvb2xfYXBwcm92YWxfcHJvZ3JhbV9wYWdlXwAAAAAAAAAFvkSyQIAjcG9vbF9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VfAAAAAAAAAAa+RLJAgCNwb29sX2FwcHJvdmFsX3Byb2dyYW1fcGFnZV8AAAAAAAAAB75EskCAAQqyH4EEsjQhBbI1gQOyOCcEshqBoI0GsgGziScFNhoDVwIANhoCVwIANhoBF4gABRZQsCNDigMBKIv+FSIKIQUPRIv+FSIKi/0VIgoSRIv9i/6IAL2MACqLAFC9TEgURCqLAFBJvEgoKIACAAyL/xaIAW2L/kkVIgoWVwYCTFCIAWuL/UkVIgoWVwYCTFCIAVxIUL+xJbIQgATmNf21shqL/7IYi/5JFSIKFlcGAkxQshqL/UkVIgoWVwYCTFCyGiSyAbO0OyMJxTpXBAAXjACJiAACI0OKAACJNhoCVwIANhoBF4gAAiNDigIAKIgAGIv/IQQIIwkhBAqMACmLABZQSbxIi/6/iYoAADEAK2QSRImKAgEoSSiMACSMAYsBi/8VIgoMQQA1iwCL/zX/JIsBIgsINP9MIlgXFlCMAIsAi/41/ySLASILCDT/TCJYFxZQjACLASMIjAFC/8CLAAOMAEYBiYoCAYv/i/4NQQAFi/9CAAKL/oknBTYaAlcCADYaAVcCAIgABFCwI0OKAgEoi/6L/4j/eowAKosAUL5EjACJMRtB/MQnBDYaAI4B/LsAgARCWI4JgASh6zAggASFTe3ggASktQPBgATJkROWNhoAjgX8nv48/vL++/+ZAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Pool = {
  id: bigint,
  assets: bigint[],
  weights: bigint[]
}


/**
 * Converts the ABI tuple representation of a Pool to the struct representation
 */
export function PoolFromTuple(abiTuple: [bigint, bigint[], bigint[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Pool, APP_SPEC.structs) as Pool
}

/**
 * The argument types for the Factory contract
 */
export type FactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool()void': Record<string, never>
    'initPool(uint64,uint64[],uint64[])uint64': {
      /**
       * Pool App ID
       */
      poolId: bigint | number
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
    'opUp()void': Record<string, never>
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': {
      assetIds: bigint[] | number[]
      weights: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool()void': []
    'initPool(uint64,uint64[],uint64[])uint64': [poolId: bigint | number, assetIds: bigint[] | number[], weights: bigint[] | number[]]
    'opUp()void': []
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': [assetIds: bigint[] | number[], weights: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type FactoryReturns = {
  'createApplication()void': void
  'createPool()void': void
  'initPool(uint64,uint64[],uint64[])uint64': bigint
  'opUp()void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])': Pool
}

/**
 * Defines the types of available calls and state of the Factory smart contract.
 */
export type FactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: FactoryArgs['obj']['createApplication()void']
      argsTuple: FactoryArgs['tuple']['createApplication()void']
      returns: FactoryReturns['createApplication()void']
    }>
    & Record<'createPool()void' | 'createPool', {
      argsObj: FactoryArgs['obj']['createPool()void']
      argsTuple: FactoryArgs['tuple']['createPool()void']
      returns: FactoryReturns['createPool()void']
    }>
    & Record<'initPool(uint64,uint64[],uint64[])uint64' | 'initPool', {
      argsObj: FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64']
      argsTuple: FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']
      returns: FactoryReturns['initPool(uint64,uint64[],uint64[])uint64']
    }>
    & Record<'opUp()void' | 'opUp', {
      argsObj: FactoryArgs['obj']['opUp()void']
      argsTuple: FactoryArgs['tuple']['opUp()void']
      returns: FactoryReturns['opUp()void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' | 'getPool', {
      argsObj: FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      argsTuple: FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
      returns: FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        poolContractApprovalProgram: Map<bigint | number, Uint8Array>
        pools: Map<Uint8Array, Pool>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactorySignatures = keyof FactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryNonVoidMethodSignatures = keyof FactoryTypes['methods'] extends infer T ? T extends keyof FactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Factory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Factory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactorySignatures> = FactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryCreateCallParams =
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Factory smart contract
 */
export abstract class FactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return FactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Factory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool()void ABI method
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initPool(uint64,uint64[],uint64[])uint64 ABI method
   *
   * Initialize the pool with the given assets & weights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initPool(uint64,uint64[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.assetIds, params.args.weights],
    }
  }
  /**
   * Constructs a no op call for the opUp()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opUp()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * *******************
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPool(uint64[],uint64[])(uint64,uint64[],uint64[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIds, params.args.weights],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Factory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Factory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Factory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * createApplication method called at creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FactoryArgs['obj']['createApplication()void'] | FactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryReturns['createApplication()void']) }, appClient: new FactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Factory smart contract
 */
export class FactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Factory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryClient> {
    return new FactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initPool: (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.initPool(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.opUp(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPool: (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryParamsFactory.getPool(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Factory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Factory smart contract using the `createPool()void` ABI method.
     *
    * Deploy the pool contract, compiled teal of the contract
    must be loaded in poolContractApprovalProgram

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['createPool()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `initPool(uint64,uint64[],uint64[])uint64` ABI method.
     *
     * Initialize the pool with the given assets & weights
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initPool: async (params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.initPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `opUp()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['opUp()void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * *******************
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPool: async (params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
      return {...result, return: result.return as unknown as (undefined | FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Factory smart contract using the `getPool(uint64[],uint64[])(uint64,uint64[],uint64[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>) {
    const result = await this.appClient.send.call(FactoryParamsFactory.getPool(params))
    return result.return as unknown as FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']
  }

  /**
   * Methods to access state for the current Factory app
   */
  state = {
    /**
     * Methods to access global state for the current Factory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Factory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the poolContractApprovalProgram map in box state
       */
      poolContractApprovalProgram: {
        /**
         * Get all current values of the poolContractApprovalProgram map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("poolContractApprovalProgram")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the poolContractApprovalProgram map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("poolContractApprovalProgram", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Pool>> => { return (await this.appClient.state.box.getMap("pools")) as Map<Uint8Array, Pool> },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: Uint8Array): Promise<Pool | undefined> => { return await this.appClient.state.box.getMapValue("pools", key) as Pool | undefined },
      },
    },
  }

  public newGroup(): FactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool()void method call against the Factory contract
       */
      createPool(params: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initPool(uint64,uint64[],uint64[])uint64 method call against the Factory contract
       */
      initPool(params: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('initPool(uint64,uint64[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a opUp()void method call against the Factory contract
       */
      opUp(params: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the Factory contract
       */
      managerWritePoolContractProgram(params: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) method call against the Factory contract
       */
      getPool(params: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPool(uint64[],uint64[])(uint64,uint64[],uint64[])', v))
        return this
      },
      /**
       * Add a clear state call to the Factory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryComposer
  }
}
export type FactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool()void ABI method.
   *
  * Deploy the pool contract, compiled teal of the contract
  must be loaded in poolContractApprovalProgram

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<FactoryArgs['obj']['createPool()void'] | FactoryArgs['tuple']['createPool()void']>): FactoryComposer<[...TReturns, FactoryReturns['createPool()void'] | undefined]>

  /**
   * Calls the initPool(uint64,uint64[],uint64[])uint64 ABI method.
   *
   * Initialize the pool with the given assets & weights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPool(params?: CallParams<FactoryArgs['obj']['initPool(uint64,uint64[],uint64[])uint64'] | FactoryArgs['tuple']['initPool(uint64,uint64[],uint64[])uint64']>): FactoryComposer<[...TReturns, FactoryReturns['initPool(uint64,uint64[],uint64[])uint64'] | undefined]>

  /**
   * Calls the opUp()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<FactoryArgs['obj']['opUp()void'] | FactoryArgs['tuple']['opUp()void']>): FactoryComposer<[...TReturns, FactoryReturns['opUp()void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * *******************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<FactoryArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | FactoryArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): FactoryComposer<[...TReturns, FactoryReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the getPool(uint64[],uint64[])(uint64,uint64[],uint64[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPool(params?: CallParams<FactoryArgs['obj']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | FactoryArgs['tuple']['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])']>): FactoryComposer<[...TReturns, FactoryReturns['getPool(uint64[],uint64[])(uint64,uint64[],uint64[])'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Factory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryComposerResults<TReturns>>
}
export type FactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

